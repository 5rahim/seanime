[
  {
    "package": "metadata",
    "goStruct": {
      "filepath": "../internal/api/metadata/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeMetadataRequestedEvent",
      "formattedName": "Metadata_AnimeMetadataRequestedEvent",
      "package": "metadata",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AnimeMetadata",
          "jsonName": "animeMetadata",
          "goType": "AnimeMetadata",
          "typescriptType": "Metadata_AnimeMetadata",
          "usedTypescriptType": "Metadata_AnimeMetadata",
          "usedStructName": "metadata.AnimeMetadata",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeMetadataRequestedEvent is triggered when anime metadata is requested and right before the metadata is processed.",
        " This event is followed by [AnimeMetadataEvent] which is triggered when the metadata is available.",
        " Prevent default to skip the default behavior and return the modified metadata.",
        " If the modified metadata is nil, an error will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "metadata",
    "goStruct": {
      "filepath": "../internal/api/metadata/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeMetadataEvent",
      "formattedName": "Metadata_AnimeMetadataEvent",
      "package": "metadata",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AnimeMetadata",
          "jsonName": "animeMetadata",
          "goType": "AnimeMetadata",
          "typescriptType": "Metadata_AnimeMetadata",
          "usedTypescriptType": "Metadata_AnimeMetadata",
          "usedStructName": "metadata.AnimeMetadata",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeMetadataEvent is triggered when anime metadata is available and is about to be returned.",
        " Anime metadata can be requested in many places, ranging from displaying the anime entry to starting a torrent stream.",
        " This event is triggered after [AnimeMetadataRequestedEvent].",
        " If the modified metadata is nil, an error will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "metadata",
    "goStruct": {
      "filepath": "../internal/api/metadata/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEpisodeMetadataRequestedEvent",
      "formattedName": "Metadata_AnimeEpisodeMetadataRequestedEvent",
      "package": "metadata",
      "fields": [
        {
          "name": "EpisodeMetadata",
          "jsonName": "animeEpisodeMetadata",
          "goType": "EpisodeMetadata",
          "typescriptType": "Metadata_EpisodeMetadata",
          "usedTypescriptType": "Metadata_EpisodeMetadata",
          "usedStructName": "metadata.EpisodeMetadata",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEpisodeMetadataRequestedEvent is triggered when anime episode metadata is requested.",
        " Prevent default to skip the default behavior and return the overridden metadata.",
        " This event is triggered before [AnimeEpisodeMetadataEvent].",
        " If the modified episode metadata is nil, an empty EpisodeMetadata object will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "metadata",
    "goStruct": {
      "filepath": "../internal/api/metadata/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEpisodeMetadataEvent",
      "formattedName": "Metadata_AnimeEpisodeMetadataEvent",
      "package": "metadata",
      "fields": [
        {
          "name": "EpisodeMetadata",
          "jsonName": "animeEpisodeMetadata",
          "goType": "EpisodeMetadata",
          "typescriptType": "Metadata_EpisodeMetadata",
          "usedTypescriptType": "Metadata_EpisodeMetadata",
          "usedStructName": "metadata.EpisodeMetadata",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEpisodeMetadataEvent is triggered when anime episode metadata is available and is about to be returned.",
        " In the current implementation, episode metadata is requested for display purposes. It is used to get a more complete metadata object since the original AnimeMetadata object is not complete.",
        " This event is triggered after [AnimeEpisodeMetadataRequestedEvent].",
        " If the modified episode metadata is nil, an empty EpisodeMetadata object will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "continuity",
    "goStruct": {
      "filepath": "../internal/continuity/hook_events.go",
      "filename": "hook_events.go",
      "name": "WatchHistoryItemRequestedEvent",
      "formattedName": "Continuity_WatchHistoryItemRequestedEvent",
      "package": "continuity",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "WatchHistoryItem",
          "jsonName": "watchHistoryItem",
          "goType": "WatchHistoryItem",
          "typescriptType": "Continuity_WatchHistoryItem",
          "usedTypescriptType": "Continuity_WatchHistoryItem",
          "usedStructName": "continuity.WatchHistoryItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " WatchHistoryItemRequestedEvent is triggered when a watch history item is requested.",
        " Prevent default to skip getting the watch history item from the file cache, in this case the event should have a valid WatchHistoryItem object or set it to nil to indicate that the watch history item was not found."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "continuity",
    "goStruct": {
      "filepath": "../internal/continuity/hook_events.go",
      "filename": "hook_events.go",
      "name": "WatchHistoryItemUpdatedEvent",
      "formattedName": "Continuity_WatchHistoryItemUpdatedEvent",
      "package": "continuity",
      "fields": [
        {
          "name": "WatchHistoryItem",
          "jsonName": "watchHistoryItem",
          "goType": "WatchHistoryItem",
          "typescriptType": "Continuity_WatchHistoryItem",
          "usedTypescriptType": "Continuity_WatchHistoryItem",
          "usedStructName": "continuity.WatchHistoryItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " WatchHistoryItemUpdatedEvent is triggered when a watch history item is updated."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "continuity",
    "goStruct": {
      "filepath": "../internal/continuity/hook_events.go",
      "filename": "hook_events.go",
      "name": "WatchHistoryLocalFileEpisodeItemRequestedEvent",
      "formattedName": "Continuity_WatchHistoryLocalFileEpisodeItemRequestedEvent",
      "package": "continuity",
      "fields": [
        {
          "name": "Path",
          "jsonName": "Path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFiles",
          "jsonName": "LocalFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "WatchHistoryItem",
          "jsonName": "watchHistoryItem",
          "goType": "WatchHistoryItem",
          "typescriptType": "Continuity_WatchHistoryItem",
          "usedTypescriptType": "Continuity_WatchHistoryItem",
          "usedStructName": "continuity.WatchHistoryItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "continuity",
    "goStruct": {
      "filepath": "../internal/continuity/hook_events.go",
      "filename": "hook_events.go",
      "name": "WatchHistoryStreamEpisodeItemRequestedEvent",
      "formattedName": "Continuity_WatchHistoryStreamEpisodeItemRequestedEvent",
      "package": "continuity",
      "fields": [
        {
          "name": "Episode",
          "jsonName": "Episode",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "MediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "WatchHistoryItem",
          "jsonName": "watchHistoryItem",
          "goType": "WatchHistoryItem",
          "typescriptType": "Continuity_WatchHistoryItem",
          "usedTypescriptType": "Continuity_WatchHistoryItem",
          "usedStructName": "continuity.WatchHistoryItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "debrid_client",
    "goStruct": {
      "filepath": "../internal/debrid/client/hook_events.go",
      "filename": "hook_events.go",
      "name": "DebridAutoSelectTorrentsFetchedEvent",
      "formattedName": "DebridClient_DebridAutoSelectTorrentsFetchedEvent",
      "package": "debrid_client",
      "fields": [
        {
          "name": "Torrents",
          "jsonName": "Torrents",
          "goType": "[]hibiketorrent.AnimeTorrent",
          "typescriptType": "Array\u003cHibikeTorrent_AnimeTorrent\u003e",
          "usedTypescriptType": "HibikeTorrent_AnimeTorrent",
          "usedStructName": "hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " DebridAutoSelectTorrentsFetchedEvent is triggered when the torrents are fetched for auto select.",
        " The torrents are sorted by seeders from highest to lowest.",
        " This event is triggered before the top 3 torrents are analyzed."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "debrid_client",
    "goStruct": {
      "filepath": "../internal/debrid/client/hook_events.go",
      "filename": "hook_events.go",
      "name": "DebridSkipStreamCheckEvent",
      "formattedName": "DebridClient_DebridSkipStreamCheckEvent",
      "package": "debrid_client",
      "fields": [
        {
          "name": "StreamURL",
          "jsonName": "streamURL",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Retries",
          "jsonName": "retries",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "RetryDelay",
          "jsonName": "retryDelay",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": [
            " in seconds"
          ]
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " DebridSkipStreamCheckEvent is triggered when the debrid client is about to skip the stream check.",
        " Prevent default to enable the stream check."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "debrid_client",
    "goStruct": {
      "filepath": "../internal/debrid/client/hook_events.go",
      "filename": "hook_events.go",
      "name": "DebridSendStreamToMediaPlayerEvent",
      "formattedName": "DebridClient_DebridSendStreamToMediaPlayerEvent",
      "package": "debrid_client",
      "fields": [
        {
          "name": "WindowTitle",
          "jsonName": "windowTitle",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "StreamURL",
          "jsonName": "streamURL",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AniDbEpisode",
          "jsonName": "aniDbEpisode",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "PlaybackType",
          "jsonName": "playbackType",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " DebridSendStreamToMediaPlayerEvent is triggered when the debrid client is about to send a stream to the media player.",
        " Prevent default to skip the playback."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "debrid_client",
    "goStruct": {
      "filepath": "../internal/debrid/client/hook_events.go",
      "filename": "hook_events.go",
      "name": "DebridLocalDownloadRequestedEvent",
      "formattedName": "DebridClient_DebridLocalDownloadRequestedEvent",
      "package": "debrid_client",
      "fields": [
        {
          "name": "TorrentName",
          "jsonName": "torrentName",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Destination",
          "jsonName": "destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "DownloadUrl",
          "jsonName": "downloadUrl",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " DebridLocalDownloadRequestedEvent is triggered when Seanime is about to download a debrid torrent locally.",
        " Prevent default to skip the default download and override the download."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "discordrpc_presence",
    "goStruct": {
      "filepath": "../internal/discordrpc/presence/hook_events.go",
      "filename": "hook_events.go",
      "name": "DiscordPresenceAnimeActivityRequestedEvent",
      "formattedName": "DiscordRPC_DiscordPresenceAnimeActivityRequestedEvent",
      "package": "discordrpc_presence",
      "fields": [
        {
          "name": "AnimeActivity",
          "jsonName": "animeActivity",
          "goType": "AnimeActivity",
          "typescriptType": "DiscordRPC_AnimeActivity",
          "usedTypescriptType": "DiscordRPC_AnimeActivity",
          "usedStructName": "discordrpc_presence.AnimeActivity",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Details",
          "jsonName": "details",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "State",
          "jsonName": "state",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "StartTimestamp",
          "jsonName": "startTimestamp",
          "goType": "int64",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EndTimestamp",
          "jsonName": "endTimestamp",
          "goType": "int64",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LargeImage",
          "jsonName": "largeImage",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "LargeText",
          "jsonName": "largeText",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SmallImage",
          "jsonName": "smallImage",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SmallText",
          "jsonName": "smallText",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Buttons",
          "jsonName": "buttons",
          "goType": "[]discordrpc_client.Button",
          "typescriptType": "Array\u003cDiscordRPC_Button\u003e",
          "usedTypescriptType": "DiscordRPC_Button",
          "usedStructName": "discordrpc_client.Button",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Instance",
          "jsonName": "instance",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Type",
          "jsonName": "type",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " DiscordPresenceAnimeActivityRequestedEvent is triggered when anime activity is requested, after the [animeActivity] is processed, and right before the activity is sent to queue.",
        " There is no guarantee as to when or if the activity will be successfully sent to discord.",
        " Note that this event is triggered every 6 seconds or so, avoid heavy processing or perform it only when the activity is changed.",
        " Prevent default to stop the activity from being sent to discord."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "discordrpc_presence",
    "goStruct": {
      "filepath": "../internal/discordrpc/presence/hook_events.go",
      "filename": "hook_events.go",
      "name": "DiscordPresenceMangaActivityRequestedEvent",
      "formattedName": "DiscordRPC_DiscordPresenceMangaActivityRequestedEvent",
      "package": "discordrpc_presence",
      "fields": [
        {
          "name": "MangaActivity",
          "jsonName": "mangaActivity",
          "goType": "MangaActivity",
          "typescriptType": "DiscordRPC_MangaActivity",
          "usedTypescriptType": "DiscordRPC_MangaActivity",
          "usedStructName": "discordrpc_presence.MangaActivity",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Details",
          "jsonName": "details",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "State",
          "jsonName": "state",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "StartTimestamp",
          "jsonName": "startTimestamp",
          "goType": "int64",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EndTimestamp",
          "jsonName": "endTimestamp",
          "goType": "int64",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LargeImage",
          "jsonName": "largeImage",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "LargeText",
          "jsonName": "largeText",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SmallImage",
          "jsonName": "smallImage",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SmallText",
          "jsonName": "smallText",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Buttons",
          "jsonName": "buttons",
          "goType": "[]discordrpc_client.Button",
          "typescriptType": "Array\u003cDiscordRPC_Button\u003e",
          "usedTypescriptType": "DiscordRPC_Button",
          "usedStructName": "discordrpc_client.Button",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Instance",
          "jsonName": "instance",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Type",
          "jsonName": "type",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " DiscordPresenceMangaActivityRequestedEvent is triggered when manga activity is requested, after the [mangaActivity] is processed, and right before the activity is sent to queue.",
        " There is no guarantee as to when or if the activity will be successfully sent to discord.",
        " Note that this event is triggered every 6 seconds or so, avoid heavy processing or perform it only when the activity is changed.",
        " Prevent default to stop the activity from being sent to discord."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "discordrpc_presence",
    "goStruct": {
      "filepath": "../internal/discordrpc/presence/hook_events.go",
      "filename": "hook_events.go",
      "name": "DiscordPresenceClientClosedEvent",
      "formattedName": "DiscordRPC_DiscordPresenceClientClosedEvent",
      "package": "discordrpc_presence",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " DiscordPresenceClientClosedEvent is triggered when the discord rpc client is closed."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnimeCollectionRequestedEvent",
      "formattedName": "HandleGetAnimeCollectionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnimeCollectionRequestedEvent is triggered when GetAnimeCollection is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnimeCollectionEvent",
      "formattedName": "HandleGetAnimeCollectionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnimeCollectionEvent is triggered after processing GetAnimeCollection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetRawAnimeCollectionRequestedEvent",
      "formattedName": "HandleGetRawAnimeCollectionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetRawAnimeCollectionRequestedEvent is triggered when GetRawAnimeCollection is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetRawAnimeCollectionEvent",
      "formattedName": "HandleGetRawAnimeCollectionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetRawAnimeCollectionEvent is triggered after processing GetRawAnimeCollection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleEditAnilistListEntryRequestedEvent",
      "formattedName": "HandleEditAnilistListEntryRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Status",
          "jsonName": "status",
          "goType": "anilist.MediaListStatus",
          "typescriptType": "AL_MediaListStatus",
          "usedTypescriptType": "AL_MediaListStatus",
          "usedStructName": "anilist.MediaListStatus",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Score",
          "jsonName": "score",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Progress",
          "jsonName": "progress",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "StartDate",
          "jsonName": "startedAt",
          "goType": "anilist.FuzzyDateInput",
          "typescriptType": "AL_FuzzyDateInput",
          "usedTypescriptType": "AL_FuzzyDateInput",
          "usedStructName": "anilist.FuzzyDateInput",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EndDate",
          "jsonName": "completedAt",
          "goType": "anilist.FuzzyDateInput",
          "typescriptType": "AL_FuzzyDateInput",
          "usedTypescriptType": "AL_FuzzyDateInput",
          "usedStructName": "anilist.FuzzyDateInput",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Type",
          "jsonName": "type",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleEditAnilistListEntryRequestedEvent is triggered when EditAnilistListEntry is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnilistAnimeDetailsRequestedEvent",
      "formattedName": "HandleGetAnilistAnimeDetailsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeDetailsById_Media",
          "typescriptType": "AL_AnimeDetailsById_Media",
          "usedTypescriptType": "AL_AnimeDetailsById_Media",
          "usedStructName": "anilist.AnimeDetailsById_Media",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnilistAnimeDetailsRequestedEvent is triggered when GetAnilistAnimeDetails is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnilistAnimeDetailsEvent",
      "formattedName": "HandleGetAnilistAnimeDetailsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeDetailsById_Media",
          "typescriptType": "AL_AnimeDetailsById_Media",
          "usedTypescriptType": "AL_AnimeDetailsById_Media",
          "usedStructName": "anilist.AnimeDetailsById_Media",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnilistAnimeDetailsEvent is triggered after processing GetAnilistAnimeDetails."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnilistStudioDetailsRequestedEvent",
      "formattedName": "HandleGetAnilistStudioDetailsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.StudioDetails",
          "typescriptType": "AL_StudioDetails",
          "usedTypescriptType": "AL_StudioDetails",
          "usedStructName": "anilist.StudioDetails",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnilistStudioDetailsRequestedEvent is triggered when GetAnilistStudioDetails is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnilistStudioDetailsEvent",
      "formattedName": "HandleGetAnilistStudioDetailsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.StudioDetails",
          "typescriptType": "AL_StudioDetails",
          "usedTypescriptType": "AL_StudioDetails",
          "usedStructName": "anilist.StudioDetails",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnilistStudioDetailsEvent is triggered after processing GetAnilistStudioDetails."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDeleteAnilistListEntryRequestedEvent",
      "formattedName": "HandleDeleteAnilistListEntryRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Type",
          "jsonName": "type",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDeleteAnilistListEntryRequestedEvent is triggered when DeleteAnilistListEntry is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListAnimeRequestedEvent",
      "formattedName": "HandleAnilistListAnimeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Page",
          "jsonName": "page",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Search",
          "jsonName": "search",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "PerPage",
          "jsonName": "perPage",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Sort",
          "jsonName": "sort",
          "goType": "[]anilist.MediaSort",
          "typescriptType": "Array\u003cMediaSort\u003e",
          "usedTypescriptType": "MediaSort",
          "usedStructName": "[]anilist.MediaSort",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Status",
          "jsonName": "status",
          "goType": "[]anilist.MediaStatus",
          "typescriptType": "Array\u003cMediaStatus\u003e",
          "usedTypescriptType": "MediaStatus",
          "usedStructName": "[]anilist.MediaStatus",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Genres",
          "jsonName": "genres",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AverageScoreGreater",
          "jsonName": "averageScore_greater",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Season",
          "jsonName": "season",
          "goType": "anilist.MediaSeason",
          "typescriptType": "AL_MediaSeason",
          "usedTypescriptType": "AL_MediaSeason",
          "usedStructName": "anilist.MediaSeason",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "SeasonYear",
          "jsonName": "seasonYear",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Format",
          "jsonName": "format",
          "goType": "anilist.MediaFormat",
          "typescriptType": "AL_MediaFormat",
          "usedTypescriptType": "AL_MediaFormat",
          "usedStructName": "anilist.MediaFormat",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "IsAdult",
          "jsonName": "isAdult",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.ListAnime",
          "typescriptType": "AL_ListAnime",
          "usedTypescriptType": "AL_ListAnime",
          "usedStructName": "anilist.ListAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListAnimeRequestedEvent is triggered when AnilistListAnime is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListAnimeEvent",
      "formattedName": "HandleAnilistListAnimeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.ListAnime",
          "typescriptType": "AL_ListAnime",
          "usedTypescriptType": "AL_ListAnime",
          "usedStructName": "anilist.ListAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListAnimeEvent is triggered after processing AnilistListAnime."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListRecentAiringAnimeRequestedEvent",
      "formattedName": "HandleAnilistListRecentAiringAnimeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Page",
          "jsonName": "page",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Search",
          "jsonName": "search",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "PerPage",
          "jsonName": "perPage",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AiringAtGreater",
          "jsonName": "airingAt_greater",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AiringAtLesser",
          "jsonName": "airingAt_lesser",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "NotYetAired",
          "jsonName": "notYetAired",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Sort",
          "jsonName": "sort",
          "goType": "[]anilist.AiringSort",
          "typescriptType": "Array\u003cAiringSort\u003e",
          "usedTypescriptType": "AiringSort",
          "usedStructName": "[]anilist.AiringSort",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.ListRecentAnime",
          "typescriptType": "AL_ListRecentAnime",
          "usedTypescriptType": "AL_ListRecentAnime",
          "usedStructName": "anilist.ListRecentAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListRecentAiringAnimeRequestedEvent is triggered when AnilistListRecentAiringAnime is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListRecentAiringAnimeEvent",
      "formattedName": "HandleAnilistListRecentAiringAnimeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.ListRecentAnime",
          "typescriptType": "AL_ListRecentAnime",
          "usedTypescriptType": "AL_ListRecentAnime",
          "usedStructName": "anilist.ListRecentAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListRecentAiringAnimeEvent is triggered after processing AnilistListRecentAiringAnime."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListMissedSequelsRequestedEvent",
      "formattedName": "HandleAnilistListMissedSequelsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListMissedSequelsRequestedEvent is triggered when AnilistListMissedSequels is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListMissedSequelsEvent",
      "formattedName": "HandleAnilistListMissedSequelsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListMissedSequelsEvent is triggered after processing AnilistListMissedSequels."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAniListStatsRequestedEvent",
      "formattedName": "HandleGetAniListStatsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.Stats",
          "typescriptType": "AL_Stats",
          "usedTypescriptType": "AL_Stats",
          "usedStructName": "anilist.Stats",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAniListStatsRequestedEvent is triggered when GetAniListStats is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAniListStatsEvent",
      "formattedName": "HandleGetAniListStatsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.Stats",
          "typescriptType": "AL_Stats",
          "usedTypescriptType": "AL_Stats",
          "usedStructName": "anilist.Stats",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAniListStatsEvent is triggered after processing GetAniListStats."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLibraryCollectionRequestedEvent",
      "formattedName": "HandleGetLibraryCollectionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LibraryCollection",
          "typescriptType": "Anime_LibraryCollection",
          "usedTypescriptType": "Anime_LibraryCollection",
          "usedStructName": "anime.LibraryCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLibraryCollectionRequestedEvent is triggered when GetLibraryCollection is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLibraryCollectionEvent",
      "formattedName": "HandleGetLibraryCollectionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LibraryCollection",
          "typescriptType": "Anime_LibraryCollection",
          "usedTypescriptType": "Anime_LibraryCollection",
          "usedStructName": "anime.LibraryCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLibraryCollectionEvent is triggered after processing GetLibraryCollection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAddUnknownMediaRequestedEvent",
      "formattedName": "HandleAddUnknownMediaRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaIds",
          "jsonName": "mediaIds",
          "goType": "[]int",
          "typescriptType": "Array\u003cnumber\u003e",
          "usedStructName": "handlers.[]int",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAddUnknownMediaRequestedEvent is triggered when AddUnknownMedia is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAddUnknownMediaEvent",
      "formattedName": "HandleAddUnknownMediaEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAddUnknownMediaEvent is triggered after processing AddUnknownMedia."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnimeEntryRequestedEvent",
      "formattedName": "HandleGetAnimeEntryRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Entry",
          "typescriptType": "Anime_Entry",
          "usedTypescriptType": "Anime_Entry",
          "usedStructName": "anime.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnimeEntryRequestedEvent is triggered when GetAnimeEntry is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnimeEntryEvent",
      "formattedName": "HandleGetAnimeEntryEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Entry",
          "typescriptType": "Anime_Entry",
          "usedTypescriptType": "Anime_Entry",
          "usedStructName": "anime.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnimeEntryEvent is triggered after processing GetAnimeEntry."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnimeEntryBulkActionRequestedEvent",
      "formattedName": "HandleAnimeEntryBulkActionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Action",
          "jsonName": "action",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnimeEntryBulkActionRequestedEvent is triggered when AnimeEntryBulkAction is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnimeEntryBulkActionEvent",
      "formattedName": "HandleAnimeEntryBulkActionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnimeEntryBulkActionEvent is triggered after processing AnimeEntryBulkAction."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleOpenAnimeEntryInExplorerRequestedEvent",
      "formattedName": "HandleOpenAnimeEntryInExplorerRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleOpenAnimeEntryInExplorerRequestedEvent is triggered when OpenAnimeEntryInExplorer is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleFetchAnimeEntrySuggestionsRequestedEvent",
      "formattedName": "HandleFetchAnimeEntrySuggestionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Dir",
          "jsonName": "dir",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleFetchAnimeEntrySuggestionsRequestedEvent is triggered when FetchAnimeEntrySuggestions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleFetchAnimeEntrySuggestionsEvent",
      "formattedName": "HandleFetchAnimeEntrySuggestionsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleFetchAnimeEntrySuggestionsEvent is triggered after processing FetchAnimeEntrySuggestions."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnimeEntryManualMatchRequestedEvent",
      "formattedName": "HandleAnimeEntryManualMatchRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Paths",
          "jsonName": "paths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnimeEntryManualMatchRequestedEvent is triggered when AnimeEntryManualMatch is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnimeEntryManualMatchEvent",
      "formattedName": "HandleAnimeEntryManualMatchEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnimeEntryManualMatchEvent is triggered after processing AnimeEntryManualMatch."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMissingEpisodesRequestedEvent",
      "formattedName": "HandleGetMissingEpisodesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.MissingEpisodes",
          "typescriptType": "Anime_MissingEpisodes",
          "usedTypescriptType": "Anime_MissingEpisodes",
          "usedStructName": "anime.MissingEpisodes",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMissingEpisodesRequestedEvent is triggered when GetMissingEpisodes is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMissingEpisodesEvent",
      "formattedName": "HandleGetMissingEpisodesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.MissingEpisodes",
          "typescriptType": "Anime_MissingEpisodes",
          "usedTypescriptType": "Anime_MissingEpisodes",
          "usedStructName": "anime.MissingEpisodes",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMissingEpisodesEvent is triggered after processing GetMissingEpisodes."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnimeEntrySilenceStatusRequestedEvent",
      "formattedName": "HandleGetAnimeEntrySilenceStatusRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.SilencedMediaEntry",
          "typescriptType": "Models_SilencedMediaEntry",
          "usedTypescriptType": "Models_SilencedMediaEntry",
          "usedStructName": "models.SilencedMediaEntry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnimeEntrySilenceStatusRequestedEvent is triggered when GetAnimeEntrySilenceStatus is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnimeEntrySilenceStatusEvent",
      "formattedName": "HandleGetAnimeEntrySilenceStatusEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.SilencedMediaEntry",
          "typescriptType": "Models_SilencedMediaEntry",
          "usedTypescriptType": "Models_SilencedMediaEntry",
          "usedStructName": "models.SilencedMediaEntry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnimeEntrySilenceStatusEvent is triggered after processing GetAnimeEntrySilenceStatus."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleToggleAnimeEntrySilenceStatusRequestedEvent",
      "formattedName": "HandleToggleAnimeEntrySilenceStatusRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleToggleAnimeEntrySilenceStatusRequestedEvent is triggered when ToggleAnimeEntrySilenceStatus is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateAnimeEntryProgressRequestedEvent",
      "formattedName": "HandleUpdateAnimeEntryProgressRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MalId",
          "jsonName": "malId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "TotalEpisodes",
          "jsonName": "totalEpisodes",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateAnimeEntryProgressRequestedEvent is triggered when UpdateAnimeEntryProgress is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateAnimeEntryRepeatRequestedEvent",
      "formattedName": "HandleUpdateAnimeEntryRepeatRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Repeat",
          "jsonName": "repeat",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateAnimeEntryRepeatRequestedEvent is triggered when UpdateAnimeEntryRepeat is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleLoginRequestedEvent",
      "formattedName": "HandleLoginRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Token",
          "jsonName": "token",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleLoginRequestedEvent is triggered when Login is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleLoginEvent",
      "formattedName": "HandleLoginEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleLoginEvent is triggered after processing Login."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleLogoutRequestedEvent",
      "formattedName": "HandleLogoutRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleLogoutRequestedEvent is triggered when Logout is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleLogoutEvent",
      "formattedName": "HandleLogoutEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleLogoutEvent is triggered after processing Logout."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRunAutoDownloaderRequestedEvent",
      "formattedName": "HandleRunAutoDownloaderRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRunAutoDownloaderRequestedEvent is triggered when RunAutoDownloader is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderRuleRequestedEvent",
      "formattedName": "HandleGetAutoDownloaderRuleRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderRuleRequestedEvent is triggered when GetAutoDownloaderRule is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderRuleEvent",
      "formattedName": "HandleGetAutoDownloaderRuleEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderRuleEvent is triggered after processing GetAutoDownloaderRule."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderRulesByAnimeRequestedEvent",
      "formattedName": "HandleGetAutoDownloaderRulesByAnimeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderRulesByAnimeRequestedEvent is triggered when GetAutoDownloaderRulesByAnime is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderRulesByAnimeEvent",
      "formattedName": "HandleGetAutoDownloaderRulesByAnimeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderRulesByAnimeEvent is triggered after processing GetAutoDownloaderRulesByAnime."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderRulesRequestedEvent",
      "formattedName": "HandleGetAutoDownloaderRulesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderRulesRequestedEvent is triggered when GetAutoDownloaderRules is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderRulesEvent",
      "formattedName": "HandleGetAutoDownloaderRulesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderRulesEvent is triggered after processing GetAutoDownloaderRules."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleCreateAutoDownloaderRuleRequestedEvent",
      "formattedName": "HandleCreateAutoDownloaderRuleRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Enabled",
          "jsonName": "enabled",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ReleaseGroups",
          "jsonName": "releaseGroups",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Resolutions",
          "jsonName": "resolutions",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AdditionalTerms",
          "jsonName": "additionalTerms",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ComparisonTitle",
          "jsonName": "comparisonTitle",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "TitleComparisonType",
          "jsonName": "titleComparisonType",
          "goType": "anime.AutoDownloaderRuleTitleComparisonType",
          "typescriptType": "Anime_AutoDownloaderRuleTitleComparisonType",
          "usedTypescriptType": "Anime_AutoDownloaderRuleTitleComparisonType",
          "usedStructName": "anime.AutoDownloaderRuleTitleComparisonType",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeType",
          "jsonName": "episodeType",
          "goType": "anime.AutoDownloaderRuleEpisodeType",
          "typescriptType": "Anime_AutoDownloaderRuleEpisodeType",
          "usedTypescriptType": "Anime_AutoDownloaderRuleEpisodeType",
          "usedStructName": "anime.AutoDownloaderRuleEpisodeType",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumbers",
          "jsonName": "episodeNumbers",
          "goType": "[]int",
          "typescriptType": "Array\u003cnumber\u003e",
          "usedStructName": "handlers.[]int",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Destination",
          "jsonName": "destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleCreateAutoDownloaderRuleRequestedEvent is triggered when CreateAutoDownloaderRule is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleCreateAutoDownloaderRuleEvent",
      "formattedName": "HandleCreateAutoDownloaderRuleEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleCreateAutoDownloaderRuleEvent is triggered after processing CreateAutoDownloaderRule."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateAutoDownloaderRuleRequestedEvent",
      "formattedName": "HandleUpdateAutoDownloaderRuleRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Rule",
          "jsonName": "rule",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateAutoDownloaderRuleRequestedEvent is triggered when UpdateAutoDownloaderRule is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateAutoDownloaderRuleEvent",
      "formattedName": "HandleUpdateAutoDownloaderRuleEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateAutoDownloaderRuleEvent is triggered after processing UpdateAutoDownloaderRule."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDeleteAutoDownloaderRuleRequestedEvent",
      "formattedName": "HandleDeleteAutoDownloaderRuleRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDeleteAutoDownloaderRuleRequestedEvent is triggered when DeleteAutoDownloaderRule is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderItemsRequestedEvent",
      "formattedName": "HandleGetAutoDownloaderItemsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.AutoDownloaderItem",
          "typescriptType": "Models_AutoDownloaderItem",
          "usedTypescriptType": "Models_AutoDownloaderItem",
          "usedStructName": "models.AutoDownloaderItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderItemsRequestedEvent is triggered when GetAutoDownloaderItems is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAutoDownloaderItemsEvent",
      "formattedName": "HandleGetAutoDownloaderItemsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.AutoDownloaderItem",
          "typescriptType": "Models_AutoDownloaderItem",
          "usedTypescriptType": "Models_AutoDownloaderItem",
          "usedStructName": "models.AutoDownloaderItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAutoDownloaderItemsEvent is triggered after processing GetAutoDownloaderItems."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDeleteAutoDownloaderItemRequestedEvent",
      "formattedName": "HandleDeleteAutoDownloaderItemRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ID",
          "jsonName": "id",
          "goType": "uint",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDeleteAutoDownloaderItemRequestedEvent is triggered when DeleteAutoDownloaderItem is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateContinuityWatchHistoryItemRequestedEvent",
      "formattedName": "HandleUpdateContinuityWatchHistoryItemRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Options",
          "jsonName": "options",
          "goType": "continuity.UpdateWatchHistoryItemOptions",
          "typescriptType": "Continuity_UpdateWatchHistoryItemOptions",
          "usedTypescriptType": "Continuity_UpdateWatchHistoryItemOptions",
          "usedStructName": "continuity.UpdateWatchHistoryItemOptions",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateContinuityWatchHistoryItemRequestedEvent is triggered when UpdateContinuityWatchHistoryItem is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetContinuityWatchHistoryItemRequestedEvent",
      "formattedName": "HandleGetContinuityWatchHistoryItemRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "continuity.WatchHistoryItemResponse",
          "typescriptType": "Continuity_WatchHistoryItemResponse",
          "usedTypescriptType": "Continuity_WatchHistoryItemResponse",
          "usedStructName": "continuity.WatchHistoryItemResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetContinuityWatchHistoryItemRequestedEvent is triggered when GetContinuityWatchHistoryItem is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetContinuityWatchHistoryItemEvent",
      "formattedName": "HandleGetContinuityWatchHistoryItemEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "continuity.WatchHistoryItemResponse",
          "typescriptType": "Continuity_WatchHistoryItemResponse",
          "usedTypescriptType": "Continuity_WatchHistoryItemResponse",
          "usedStructName": "continuity.WatchHistoryItemResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetContinuityWatchHistoryItemEvent is triggered after processing GetContinuityWatchHistoryItem."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetContinuityWatchHistoryRequestedEvent",
      "formattedName": "HandleGetContinuityWatchHistoryRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "continuity.WatchHistory",
          "typescriptType": "Continuity_WatchHistory",
          "usedTypescriptType": "Continuity_WatchHistory",
          "usedStructName": "continuity.WatchHistory",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetContinuityWatchHistoryRequestedEvent is triggered when GetContinuityWatchHistory is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetContinuityWatchHistoryEvent",
      "formattedName": "HandleGetContinuityWatchHistoryEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "continuity.WatchHistory",
          "typescriptType": "Continuity_WatchHistory",
          "usedTypescriptType": "Continuity_WatchHistory",
          "usedStructName": "continuity.WatchHistory",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetContinuityWatchHistoryEvent is triggered after processing GetContinuityWatchHistory."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetDebridSettingsRequestedEvent",
      "formattedName": "HandleGetDebridSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.DebridSettings",
          "typescriptType": "Models_DebridSettings",
          "usedTypescriptType": "Models_DebridSettings",
          "usedStructName": "models.DebridSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetDebridSettingsRequestedEvent is triggered when GetDebridSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetDebridSettingsEvent",
      "formattedName": "HandleGetDebridSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.DebridSettings",
          "typescriptType": "Models_DebridSettings",
          "usedTypescriptType": "Models_DebridSettings",
          "usedStructName": "models.DebridSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetDebridSettingsEvent is triggered after processing GetDebridSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveDebridSettingsRequestedEvent",
      "formattedName": "HandleSaveDebridSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Settings",
          "jsonName": "settings",
          "goType": "models.DebridSettings",
          "typescriptType": "Models_DebridSettings",
          "usedTypescriptType": "Models_DebridSettings",
          "usedStructName": "models.DebridSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.DebridSettings",
          "typescriptType": "Models_DebridSettings",
          "usedTypescriptType": "Models_DebridSettings",
          "usedStructName": "models.DebridSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveDebridSettingsRequestedEvent is triggered when SaveDebridSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveDebridSettingsEvent",
      "formattedName": "HandleSaveDebridSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.DebridSettings",
          "typescriptType": "Models_DebridSettings",
          "usedTypescriptType": "Models_DebridSettings",
          "usedStructName": "models.DebridSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveDebridSettingsEvent is triggered after processing SaveDebridSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridAddTorrentsRequestedEvent",
      "formattedName": "HandleDebridAddTorrentsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Torrents",
          "jsonName": "torrents",
          "goType": "[]hibiketorrent.AnimeTorrent",
          "typescriptType": "Array\u003cAnimeTorrent\u003e",
          "usedTypescriptType": "AnimeTorrent",
          "usedStructName": "[]hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Destination",
          "jsonName": "destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridAddTorrentsRequestedEvent is triggered when DebridAddTorrents is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridDownloadTorrentRequestedEvent",
      "formattedName": "HandleDebridDownloadTorrentRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "TorrentItem",
          "jsonName": "torrentItem",
          "goType": "debrid.TorrentItem",
          "typescriptType": "Debrid_TorrentItem",
          "usedTypescriptType": "Debrid_TorrentItem",
          "usedStructName": "debrid.TorrentItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Destination",
          "jsonName": "destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridDownloadTorrentRequestedEvent is triggered when DebridDownloadTorrent is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridCancelDownloadRequestedEvent",
      "formattedName": "HandleDebridCancelDownloadRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ItemID",
          "jsonName": "itemID",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridCancelDownloadRequestedEvent is triggered when DebridCancelDownload is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridDeleteTorrentRequestedEvent",
      "formattedName": "HandleDebridDeleteTorrentRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "TorrentItem",
          "jsonName": "torrentItem",
          "goType": "debrid.TorrentItem",
          "typescriptType": "Debrid_TorrentItem",
          "usedTypescriptType": "Debrid_TorrentItem",
          "usedStructName": "debrid.TorrentItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridDeleteTorrentRequestedEvent is triggered when DebridDeleteTorrent is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridGetTorrentsRequestedEvent",
      "formattedName": "HandleDebridGetTorrentsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "debrid.TorrentItem",
          "typescriptType": "Debrid_TorrentItem",
          "usedTypescriptType": "Debrid_TorrentItem",
          "usedStructName": "debrid.TorrentItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridGetTorrentsRequestedEvent is triggered when DebridGetTorrents is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridGetTorrentsEvent",
      "formattedName": "HandleDebridGetTorrentsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "debrid.TorrentItem",
          "typescriptType": "Debrid_TorrentItem",
          "usedTypescriptType": "Debrid_TorrentItem",
          "usedStructName": "debrid.TorrentItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridGetTorrentsEvent is triggered after processing DebridGetTorrents."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridGetTorrentInfoRequestedEvent",
      "formattedName": "HandleDebridGetTorrentInfoRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "hibiketorrent.AnimeTorrent",
          "typescriptType": "HibikeTorrent_AnimeTorrent",
          "usedTypescriptType": "HibikeTorrent_AnimeTorrent",
          "usedStructName": "hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "debrid.TorrentInfo",
          "typescriptType": "Debrid_TorrentInfo",
          "usedTypescriptType": "Debrid_TorrentInfo",
          "usedStructName": "debrid.TorrentInfo",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridGetTorrentInfoRequestedEvent is triggered when DebridGetTorrentInfo is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridGetTorrentInfoEvent",
      "formattedName": "HandleDebridGetTorrentInfoEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "debrid.TorrentInfo",
          "typescriptType": "Debrid_TorrentInfo",
          "usedTypescriptType": "Debrid_TorrentInfo",
          "usedStructName": "debrid.TorrentInfo",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridGetTorrentInfoEvent is triggered after processing DebridGetTorrentInfo."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridGetTorrentFilePreviewsRequestedEvent",
      "formattedName": "HandleDebridGetTorrentFilePreviewsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "hibiketorrent.AnimeTorrent",
          "typescriptType": "HibikeTorrent_AnimeTorrent",
          "usedTypescriptType": "HibikeTorrent_AnimeTorrent",
          "usedStructName": "hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "debrid_client.FilePreview",
          "typescriptType": "DebridClient_FilePreview",
          "usedTypescriptType": "DebridClient_FilePreview",
          "usedStructName": "debrid_client.FilePreview",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridGetTorrentFilePreviewsRequestedEvent is triggered when DebridGetTorrentFilePreviews is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridGetTorrentFilePreviewsEvent",
      "formattedName": "HandleDebridGetTorrentFilePreviewsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "debrid_client.FilePreview",
          "typescriptType": "DebridClient_FilePreview",
          "usedTypescriptType": "DebridClient_FilePreview",
          "usedStructName": "debrid_client.FilePreview",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridGetTorrentFilePreviewsEvent is triggered after processing DebridGetTorrentFilePreviews."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridStartStreamRequestedEvent",
      "formattedName": "HandleDebridStartStreamRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AniDBEpisode",
          "jsonName": "aniDBEpisode",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AutoSelect",
          "jsonName": "autoSelect",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "hibiketorrent.AnimeTorrent",
          "typescriptType": "HibikeTorrent_AnimeTorrent",
          "usedTypescriptType": "HibikeTorrent_AnimeTorrent",
          "usedStructName": "hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "FileId",
          "jsonName": "fileId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "FileIndex",
          "jsonName": "fileIndex",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "PlaybackType",
          "jsonName": "playbackType",
          "goType": "debrid_client.StreamPlaybackType",
          "typescriptType": "DebridClient_StreamPlaybackType",
          "usedTypescriptType": "DebridClient_StreamPlaybackType",
          "usedStructName": "debrid_client.StreamPlaybackType",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ClientId",
          "jsonName": "clientId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridStartStreamRequestedEvent is triggered when DebridStartStream is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDebridCancelStreamRequestedEvent",
      "formattedName": "HandleDebridCancelStreamRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Options",
          "jsonName": "options",
          "goType": "debrid_client.CancelStreamOptions",
          "typescriptType": "DebridClient_CancelStreamOptions",
          "usedTypescriptType": "DebridClient_CancelStreamOptions",
          "usedStructName": "debrid_client.CancelStreamOptions",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDebridCancelStreamRequestedEvent is triggered when DebridCancelStream is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDirectorySelectorRequestedEvent",
      "formattedName": "HandleDirectorySelectorRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Input",
          "jsonName": "input",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "DirectorySelectorResponse",
          "typescriptType": "DirectorySelectorResponse",
          "usedTypescriptType": "DirectorySelectorResponse",
          "usedStructName": "handlers.DirectorySelectorResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDirectorySelectorRequestedEvent is triggered when DirectorySelector is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDirectorySelectorEvent",
      "formattedName": "HandleDirectorySelectorEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "DirectorySelectorResponse",
          "typescriptType": "DirectorySelectorResponse",
          "usedTypescriptType": "DirectorySelectorResponse",
          "usedStructName": "handlers.DirectorySelectorResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDirectorySelectorEvent is triggered after processing DirectorySelector."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSetDiscordMangaActivityRequestedEvent",
      "formattedName": "HandleSetDiscordMangaActivityRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Title",
          "jsonName": "title",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Image",
          "jsonName": "image",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Chapter",
          "jsonName": "chapter",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSetDiscordMangaActivityRequestedEvent is triggered when SetDiscordMangaActivity is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSetDiscordLegacyAnimeActivityRequestedEvent",
      "formattedName": "HandleSetDiscordLegacyAnimeActivityRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Title",
          "jsonName": "title",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Image",
          "jsonName": "image",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "IsMovie",
          "jsonName": "isMovie",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSetDiscordLegacyAnimeActivityRequestedEvent is triggered when SetDiscordLegacyAnimeActivity is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSetDiscordAnimeActivityWithProgressRequestedEvent",
      "formattedName": "HandleSetDiscordAnimeActivityWithProgressRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Title",
          "jsonName": "title",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Image",
          "jsonName": "image",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "IsMovie",
          "jsonName": "isMovie",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Progress",
          "jsonName": "progress",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Duration",
          "jsonName": "duration",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "TotalEpisodes",
          "jsonName": "totalEpisodes",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "CurrentEpisodeCount",
          "jsonName": "currentEpisodeCount",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeTitle",
          "jsonName": "episodeTitle",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSetDiscordAnimeActivityWithProgressRequestedEvent is triggered when SetDiscordAnimeActivityWithProgress is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateDiscordAnimeActivityWithProgressRequestedEvent",
      "formattedName": "HandleUpdateDiscordAnimeActivityWithProgressRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Progress",
          "jsonName": "progress",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Duration",
          "jsonName": "duration",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Paused",
          "jsonName": "paused",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateDiscordAnimeActivityWithProgressRequestedEvent is triggered when UpdateDiscordAnimeActivityWithProgress is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleCancelDiscordActivityRequestedEvent",
      "formattedName": "HandleCancelDiscordActivityRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleCancelDiscordActivityRequestedEvent is triggered when CancelDiscordActivity is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetDocsRequestedEvent",
      "formattedName": "HandleGetDocsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "ApiDocsGroup",
          "typescriptType": "ApiDocsGroup",
          "usedTypescriptType": "ApiDocsGroup",
          "usedStructName": "handlers.ApiDocsGroup",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetDocsRequestedEvent is triggered when GetDocs is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetDocsEvent",
      "formattedName": "HandleGetDocsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "ApiDocsGroup",
          "typescriptType": "ApiDocsGroup",
          "usedTypescriptType": "ApiDocsGroup",
          "usedStructName": "handlers.ApiDocsGroup",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetDocsEvent is triggered after processing GetDocs."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDownloadTorrentFileRequestedEvent",
      "formattedName": "HandleDownloadTorrentFileRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "DownloadUrls",
          "jsonName": "download_urls",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Destination",
          "jsonName": "destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDownloadTorrentFileRequestedEvent is triggered when DownloadTorrentFile is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDownloadReleaseRequestedEvent",
      "formattedName": "HandleDownloadReleaseRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "DownloadUrl",
          "jsonName": "download_url",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Destination",
          "jsonName": "destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "DownloadReleaseResponse",
          "typescriptType": "DownloadReleaseResponse",
          "usedTypescriptType": "DownloadReleaseResponse",
          "usedStructName": "handlers.DownloadReleaseResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDownloadReleaseRequestedEvent is triggered when DownloadRelease is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDownloadReleaseEvent",
      "formattedName": "HandleDownloadReleaseEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "DownloadReleaseResponse",
          "typescriptType": "DownloadReleaseResponse",
          "usedTypescriptType": "DownloadReleaseResponse",
          "usedStructName": "handlers.DownloadReleaseResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDownloadReleaseEvent is triggered after processing DownloadRelease."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleOpenInExplorerRequestedEvent",
      "formattedName": "HandleOpenInExplorerRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Path",
          "jsonName": "path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleOpenInExplorerRequestedEvent is triggered when OpenInExplorer is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleFetchExternalExtensionDataRequestedEvent",
      "formattedName": "HandleFetchExternalExtensionDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ManifestURI",
          "jsonName": "manifestUri",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleFetchExternalExtensionDataRequestedEvent is triggered when FetchExternalExtensionData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleFetchExternalExtensionDataEvent",
      "formattedName": "HandleFetchExternalExtensionDataEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleFetchExternalExtensionDataEvent is triggered after processing FetchExternalExtensionData."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleInstallExternalExtensionRequestedEvent",
      "formattedName": "HandleInstallExternalExtensionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ManifestURI",
          "jsonName": "manifestUri",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.ExtensionInstallResponse",
          "typescriptType": "ExtensionRepo_ExtensionInstallResponse",
          "usedTypescriptType": "ExtensionRepo_ExtensionInstallResponse",
          "usedStructName": "extension_repo.ExtensionInstallResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleInstallExternalExtensionRequestedEvent is triggered when InstallExternalExtension is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleInstallExternalExtensionEvent",
      "formattedName": "HandleInstallExternalExtensionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.ExtensionInstallResponse",
          "typescriptType": "ExtensionRepo_ExtensionInstallResponse",
          "usedTypescriptType": "ExtensionRepo_ExtensionInstallResponse",
          "usedStructName": "extension_repo.ExtensionInstallResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleInstallExternalExtensionEvent is triggered after processing InstallExternalExtension."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUninstallExternalExtensionRequestedEvent",
      "formattedName": "HandleUninstallExternalExtensionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ID",
          "jsonName": "id",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUninstallExternalExtensionRequestedEvent is triggered when UninstallExternalExtension is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateExtensionCodeRequestedEvent",
      "formattedName": "HandleUpdateExtensionCodeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ID",
          "jsonName": "id",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Payload",
          "jsonName": "payload",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateExtensionCodeRequestedEvent is triggered when UpdateExtensionCode is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleReloadExternalExtensionsRequestedEvent",
      "formattedName": "HandleReloadExternalExtensionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleReloadExternalExtensionsRequestedEvent is triggered when ReloadExternalExtensions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleReloadExternalExtensionRequestedEvent",
      "formattedName": "HandleReloadExternalExtensionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ID",
          "jsonName": "id",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleReloadExternalExtensionRequestedEvent is triggered when ReloadExternalExtension is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListExtensionDataRequestedEvent",
      "formattedName": "HandleListExtensionDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListExtensionDataRequestedEvent is triggered when ListExtensionData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListExtensionDataEvent",
      "formattedName": "HandleListExtensionDataEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListExtensionDataEvent is triggered after processing ListExtensionData."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetExtensionPayloadRequestedEvent",
      "formattedName": "HandleGetExtensionPayloadRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetExtensionPayloadRequestedEvent is triggered when GetExtensionPayload is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetExtensionPayloadEvent",
      "formattedName": "HandleGetExtensionPayloadEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetExtensionPayloadEvent is triggered after processing GetExtensionPayload."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListDevelopmentModeExtensionsRequestedEvent",
      "formattedName": "HandleListDevelopmentModeExtensionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListDevelopmentModeExtensionsRequestedEvent is triggered when ListDevelopmentModeExtensions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListDevelopmentModeExtensionsEvent",
      "formattedName": "HandleListDevelopmentModeExtensionsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListDevelopmentModeExtensionsEvent is triggered after processing ListDevelopmentModeExtensions."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAllExtensionsRequestedEvent",
      "formattedName": "HandleGetAllExtensionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "WithUpdates",
          "jsonName": "withUpdates",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.AllExtensions",
          "typescriptType": "ExtensionRepo_AllExtensions",
          "usedTypescriptType": "ExtensionRepo_AllExtensions",
          "usedStructName": "extension_repo.AllExtensions",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAllExtensionsRequestedEvent is triggered when GetAllExtensions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAllExtensionsEvent",
      "formattedName": "HandleGetAllExtensionsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.AllExtensions",
          "typescriptType": "ExtensionRepo_AllExtensions",
          "usedTypescriptType": "ExtensionRepo_AllExtensions",
          "usedStructName": "extension_repo.AllExtensions",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAllExtensionsEvent is triggered after processing GetAllExtensions."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetExtensionUpdateDataRequestedEvent",
      "formattedName": "HandleGetExtensionUpdateDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.UpdateData",
          "typescriptType": "ExtensionRepo_UpdateData",
          "usedTypescriptType": "ExtensionRepo_UpdateData",
          "usedStructName": "extension_repo.UpdateData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetExtensionUpdateDataRequestedEvent is triggered when GetExtensionUpdateData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetExtensionUpdateDataEvent",
      "formattedName": "HandleGetExtensionUpdateDataEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.UpdateData",
          "typescriptType": "ExtensionRepo_UpdateData",
          "usedTypescriptType": "ExtensionRepo_UpdateData",
          "usedStructName": "extension_repo.UpdateData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetExtensionUpdateDataEvent is triggered after processing GetExtensionUpdateData."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListMangaProviderExtensionsRequestedEvent",
      "formattedName": "HandleListMangaProviderExtensionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.MangaProviderExtensionItem",
          "typescriptType": "ExtensionRepo_MangaProviderExtensionItem",
          "usedTypescriptType": "ExtensionRepo_MangaProviderExtensionItem",
          "usedStructName": "extension_repo.MangaProviderExtensionItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListMangaProviderExtensionsRequestedEvent is triggered when ListMangaProviderExtensions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListMangaProviderExtensionsEvent",
      "formattedName": "HandleListMangaProviderExtensionsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.MangaProviderExtensionItem",
          "typescriptType": "ExtensionRepo_MangaProviderExtensionItem",
          "usedTypescriptType": "ExtensionRepo_MangaProviderExtensionItem",
          "usedStructName": "extension_repo.MangaProviderExtensionItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListMangaProviderExtensionsEvent is triggered after processing ListMangaProviderExtensions."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListOnlinestreamProviderExtensionsRequestedEvent",
      "formattedName": "HandleListOnlinestreamProviderExtensionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.OnlinestreamProviderExtensionItem",
          "typescriptType": "ExtensionRepo_OnlinestreamProviderExtensionItem",
          "usedTypescriptType": "ExtensionRepo_OnlinestreamProviderExtensionItem",
          "usedStructName": "extension_repo.OnlinestreamProviderExtensionItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListOnlinestreamProviderExtensionsRequestedEvent is triggered when ListOnlinestreamProviderExtensions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListOnlinestreamProviderExtensionsEvent",
      "formattedName": "HandleListOnlinestreamProviderExtensionsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.OnlinestreamProviderExtensionItem",
          "typescriptType": "ExtensionRepo_OnlinestreamProviderExtensionItem",
          "usedTypescriptType": "ExtensionRepo_OnlinestreamProviderExtensionItem",
          "usedStructName": "extension_repo.OnlinestreamProviderExtensionItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListOnlinestreamProviderExtensionsEvent is triggered after processing ListOnlinestreamProviderExtensions."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListAnimeTorrentProviderExtensionsRequestedEvent",
      "formattedName": "HandleListAnimeTorrentProviderExtensionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.AnimeTorrentProviderExtensionItem",
          "typescriptType": "ExtensionRepo_AnimeTorrentProviderExtensionItem",
          "usedTypescriptType": "ExtensionRepo_AnimeTorrentProviderExtensionItem",
          "usedStructName": "extension_repo.AnimeTorrentProviderExtensionItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListAnimeTorrentProviderExtensionsRequestedEvent is triggered when ListAnimeTorrentProviderExtensions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleListAnimeTorrentProviderExtensionsEvent",
      "formattedName": "HandleListAnimeTorrentProviderExtensionsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.AnimeTorrentProviderExtensionItem",
          "typescriptType": "ExtensionRepo_AnimeTorrentProviderExtensionItem",
          "usedTypescriptType": "ExtensionRepo_AnimeTorrentProviderExtensionItem",
          "usedStructName": "extension_repo.AnimeTorrentProviderExtensionItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleListAnimeTorrentProviderExtensionsEvent is triggered after processing ListAnimeTorrentProviderExtensions."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetPluginSettingsRequestedEvent",
      "formattedName": "HandleGetPluginSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.StoredPluginSettingsData",
          "typescriptType": "ExtensionRepo_StoredPluginSettingsData",
          "usedTypescriptType": "ExtensionRepo_StoredPluginSettingsData",
          "usedStructName": "extension_repo.StoredPluginSettingsData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetPluginSettingsRequestedEvent is triggered when GetPluginSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetPluginSettingsEvent",
      "formattedName": "HandleGetPluginSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.StoredPluginSettingsData",
          "typescriptType": "ExtensionRepo_StoredPluginSettingsData",
          "usedTypescriptType": "ExtensionRepo_StoredPluginSettingsData",
          "usedStructName": "extension_repo.StoredPluginSettingsData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetPluginSettingsEvent is triggered after processing GetPluginSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSetPluginSettingsPinnedTraysRequestedEvent",
      "formattedName": "HandleSetPluginSettingsPinnedTraysRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "PinnedTrayPluginIds",
          "jsonName": "pinnedTrayPluginIds",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSetPluginSettingsPinnedTraysRequestedEvent is triggered when SetPluginSettingsPinnedTrays is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGrantPluginPermissionsRequestedEvent",
      "formattedName": "HandleGrantPluginPermissionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ID",
          "jsonName": "id",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGrantPluginPermissionsRequestedEvent is triggered when GrantPluginPermissions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRunExtensionPlaygroundCodeRequestedEvent",
      "formattedName": "HandleRunExtensionPlaygroundCodeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Params",
          "jsonName": "params",
          "goType": "extension_playground.RunPlaygroundCodeParams",
          "typescriptType": "RunPlaygroundCodeParams",
          "usedTypescriptType": "RunPlaygroundCodeParams",
          "usedStructName": "extension_playground.RunPlaygroundCodeParams",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_playground.RunPlaygroundCodeResponse",
          "typescriptType": "RunPlaygroundCodeResponse",
          "usedTypescriptType": "RunPlaygroundCodeResponse",
          "usedStructName": "extension_playground.RunPlaygroundCodeResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRunExtensionPlaygroundCodeRequestedEvent is triggered when RunExtensionPlaygroundCode is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRunExtensionPlaygroundCodeEvent",
      "formattedName": "HandleRunExtensionPlaygroundCodeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_playground.RunPlaygroundCodeResponse",
          "typescriptType": "RunPlaygroundCodeResponse",
          "usedTypescriptType": "RunPlaygroundCodeResponse",
          "usedStructName": "extension_playground.RunPlaygroundCodeResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRunExtensionPlaygroundCodeEvent is triggered after processing RunExtensionPlaygroundCode."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetExtensionUserConfigRequestedEvent",
      "formattedName": "HandleGetExtensionUserConfigRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.ExtensionUserConfig",
          "typescriptType": "ExtensionRepo_ExtensionUserConfig",
          "usedTypescriptType": "ExtensionRepo_ExtensionUserConfig",
          "usedStructName": "extension_repo.ExtensionUserConfig",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetExtensionUserConfigRequestedEvent is triggered when GetExtensionUserConfig is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetExtensionUserConfigEvent",
      "formattedName": "HandleGetExtensionUserConfigEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension_repo.ExtensionUserConfig",
          "typescriptType": "ExtensionRepo_ExtensionUserConfig",
          "usedTypescriptType": "ExtensionRepo_ExtensionUserConfig",
          "usedStructName": "extension_repo.ExtensionUserConfig",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetExtensionUserConfigEvent is triggered after processing GetExtensionUserConfig."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveExtensionUserConfigRequestedEvent",
      "formattedName": "HandleSaveExtensionUserConfigRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ID",
          "jsonName": "id",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Version",
          "jsonName": "version",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Values",
          "jsonName": "values",
          "goType": "map[string]string",
          "typescriptType": "Record\u003cstring, string\u003e",
          "usedStructName": "handlers.map[string]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveExtensionUserConfigRequestedEvent is triggered when SaveExtensionUserConfig is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMarketplaceExtensionsRequestedEvent",
      "formattedName": "HandleGetMarketplaceExtensionsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMarketplaceExtensionsRequestedEvent is triggered when GetMarketplaceExtensions is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMarketplaceExtensionsEvent",
      "formattedName": "HandleGetMarketplaceExtensionsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "extension.Extension",
          "typescriptType": "Extension_Extension",
          "usedTypescriptType": "Extension_Extension",
          "usedStructName": "extension.Extension",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMarketplaceExtensionsEvent is triggered after processing GetMarketplaceExtensions."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetFileCacheTotalSizeRequestedEvent",
      "formattedName": "HandleGetFileCacheTotalSizeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetFileCacheTotalSizeRequestedEvent is triggered when GetFileCacheTotalSize is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetFileCacheTotalSizeEvent",
      "formattedName": "HandleGetFileCacheTotalSizeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetFileCacheTotalSizeEvent is triggered after processing GetFileCacheTotalSize."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRemoveFileCacheBucketRequestedEvent",
      "formattedName": "HandleRemoveFileCacheBucketRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Bucket",
          "jsonName": "bucket",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRemoveFileCacheBucketRequestedEvent is triggered when RemoveFileCacheBucket is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetFileCacheMediastreamVideoFilesTotalSizeRequestedEvent",
      "formattedName": "HandleGetFileCacheMediastreamVideoFilesTotalSizeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetFileCacheMediastreamVideoFilesTotalSizeRequestedEvent is triggered when GetFileCacheMediastreamVideoFilesTotalSize is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetFileCacheMediastreamVideoFilesTotalSizeEvent",
      "formattedName": "HandleGetFileCacheMediastreamVideoFilesTotalSizeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetFileCacheMediastreamVideoFilesTotalSizeEvent is triggered after processing GetFileCacheMediastreamVideoFilesTotalSize."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleClearFileCacheMediastreamVideoFilesRequestedEvent",
      "formattedName": "HandleClearFileCacheMediastreamVideoFilesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleClearFileCacheMediastreamVideoFilesRequestedEvent is triggered when ClearFileCacheMediastreamVideoFiles is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLocalFilesRequestedEvent",
      "formattedName": "HandleGetLocalFilesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLocalFilesRequestedEvent is triggered when GetLocalFiles is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLocalFilesEvent",
      "formattedName": "HandleGetLocalFilesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLocalFilesEvent is triggered after processing GetLocalFiles."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleImportLocalFilesRequestedEvent",
      "formattedName": "HandleImportLocalFilesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "DataFilePath",
          "jsonName": "dataFilePath",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleImportLocalFilesRequestedEvent is triggered when ImportLocalFiles is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleLocalFileBulkActionRequestedEvent",
      "formattedName": "HandleLocalFileBulkActionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Action",
          "jsonName": "action",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleLocalFileBulkActionRequestedEvent is triggered when LocalFileBulkAction is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleLocalFileBulkActionEvent",
      "formattedName": "HandleLocalFileBulkActionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleLocalFileBulkActionEvent is triggered after processing LocalFileBulkAction."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateLocalFileDataRequestedEvent",
      "formattedName": "HandleUpdateLocalFileDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Path",
          "jsonName": "path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Metadata",
          "jsonName": "metadata",
          "goType": "anime.LocalFileMetadata",
          "typescriptType": "Anime_LocalFileMetadata",
          "usedTypescriptType": "Anime_LocalFileMetadata",
          "usedStructName": "anime.LocalFileMetadata",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Locked",
          "jsonName": "locked",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Ignored",
          "jsonName": "ignored",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateLocalFileDataRequestedEvent is triggered when UpdateLocalFileData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateLocalFileDataEvent",
      "formattedName": "HandleUpdateLocalFileDataEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateLocalFileDataEvent is triggered after processing UpdateLocalFileData."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateLocalFilesRequestedEvent",
      "formattedName": "HandleUpdateLocalFilesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Paths",
          "jsonName": "paths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Action",
          "jsonName": "action",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateLocalFilesRequestedEvent is triggered when UpdateLocalFiles is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDeleteLocalFilesRequestedEvent",
      "formattedName": "HandleDeleteLocalFilesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Paths",
          "jsonName": "paths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDeleteLocalFilesRequestedEvent is triggered when DeleteLocalFiles is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRemoveEmptyDirectoriesRequestedEvent",
      "formattedName": "HandleRemoveEmptyDirectoriesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRemoveEmptyDirectoriesRequestedEvent is triggered when RemoveEmptyDirectories is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleMALAuthRequestedEvent",
      "formattedName": "HandleMALAuthRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Code",
          "jsonName": "code",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "State",
          "jsonName": "state",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "CodeVerifier",
          "jsonName": "code_verifier",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "MalAuthResponse",
          "typescriptType": "MalAuthResponse",
          "usedTypescriptType": "MalAuthResponse",
          "usedStructName": "handlers.MalAuthResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleMALAuthRequestedEvent is triggered when MALAuth is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleMALAuthEvent",
      "formattedName": "HandleMALAuthEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "MalAuthResponse",
          "typescriptType": "MalAuthResponse",
          "usedTypescriptType": "MalAuthResponse",
          "usedStructName": "handlers.MalAuthResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleMALAuthEvent is triggered after processing MALAuth."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleEditMALListEntryProgressRequestedEvent",
      "formattedName": "HandleEditMALListEntryProgressRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Progress",
          "jsonName": "progress",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleEditMALListEntryProgressRequestedEvent is triggered when EditMALListEntryProgress is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleMALLogoutRequestedEvent",
      "formattedName": "HandleMALLogoutRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleMALLogoutRequestedEvent is triggered when MALLogout is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnilistMangaCollectionRequestedEvent",
      "formattedName": "HandleGetAnilistMangaCollectionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "BypassCache",
          "jsonName": "bypassCache",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnilistMangaCollectionRequestedEvent is triggered when GetAnilistMangaCollection is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetAnilistMangaCollectionEvent",
      "formattedName": "HandleGetAnilistMangaCollectionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetAnilistMangaCollectionEvent is triggered after processing GetAnilistMangaCollection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetRawAnilistMangaCollectionRequestedEvent",
      "formattedName": "HandleGetRawAnilistMangaCollectionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetRawAnilistMangaCollectionRequestedEvent is triggered when GetRawAnilistMangaCollection is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetRawAnilistMangaCollectionEvent",
      "formattedName": "HandleGetRawAnilistMangaCollectionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetRawAnilistMangaCollectionEvent is triggered after processing GetRawAnilistMangaCollection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaCollectionRequestedEvent",
      "formattedName": "HandleGetMangaCollectionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.Collection",
          "typescriptType": "Manga_Collection",
          "usedTypescriptType": "Manga_Collection",
          "usedStructName": "manga.Collection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaCollectionRequestedEvent is triggered when GetMangaCollection is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaCollectionEvent",
      "formattedName": "HandleGetMangaCollectionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.Collection",
          "typescriptType": "Manga_Collection",
          "usedTypescriptType": "Manga_Collection",
          "usedStructName": "manga.Collection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaCollectionEvent is triggered after processing GetMangaCollection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryRequestedEvent",
      "formattedName": "HandleGetMangaEntryRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.Entry",
          "typescriptType": "Manga_Entry",
          "usedTypescriptType": "Manga_Entry",
          "usedStructName": "manga.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryRequestedEvent is triggered when GetMangaEntry is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryEvent",
      "formattedName": "HandleGetMangaEntryEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.Entry",
          "typescriptType": "Manga_Entry",
          "usedTypescriptType": "Manga_Entry",
          "usedStructName": "manga.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryEvent is triggered after processing GetMangaEntry."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryDetailsRequestedEvent",
      "formattedName": "HandleGetMangaEntryDetailsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.MangaDetailsById_Media",
          "typescriptType": "AL_MangaDetailsById_Media",
          "usedTypescriptType": "AL_MangaDetailsById_Media",
          "usedStructName": "anilist.MangaDetailsById_Media",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryDetailsRequestedEvent is triggered when GetMangaEntryDetails is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryDetailsEvent",
      "formattedName": "HandleGetMangaEntryDetailsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.MangaDetailsById_Media",
          "typescriptType": "AL_MangaDetailsById_Media",
          "usedTypescriptType": "AL_MangaDetailsById_Media",
          "usedStructName": "anilist.MangaDetailsById_Media",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryDetailsEvent is triggered after processing GetMangaEntryDetails."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaLatestChapterNumbersMapRequestedEvent",
      "formattedName": "HandleGetMangaLatestChapterNumbersMapRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.MangaLatestChapterNumberItem",
          "typescriptType": "Manga_MangaLatestChapterNumberItem",
          "usedTypescriptType": "Manga_MangaLatestChapterNumberItem",
          "usedStructName": "manga.MangaLatestChapterNumberItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaLatestChapterNumbersMapRequestedEvent is triggered when GetMangaLatestChapterNumbersMap is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaLatestChapterNumbersMapEvent",
      "formattedName": "HandleGetMangaLatestChapterNumbersMapEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.MangaLatestChapterNumberItem",
          "typescriptType": "Manga_MangaLatestChapterNumberItem",
          "usedTypescriptType": "Manga_MangaLatestChapterNumberItem",
          "usedStructName": "manga.MangaLatestChapterNumberItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaLatestChapterNumbersMapEvent is triggered after processing GetMangaLatestChapterNumbersMap."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRefetchMangaChapterContainersRequestedEvent",
      "formattedName": "HandleRefetchMangaChapterContainersRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "SelectedProviderMap",
          "jsonName": "selectedProviderMap",
          "goType": "map[int]string",
          "typescriptType": "Record\u003cnumber, string\u003e",
          "usedStructName": "handlers.map[int]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRefetchMangaChapterContainersRequestedEvent is triggered when RefetchMangaChapterContainers is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleEmptyMangaEntryCacheRequestedEvent",
      "formattedName": "HandleEmptyMangaEntryCacheRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleEmptyMangaEntryCacheRequestedEvent is triggered when EmptyMangaEntryCache is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryChaptersRequestedEvent",
      "formattedName": "HandleGetMangaEntryChaptersRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.ChapterContainer",
          "typescriptType": "Manga_ChapterContainer",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryChaptersRequestedEvent is triggered when GetMangaEntryChapters is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryChaptersEvent",
      "formattedName": "HandleGetMangaEntryChaptersEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.ChapterContainer",
          "typescriptType": "Manga_ChapterContainer",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryChaptersEvent is triggered after processing GetMangaEntryChapters."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryPagesRequestedEvent",
      "formattedName": "HandleGetMangaEntryPagesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ChapterId",
          "jsonName": "chapterId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "DoublePage",
          "jsonName": "doublePage",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.PageContainer",
          "typescriptType": "Manga_PageContainer",
          "usedTypescriptType": "Manga_PageContainer",
          "usedStructName": "manga.PageContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryPagesRequestedEvent is triggered when GetMangaEntryPages is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryPagesEvent",
      "formattedName": "HandleGetMangaEntryPagesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.PageContainer",
          "typescriptType": "Manga_PageContainer",
          "usedTypescriptType": "Manga_PageContainer",
          "usedStructName": "manga.PageContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryPagesEvent is triggered after processing GetMangaEntryPages."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryDownloadedChaptersRequestedEvent",
      "formattedName": "HandleGetMangaEntryDownloadedChaptersRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.ChapterContainer",
          "typescriptType": "Manga_ChapterContainer",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryDownloadedChaptersRequestedEvent is triggered when GetMangaEntryDownloadedChapters is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaEntryDownloadedChaptersEvent",
      "formattedName": "HandleGetMangaEntryDownloadedChaptersEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.ChapterContainer",
          "typescriptType": "Manga_ChapterContainer",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaEntryDownloadedChaptersEvent is triggered after processing GetMangaEntryDownloadedChapters."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListMangaRequestedEvent",
      "formattedName": "HandleAnilistListMangaRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Page",
          "jsonName": "page",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Search",
          "jsonName": "search",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "PerPage",
          "jsonName": "perPage",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Sort",
          "jsonName": "sort",
          "goType": "[]anilist.MediaSort",
          "typescriptType": "Array\u003cMediaSort\u003e",
          "usedTypescriptType": "MediaSort",
          "usedStructName": "[]anilist.MediaSort",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Status",
          "jsonName": "status",
          "goType": "[]anilist.MediaStatus",
          "typescriptType": "Array\u003cMediaStatus\u003e",
          "usedTypescriptType": "MediaStatus",
          "usedStructName": "[]anilist.MediaStatus",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Genres",
          "jsonName": "genres",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AverageScoreGreater",
          "jsonName": "averageScore_greater",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Year",
          "jsonName": "year",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "CountryOfOrigin",
          "jsonName": "countryOfOrigin",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "IsAdult",
          "jsonName": "isAdult",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Format",
          "jsonName": "format",
          "goType": "anilist.MediaFormat",
          "typescriptType": "AL_MediaFormat",
          "usedTypescriptType": "AL_MediaFormat",
          "usedStructName": "anilist.MediaFormat",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.ListManga",
          "typescriptType": "AL_ListManga",
          "usedTypescriptType": "AL_ListManga",
          "usedStructName": "anilist.ListManga",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListMangaRequestedEvent is triggered when AnilistListManga is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleAnilistListMangaEvent",
      "formattedName": "HandleAnilistListMangaEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anilist.ListManga",
          "typescriptType": "AL_ListManga",
          "usedTypescriptType": "AL_ListManga",
          "usedStructName": "anilist.ListManga",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleAnilistListMangaEvent is triggered after processing AnilistListManga."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateMangaProgressRequestedEvent",
      "formattedName": "HandleUpdateMangaProgressRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MalId",
          "jsonName": "malId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ChapterNumber",
          "jsonName": "chapterNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "TotalChapters",
          "jsonName": "totalChapters",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateMangaProgressRequestedEvent is triggered when UpdateMangaProgress is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleMangaManualSearchRequestedEvent",
      "formattedName": "HandleMangaManualSearchRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Query",
          "jsonName": "query",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "hibikemanga.SearchResult",
          "typescriptType": "HibikeManga_SearchResult",
          "usedTypescriptType": "HibikeManga_SearchResult",
          "usedStructName": "hibikemanga.SearchResult",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleMangaManualSearchRequestedEvent is triggered when MangaManualSearch is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleMangaManualSearchEvent",
      "formattedName": "HandleMangaManualSearchEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "hibikemanga.SearchResult",
          "typescriptType": "HibikeManga_SearchResult",
          "usedTypescriptType": "HibikeManga_SearchResult",
          "usedStructName": "hibikemanga.SearchResult",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleMangaManualSearchEvent is triggered after processing MangaManualSearch."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleMangaManualMappingRequestedEvent",
      "formattedName": "HandleMangaManualMappingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MangaId",
          "jsonName": "mangaId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleMangaManualMappingRequestedEvent is triggered when MangaManualMapping is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaMappingRequestedEvent",
      "formattedName": "HandleGetMangaMappingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.MappingResponse",
          "typescriptType": "Manga_MappingResponse",
          "usedTypescriptType": "Manga_MappingResponse",
          "usedStructName": "manga.MappingResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaMappingRequestedEvent is triggered when GetMangaMapping is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaMappingEvent",
      "formattedName": "HandleGetMangaMappingEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.MappingResponse",
          "typescriptType": "Manga_MappingResponse",
          "usedTypescriptType": "Manga_MappingResponse",
          "usedStructName": "manga.MappingResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaMappingEvent is triggered after processing GetMangaMapping."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRemoveMangaMappingRequestedEvent",
      "formattedName": "HandleRemoveMangaMappingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRemoveMangaMappingRequestedEvent is triggered when RemoveMangaMapping is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDownloadMangaChaptersRequestedEvent",
      "formattedName": "HandleDownloadMangaChaptersRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ChapterIds",
          "jsonName": "chapterIds",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "StartNow",
          "jsonName": "startNow",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDownloadMangaChaptersRequestedEvent is triggered when DownloadMangaChapters is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaDownloadDataRequestedEvent",
      "formattedName": "HandleGetMangaDownloadDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Cached",
          "jsonName": "cached",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.MediaDownloadData",
          "typescriptType": "Manga_MediaDownloadData",
          "usedTypescriptType": "Manga_MediaDownloadData",
          "usedStructName": "manga.MediaDownloadData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaDownloadDataRequestedEvent is triggered when GetMangaDownloadData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaDownloadDataEvent",
      "formattedName": "HandleGetMangaDownloadDataEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.MediaDownloadData",
          "typescriptType": "Manga_MediaDownloadData",
          "usedTypescriptType": "Manga_MediaDownloadData",
          "usedStructName": "manga.MediaDownloadData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaDownloadDataEvent is triggered after processing GetMangaDownloadData."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaDownloadQueueRequestedEvent",
      "formattedName": "HandleGetMangaDownloadQueueRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.ChapterDownloadQueueItem",
          "typescriptType": "Models_ChapterDownloadQueueItem",
          "usedTypescriptType": "Models_ChapterDownloadQueueItem",
          "usedStructName": "models.ChapterDownloadQueueItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaDownloadQueueRequestedEvent is triggered when GetMangaDownloadQueue is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaDownloadQueueEvent",
      "formattedName": "HandleGetMangaDownloadQueueEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.ChapterDownloadQueueItem",
          "typescriptType": "Models_ChapterDownloadQueueItem",
          "usedTypescriptType": "Models_ChapterDownloadQueueItem",
          "usedStructName": "models.ChapterDownloadQueueItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaDownloadQueueEvent is triggered after processing GetMangaDownloadQueue."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleStartMangaDownloadQueueRequestedEvent",
      "formattedName": "HandleStartMangaDownloadQueueRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleStartMangaDownloadQueueRequestedEvent is triggered when StartMangaDownloadQueue is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleStopMangaDownloadQueueRequestedEvent",
      "formattedName": "HandleStopMangaDownloadQueueRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleStopMangaDownloadQueueRequestedEvent is triggered when StopMangaDownloadQueue is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleClearAllChapterDownloadQueueRequestedEvent",
      "formattedName": "HandleClearAllChapterDownloadQueueRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleClearAllChapterDownloadQueueRequestedEvent is triggered when ClearAllChapterDownloadQueue is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleResetErroredChapterDownloadQueueRequestedEvent",
      "formattedName": "HandleResetErroredChapterDownloadQueueRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleResetErroredChapterDownloadQueueRequestedEvent is triggered when ResetErroredChapterDownloadQueue is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDeleteMangaDownloadedChaptersRequestedEvent",
      "formattedName": "HandleDeleteMangaDownloadedChaptersRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "DownloadIds",
          "jsonName": "downloadIds",
          "goType": "[]chapter_downloader.DownloadID",
          "typescriptType": "Array\u003cDownloadID\u003e",
          "usedTypescriptType": "DownloadID",
          "usedStructName": "[]chapter_downloader.DownloadID",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDeleteMangaDownloadedChaptersRequestedEvent is triggered when DeleteMangaDownloadedChapters is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaDownloadsListRequestedEvent",
      "formattedName": "HandleGetMangaDownloadsListRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.DownloadListItem",
          "typescriptType": "Manga_DownloadListItem",
          "usedTypescriptType": "Manga_DownloadListItem",
          "usedStructName": "manga.DownloadListItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaDownloadsListRequestedEvent is triggered when GetMangaDownloadsList is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMangaDownloadsListEvent",
      "formattedName": "HandleGetMangaDownloadsListEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "manga.DownloadListItem",
          "typescriptType": "Manga_DownloadListItem",
          "usedTypescriptType": "Manga_DownloadListItem",
          "usedStructName": "manga.DownloadListItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMangaDownloadsListEvent is triggered after processing GetMangaDownloadsList."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTestDumpRequestedEvent",
      "formattedName": "HandleTestDumpRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTestDumpRequestedEvent is triggered when TestDump is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleStartDefaultMediaPlayerRequestedEvent",
      "formattedName": "HandleStartDefaultMediaPlayerRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleStartDefaultMediaPlayerRequestedEvent is triggered when StartDefaultMediaPlayer is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMediastreamSettingsRequestedEvent",
      "formattedName": "HandleGetMediastreamSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.MediastreamSettings",
          "typescriptType": "Models_MediastreamSettings",
          "usedTypescriptType": "Models_MediastreamSettings",
          "usedStructName": "models.MediastreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMediastreamSettingsRequestedEvent is triggered when GetMediastreamSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetMediastreamSettingsEvent",
      "formattedName": "HandleGetMediastreamSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.MediastreamSettings",
          "typescriptType": "Models_MediastreamSettings",
          "usedTypescriptType": "Models_MediastreamSettings",
          "usedStructName": "models.MediastreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetMediastreamSettingsEvent is triggered after processing GetMediastreamSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveMediastreamSettingsRequestedEvent",
      "formattedName": "HandleSaveMediastreamSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Settings",
          "jsonName": "settings",
          "goType": "models.MediastreamSettings",
          "typescriptType": "Models_MediastreamSettings",
          "usedTypescriptType": "Models_MediastreamSettings",
          "usedStructName": "models.MediastreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.MediastreamSettings",
          "typescriptType": "Models_MediastreamSettings",
          "usedTypescriptType": "Models_MediastreamSettings",
          "usedStructName": "models.MediastreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveMediastreamSettingsRequestedEvent is triggered when SaveMediastreamSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveMediastreamSettingsEvent",
      "formattedName": "HandleSaveMediastreamSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.MediastreamSettings",
          "typescriptType": "Models_MediastreamSettings",
          "usedTypescriptType": "Models_MediastreamSettings",
          "usedStructName": "models.MediastreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveMediastreamSettingsEvent is triggered after processing SaveMediastreamSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRequestMediastreamMediaContainerRequestedEvent",
      "formattedName": "HandleRequestMediastreamMediaContainerRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Path",
          "jsonName": "path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "StreamType",
          "jsonName": "streamType",
          "goType": "mediastream.StreamType",
          "typescriptType": "Mediastream_StreamType",
          "usedTypescriptType": "Mediastream_StreamType",
          "usedStructName": "mediastream.StreamType",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AudioStreamIndex",
          "jsonName": "audioStreamIndex",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ClientId",
          "jsonName": "clientId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "mediastream.MediaContainer",
          "typescriptType": "Mediastream_MediaContainer",
          "usedTypescriptType": "Mediastream_MediaContainer",
          "usedStructName": "mediastream.MediaContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRequestMediastreamMediaContainerRequestedEvent is triggered when RequestMediastreamMediaContainer is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRequestMediastreamMediaContainerEvent",
      "formattedName": "HandleRequestMediastreamMediaContainerEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "mediastream.MediaContainer",
          "typescriptType": "Mediastream_MediaContainer",
          "usedTypescriptType": "Mediastream_MediaContainer",
          "usedStructName": "mediastream.MediaContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRequestMediastreamMediaContainerEvent is triggered after processing RequestMediastreamMediaContainer."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePreloadMediastreamMediaContainerRequestedEvent",
      "formattedName": "HandlePreloadMediastreamMediaContainerRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Path",
          "jsonName": "path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "StreamType",
          "jsonName": "streamType",
          "goType": "mediastream.StreamType",
          "typescriptType": "Mediastream_StreamType",
          "usedTypescriptType": "Mediastream_StreamType",
          "usedStructName": "mediastream.StreamType",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AudioStreamIndex",
          "jsonName": "audioStreamIndex",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePreloadMediastreamMediaContainerRequestedEvent is triggered when PreloadMediastreamMediaContainer is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleMediastreamShutdownTranscodeStreamRequestedEvent",
      "formattedName": "HandleMediastreamShutdownTranscodeStreamRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleMediastreamShutdownTranscodeStreamRequestedEvent is triggered when MediastreamShutdownTranscodeStream is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePopulateTVDBEpisodesRequestedEvent",
      "formattedName": "HandlePopulateTVDBEpisodesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "tvdb.Episode",
          "typescriptType": "TVDB_Episode",
          "usedTypescriptType": "TVDB_Episode",
          "usedStructName": "tvdb.Episode",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePopulateTVDBEpisodesRequestedEvent is triggered when PopulateTVDBEpisodes is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePopulateTVDBEpisodesEvent",
      "formattedName": "HandlePopulateTVDBEpisodesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "tvdb.Episode",
          "typescriptType": "TVDB_Episode",
          "usedTypescriptType": "TVDB_Episode",
          "usedStructName": "tvdb.Episode",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePopulateTVDBEpisodesEvent is triggered after processing PopulateTVDBEpisodes."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleEmptyTVDBEpisodesRequestedEvent",
      "formattedName": "HandleEmptyTVDBEpisodesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleEmptyTVDBEpisodesRequestedEvent is triggered when EmptyTVDBEpisodes is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePopulateFillerDataRequestedEvent",
      "formattedName": "HandlePopulateFillerDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePopulateFillerDataRequestedEvent is triggered when PopulateFillerData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRemoveFillerDataRequestedEvent",
      "formattedName": "HandleRemoveFillerDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRemoveFillerDataRequestedEvent is triggered when RemoveFillerData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetOnlineStreamEpisodeListRequestedEvent",
      "formattedName": "HandleGetOnlineStreamEpisodeListRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Dubbed",
          "jsonName": "dubbed",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "onlinestream.EpisodeListResponse",
          "typescriptType": "Onlinestream_EpisodeListResponse",
          "usedTypescriptType": "Onlinestream_EpisodeListResponse",
          "usedStructName": "onlinestream.EpisodeListResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetOnlineStreamEpisodeListRequestedEvent is triggered when GetOnlineStreamEpisodeList is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetOnlineStreamEpisodeListEvent",
      "formattedName": "HandleGetOnlineStreamEpisodeListEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "onlinestream.EpisodeListResponse",
          "typescriptType": "Onlinestream_EpisodeListResponse",
          "usedTypescriptType": "Onlinestream_EpisodeListResponse",
          "usedStructName": "onlinestream.EpisodeListResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetOnlineStreamEpisodeListEvent is triggered after processing GetOnlineStreamEpisodeList."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetOnlineStreamEpisodeSourceRequestedEvent",
      "formattedName": "HandleGetOnlineStreamEpisodeSourceRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Dubbed",
          "jsonName": "dubbed",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "onlinestream.EpisodeSource",
          "typescriptType": "Onlinestream_EpisodeSource",
          "usedTypescriptType": "Onlinestream_EpisodeSource",
          "usedStructName": "onlinestream.EpisodeSource",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetOnlineStreamEpisodeSourceRequestedEvent is triggered when GetOnlineStreamEpisodeSource is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetOnlineStreamEpisodeSourceEvent",
      "formattedName": "HandleGetOnlineStreamEpisodeSourceEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "onlinestream.EpisodeSource",
          "typescriptType": "Onlinestream_EpisodeSource",
          "usedTypescriptType": "Onlinestream_EpisodeSource",
          "usedStructName": "onlinestream.EpisodeSource",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetOnlineStreamEpisodeSourceEvent is triggered after processing GetOnlineStreamEpisodeSource."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleOnlineStreamEmptyCacheRequestedEvent",
      "formattedName": "HandleOnlineStreamEmptyCacheRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleOnlineStreamEmptyCacheRequestedEvent is triggered when OnlineStreamEmptyCache is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleOnlinestreamManualSearchRequestedEvent",
      "formattedName": "HandleOnlinestreamManualSearchRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Query",
          "jsonName": "query",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Dubbed",
          "jsonName": "dubbed",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "hibikeonlinestream.SearchResult",
          "typescriptType": "HibikeOnlinestream_SearchResult",
          "usedTypescriptType": "HibikeOnlinestream_SearchResult",
          "usedStructName": "hibikeonlinestream.SearchResult",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleOnlinestreamManualSearchRequestedEvent is triggered when OnlinestreamManualSearch is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleOnlinestreamManualSearchEvent",
      "formattedName": "HandleOnlinestreamManualSearchEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "hibikeonlinestream.SearchResult",
          "typescriptType": "HibikeOnlinestream_SearchResult",
          "usedTypescriptType": "HibikeOnlinestream_SearchResult",
          "usedStructName": "hibikeonlinestream.SearchResult",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleOnlinestreamManualSearchEvent is triggered after processing OnlinestreamManualSearch."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleOnlinestreamManualMappingRequestedEvent",
      "formattedName": "HandleOnlinestreamManualMappingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AnimeId",
          "jsonName": "animeId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleOnlinestreamManualMappingRequestedEvent is triggered when OnlinestreamManualMapping is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetOnlinestreamMappingRequestedEvent",
      "formattedName": "HandleGetOnlinestreamMappingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "onlinestream.MappingResponse",
          "typescriptType": "Onlinestream_MappingResponse",
          "usedTypescriptType": "Onlinestream_MappingResponse",
          "usedStructName": "onlinestream.MappingResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetOnlinestreamMappingRequestedEvent is triggered when GetOnlinestreamMapping is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetOnlinestreamMappingEvent",
      "formattedName": "HandleGetOnlinestreamMappingEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "onlinestream.MappingResponse",
          "typescriptType": "Onlinestream_MappingResponse",
          "usedTypescriptType": "Onlinestream_MappingResponse",
          "usedStructName": "onlinestream.MappingResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetOnlinestreamMappingEvent is triggered after processing GetOnlinestreamMapping."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleRemoveOnlinestreamMappingRequestedEvent",
      "formattedName": "HandleRemoveOnlinestreamMappingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleRemoveOnlinestreamMappingRequestedEvent is triggered when RemoveOnlinestreamMapping is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackPlayVideoRequestedEvent",
      "formattedName": "HandlePlaybackPlayVideoRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Path",
          "jsonName": "path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackPlayVideoRequestedEvent is triggered when PlaybackPlayVideo is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackPlayRandomVideoRequestedEvent",
      "formattedName": "HandlePlaybackPlayRandomVideoRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackPlayRandomVideoRequestedEvent is triggered when PlaybackPlayRandomVideo is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackSyncCurrentProgressRequestedEvent",
      "formattedName": "HandlePlaybackSyncCurrentProgressRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackSyncCurrentProgressRequestedEvent is triggered when PlaybackSyncCurrentProgress is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackSyncCurrentProgressEvent",
      "formattedName": "HandlePlaybackSyncCurrentProgressEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackSyncCurrentProgressEvent is triggered after processing PlaybackSyncCurrentProgress."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackPlayNextEpisodeRequestedEvent",
      "formattedName": "HandlePlaybackPlayNextEpisodeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackPlayNextEpisodeRequestedEvent is triggered when PlaybackPlayNextEpisode is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackGetNextEpisodeRequestedEvent",
      "formattedName": "HandlePlaybackGetNextEpisodeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackGetNextEpisodeRequestedEvent is triggered when PlaybackGetNextEpisode is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackGetNextEpisodeEvent",
      "formattedName": "HandlePlaybackGetNextEpisodeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackGetNextEpisodeEvent is triggered after processing PlaybackGetNextEpisode."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackAutoPlayNextEpisodeRequestedEvent",
      "formattedName": "HandlePlaybackAutoPlayNextEpisodeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackAutoPlayNextEpisodeRequestedEvent is triggered when PlaybackAutoPlayNextEpisode is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackStartPlaylistRequestedEvent",
      "formattedName": "HandlePlaybackStartPlaylistRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "DbId",
          "jsonName": "dbId",
          "goType": "uint",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackStartPlaylistRequestedEvent is triggered when PlaybackStartPlaylist is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackCancelCurrentPlaylistRequestedEvent",
      "formattedName": "HandlePlaybackCancelCurrentPlaylistRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackCancelCurrentPlaylistRequestedEvent is triggered when PlaybackCancelCurrentPlaylist is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackPlaylistNextRequestedEvent",
      "formattedName": "HandlePlaybackPlaylistNextRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackPlaylistNextRequestedEvent is triggered when PlaybackPlaylistNext is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackStartManualTrackingRequestedEvent",
      "formattedName": "HandlePlaybackStartManualTrackingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ClientId",
          "jsonName": "clientId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackStartManualTrackingRequestedEvent is triggered when PlaybackStartManualTracking is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandlePlaybackCancelManualTrackingRequestedEvent",
      "formattedName": "HandlePlaybackCancelManualTrackingRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandlePlaybackCancelManualTrackingRequestedEvent is triggered when PlaybackCancelManualTracking is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleCreatePlaylistRequestedEvent",
      "formattedName": "HandleCreatePlaylistRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Name",
          "jsonName": "name",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Paths",
          "jsonName": "paths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Playlist",
          "typescriptType": "Anime_Playlist",
          "usedTypescriptType": "Anime_Playlist",
          "usedStructName": "anime.Playlist",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleCreatePlaylistRequestedEvent is triggered when CreatePlaylist is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleCreatePlaylistEvent",
      "formattedName": "HandleCreatePlaylistEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Playlist",
          "typescriptType": "Anime_Playlist",
          "usedTypescriptType": "Anime_Playlist",
          "usedStructName": "anime.Playlist",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleCreatePlaylistEvent is triggered after processing CreatePlaylist."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetPlaylistsRequestedEvent",
      "formattedName": "HandleGetPlaylistsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Playlist",
          "typescriptType": "Anime_Playlist",
          "usedTypescriptType": "Anime_Playlist",
          "usedStructName": "anime.Playlist",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetPlaylistsRequestedEvent is triggered when GetPlaylists is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetPlaylistsEvent",
      "formattedName": "HandleGetPlaylistsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Playlist",
          "typescriptType": "Anime_Playlist",
          "usedTypescriptType": "Anime_Playlist",
          "usedStructName": "anime.Playlist",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetPlaylistsEvent is triggered after processing GetPlaylists."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdatePlaylistRequestedEvent",
      "formattedName": "HandleUpdatePlaylistRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "DbId",
          "jsonName": "dbId",
          "goType": "uint",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Name",
          "jsonName": "name",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Paths",
          "jsonName": "paths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Playlist",
          "typescriptType": "Anime_Playlist",
          "usedTypescriptType": "Anime_Playlist",
          "usedStructName": "anime.Playlist",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdatePlaylistRequestedEvent is triggered when UpdatePlaylist is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdatePlaylistEvent",
      "formattedName": "HandleUpdatePlaylistEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.Playlist",
          "typescriptType": "Anime_Playlist",
          "usedTypescriptType": "Anime_Playlist",
          "usedStructName": "anime.Playlist",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdatePlaylistEvent is triggered after processing UpdatePlaylist."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDeletePlaylistRequestedEvent",
      "formattedName": "HandleDeletePlaylistRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "DbId",
          "jsonName": "dbId",
          "goType": "uint",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDeletePlaylistRequestedEvent is triggered when DeletePlaylist is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetPlaylistEpisodesRequestedEvent",
      "formattedName": "HandleGetPlaylistEpisodesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Progress",
          "jsonName": "progress",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetPlaylistEpisodesRequestedEvent is triggered when GetPlaylistEpisodes is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetPlaylistEpisodesEvent",
      "formattedName": "HandleGetPlaylistEpisodesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetPlaylistEpisodesEvent is triggered after processing GetPlaylistEpisodes."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleInstallLatestUpdateRequestedEvent",
      "formattedName": "HandleInstallLatestUpdateRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "FallbackDestination",
          "jsonName": "fallback_destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleInstallLatestUpdateRequestedEvent is triggered when InstallLatestUpdate is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleInstallLatestUpdateEvent",
      "formattedName": "HandleInstallLatestUpdateEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleInstallLatestUpdateEvent is triggered after processing InstallLatestUpdate."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLatestUpdateRequestedEvent",
      "formattedName": "HandleGetLatestUpdateRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "updater.Update",
          "typescriptType": "Updater_Update",
          "usedTypescriptType": "Updater_Update",
          "usedStructName": "updater.Update",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLatestUpdateRequestedEvent is triggered when GetLatestUpdate is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLatestUpdateEvent",
      "formattedName": "HandleGetLatestUpdateEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "updater.Update",
          "typescriptType": "Updater_Update",
          "usedTypescriptType": "Updater_Update",
          "usedStructName": "updater.Update",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLatestUpdateEvent is triggered after processing GetLatestUpdate."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetChangelogRequestedEvent",
      "formattedName": "HandleGetChangelogRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetChangelogRequestedEvent is triggered when GetChangelog is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetChangelogEvent",
      "formattedName": "HandleGetChangelogEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetChangelogEvent is triggered after processing GetChangelog."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveIssueReportRequestedEvent",
      "formattedName": "HandleSaveIssueReportRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "ClickLogs",
          "jsonName": "clickLogs",
          "goType": "[]report.ClickLog",
          "typescriptType": "Array\u003cClickLog\u003e",
          "usedTypescriptType": "ClickLog",
          "usedStructName": "[]report.ClickLog",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "NetworkLogs",
          "jsonName": "networkLogs",
          "goType": "[]report.NetworkLog",
          "typescriptType": "Array\u003cNetworkLog\u003e",
          "usedTypescriptType": "NetworkLog",
          "usedStructName": "[]report.NetworkLog",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ReactQueryLogs",
          "jsonName": "reactQueryLogs",
          "goType": "[]report.ReactQueryLog",
          "typescriptType": "Array\u003cReactQueryLog\u003e",
          "usedTypescriptType": "ReactQueryLog",
          "usedStructName": "[]report.ReactQueryLog",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ConsoleLogs",
          "jsonName": "consoleLogs",
          "goType": "[]report.ConsoleLog",
          "typescriptType": "Array\u003cConsoleLog\u003e",
          "usedTypescriptType": "ConsoleLog",
          "usedStructName": "[]report.ConsoleLog",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "IsAnimeLibraryIssue",
          "jsonName": "isAnimeLibraryIssue",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveIssueReportRequestedEvent is triggered when SaveIssueReport is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDownloadIssueReportRequestedEvent",
      "formattedName": "HandleDownloadIssueReportRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "report.IssueReport",
          "typescriptType": "Report_IssueReport",
          "usedTypescriptType": "Report_IssueReport",
          "usedStructName": "report.IssueReport",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDownloadIssueReportRequestedEvent is triggered when DownloadIssueReport is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDownloadIssueReportEvent",
      "formattedName": "HandleDownloadIssueReportEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "report.IssueReport",
          "typescriptType": "Report_IssueReport",
          "usedTypescriptType": "Report_IssueReport",
          "usedStructName": "report.IssueReport",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDownloadIssueReportEvent is triggered after processing DownloadIssueReport."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleScanLocalFilesRequestedEvent",
      "formattedName": "HandleScanLocalFilesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Enhanced",
          "jsonName": "enhanced",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SkipLockedFiles",
          "jsonName": "skipLockedFiles",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SkipIgnoredFiles",
          "jsonName": "skipIgnoredFiles",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleScanLocalFilesRequestedEvent is triggered when ScanLocalFiles is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleScanLocalFilesEvent",
      "formattedName": "HandleScanLocalFilesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleScanLocalFilesEvent is triggered after processing ScanLocalFiles."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetScanSummariesRequestedEvent",
      "formattedName": "HandleGetScanSummariesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "summary.ScanSummaryItem",
          "typescriptType": "Summary_ScanSummaryItem",
          "usedTypescriptType": "Summary_ScanSummaryItem",
          "usedStructName": "summary.ScanSummaryItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetScanSummariesRequestedEvent is triggered when GetScanSummaries is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetScanSummariesEvent",
      "formattedName": "HandleGetScanSummariesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "summary.ScanSummaryItem",
          "typescriptType": "Summary_ScanSummaryItem",
          "usedTypescriptType": "Summary_ScanSummaryItem",
          "usedStructName": "summary.ScanSummaryItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetScanSummariesEvent is triggered after processing GetScanSummaries."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetSettingsRequestedEvent",
      "formattedName": "HandleGetSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.Settings",
          "typescriptType": "Models_Settings",
          "usedTypescriptType": "Models_Settings",
          "usedStructName": "models.Settings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetSettingsRequestedEvent is triggered when GetSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetSettingsEvent",
      "formattedName": "HandleGetSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.Settings",
          "typescriptType": "Models_Settings",
          "usedTypescriptType": "Models_Settings",
          "usedStructName": "models.Settings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetSettingsEvent is triggered after processing GetSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGettingStartedRequestedEvent",
      "formattedName": "HandleGettingStartedRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Library",
          "jsonName": "library",
          "goType": "models.LibrarySettings",
          "typescriptType": "Models_LibrarySettings",
          "usedTypescriptType": "Models_LibrarySettings",
          "usedStructName": "models.LibrarySettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaPlayer",
          "jsonName": "mediaPlayer",
          "goType": "models.MediaPlayerSettings",
          "typescriptType": "Models_MediaPlayerSettings",
          "usedTypescriptType": "Models_MediaPlayerSettings",
          "usedStructName": "models.MediaPlayerSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "models.TorrentSettings",
          "typescriptType": "Models_TorrentSettings",
          "usedTypescriptType": "Models_TorrentSettings",
          "usedStructName": "models.TorrentSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Anilist",
          "jsonName": "anilist",
          "goType": "models.AnilistSettings",
          "typescriptType": "Models_AnilistSettings",
          "usedTypescriptType": "Models_AnilistSettings",
          "usedStructName": "models.AnilistSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Discord",
          "jsonName": "discord",
          "goType": "models.DiscordSettings",
          "typescriptType": "Models_DiscordSettings",
          "usedTypescriptType": "Models_DiscordSettings",
          "usedStructName": "models.DiscordSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Manga",
          "jsonName": "manga",
          "goType": "models.MangaSettings",
          "typescriptType": "Models_MangaSettings",
          "usedTypescriptType": "Models_MangaSettings",
          "usedStructName": "models.MangaSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Notifications",
          "jsonName": "notifications",
          "goType": "models.NotificationSettings",
          "typescriptType": "Models_NotificationSettings",
          "usedTypescriptType": "Models_NotificationSettings",
          "usedStructName": "models.NotificationSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EnableTranscode",
          "jsonName": "enableTranscode",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EnableTorrentStreaming",
          "jsonName": "enableTorrentStreaming",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "DebridProvider",
          "jsonName": "debridProvider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "DebridApiKey",
          "jsonName": "debridApiKey",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGettingStartedRequestedEvent is triggered when GettingStarted is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGettingStartedEvent",
      "formattedName": "HandleGettingStartedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGettingStartedEvent is triggered after processing GettingStarted."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveSettingsRequestedEvent",
      "formattedName": "HandleSaveSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Library",
          "jsonName": "library",
          "goType": "models.LibrarySettings",
          "typescriptType": "Models_LibrarySettings",
          "usedTypescriptType": "Models_LibrarySettings",
          "usedStructName": "models.LibrarySettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaPlayer",
          "jsonName": "mediaPlayer",
          "goType": "models.MediaPlayerSettings",
          "typescriptType": "Models_MediaPlayerSettings",
          "usedTypescriptType": "Models_MediaPlayerSettings",
          "usedStructName": "models.MediaPlayerSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "models.TorrentSettings",
          "typescriptType": "Models_TorrentSettings",
          "usedTypescriptType": "Models_TorrentSettings",
          "usedStructName": "models.TorrentSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Anilist",
          "jsonName": "anilist",
          "goType": "models.AnilistSettings",
          "typescriptType": "Models_AnilistSettings",
          "usedTypescriptType": "Models_AnilistSettings",
          "usedStructName": "models.AnilistSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Discord",
          "jsonName": "discord",
          "goType": "models.DiscordSettings",
          "typescriptType": "Models_DiscordSettings",
          "usedTypescriptType": "Models_DiscordSettings",
          "usedStructName": "models.DiscordSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Manga",
          "jsonName": "manga",
          "goType": "models.MangaSettings",
          "typescriptType": "Models_MangaSettings",
          "usedTypescriptType": "Models_MangaSettings",
          "usedStructName": "models.MangaSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Notifications",
          "jsonName": "notifications",
          "goType": "models.NotificationSettings",
          "typescriptType": "Models_NotificationSettings",
          "usedTypescriptType": "Models_NotificationSettings",
          "usedStructName": "models.NotificationSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveSettingsRequestedEvent is triggered when SaveSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveSettingsEvent",
      "formattedName": "HandleSaveSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveSettingsEvent is triggered after processing SaveSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveAutoDownloaderSettingsRequestedEvent",
      "formattedName": "HandleSaveAutoDownloaderSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Interval",
          "jsonName": "interval",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Enabled",
          "jsonName": "enabled",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "DownloadAutomatically",
          "jsonName": "downloadAutomatically",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EnableEnhancedQueries",
          "jsonName": "enableEnhancedQueries",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EnableSeasonCheck",
          "jsonName": "enableSeasonCheck",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "UseDebrid",
          "jsonName": "useDebrid",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveAutoDownloaderSettingsRequestedEvent is triggered when SaveAutoDownloaderSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetStatusRequestedEvent",
      "formattedName": "HandleGetStatusRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetStatusRequestedEvent is triggered when GetStatus is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetStatusEvent",
      "formattedName": "HandleGetStatusEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "Status",
          "typescriptType": "Status",
          "usedTypescriptType": "Status",
          "usedStructName": "handlers.Status",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetStatusEvent is triggered after processing GetStatus."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLogFilenamesRequestedEvent",
      "formattedName": "HandleGetLogFilenamesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLogFilenamesRequestedEvent is triggered when GetLogFilenames is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLogFilenamesEvent",
      "formattedName": "HandleGetLogFilenamesEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLogFilenamesEvent is triggered after processing GetLogFilenames."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleDeleteLogsRequestedEvent",
      "formattedName": "HandleDeleteLogsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Filenames",
          "jsonName": "filenames",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "usedStructName": "handlers.[]string",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleDeleteLogsRequestedEvent is triggered when DeleteLogs is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLatestLogContentRequestedEvent",
      "formattedName": "HandleGetLatestLogContentRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLatestLogContentRequestedEvent is triggered when GetLatestLogContent is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetLatestLogContentEvent",
      "formattedName": "HandleGetLatestLogContentEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetLatestLogContentEvent is triggered after processing GetLatestLogContent."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetTrackedMediaItemsRequestedEvent",
      "formattedName": "HandleSyncGetTrackedMediaItemsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "sync.TrackedMediaItem",
          "typescriptType": "Sync_TrackedMediaItem",
          "usedTypescriptType": "Sync_TrackedMediaItem",
          "usedStructName": "sync.TrackedMediaItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetTrackedMediaItemsRequestedEvent is triggered when SyncGetTrackedMediaItems is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetTrackedMediaItemsEvent",
      "formattedName": "HandleSyncGetTrackedMediaItemsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "sync.TrackedMediaItem",
          "typescriptType": "Sync_TrackedMediaItem",
          "usedTypescriptType": "Sync_TrackedMediaItem",
          "usedStructName": "sync.TrackedMediaItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetTrackedMediaItemsEvent is triggered after processing SyncGetTrackedMediaItems."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncAddMediaRequestedEvent",
      "formattedName": "HandleSyncAddMediaRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "[]__STRUCT__",
          "typescriptType": "Array\u003c{ mediaId: number; type: string; }\u003e",
          "usedTypescriptType": "{ mediaId: number; type: string; }",
          "usedStructName": "handlers.[]__STRUCT__",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncAddMediaRequestedEvent is triggered when SyncAddMedia is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncRemoveMediaRequestedEvent",
      "formattedName": "HandleSyncRemoveMediaRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Type",
          "jsonName": "type",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncRemoveMediaRequestedEvent is triggered when SyncRemoveMedia is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetIsMediaTrackedRequestedEvent",
      "formattedName": "HandleSyncGetIsMediaTrackedRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Type",
          "jsonName": "type",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetIsMediaTrackedRequestedEvent is triggered when SyncGetIsMediaTracked is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncLocalDataRequestedEvent",
      "formattedName": "HandleSyncLocalDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncLocalDataRequestedEvent is triggered when SyncLocalData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetQueueStateRequestedEvent",
      "formattedName": "HandleSyncGetQueueStateRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "sync.QueueState",
          "typescriptType": "Sync_QueueState",
          "usedTypescriptType": "Sync_QueueState",
          "usedStructName": "sync.QueueState",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetQueueStateRequestedEvent is triggered when SyncGetQueueState is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetQueueStateEvent",
      "formattedName": "HandleSyncGetQueueStateEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "sync.QueueState",
          "typescriptType": "Sync_QueueState",
          "usedTypescriptType": "Sync_QueueState",
          "usedStructName": "sync.QueueState",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetQueueStateEvent is triggered after processing SyncGetQueueState."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncAnilistDataRequestedEvent",
      "formattedName": "HandleSyncAnilistDataRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncAnilistDataRequestedEvent is triggered when SyncAnilistData is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncSetHasLocalChangesRequestedEvent",
      "formattedName": "HandleSyncSetHasLocalChangesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Updated",
          "jsonName": "updated",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncSetHasLocalChangesRequestedEvent is triggered when SyncSetHasLocalChanges is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetHasLocalChangesRequestedEvent",
      "formattedName": "HandleSyncGetHasLocalChangesRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetHasLocalChangesRequestedEvent is triggered when SyncGetHasLocalChanges is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetLocalStorageSizeRequestedEvent",
      "formattedName": "HandleSyncGetLocalStorageSizeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetLocalStorageSizeRequestedEvent is triggered when SyncGetLocalStorageSize is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSyncGetLocalStorageSizeEvent",
      "formattedName": "HandleSyncGetLocalStorageSizeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSyncGetLocalStorageSizeEvent is triggered after processing SyncGetLocalStorageSize."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetThemeRequestedEvent",
      "formattedName": "HandleGetThemeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.Theme",
          "typescriptType": "Models_Theme",
          "usedTypescriptType": "Models_Theme",
          "usedStructName": "models.Theme",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetThemeRequestedEvent is triggered when GetTheme is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetThemeEvent",
      "formattedName": "HandleGetThemeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.Theme",
          "typescriptType": "Models_Theme",
          "usedTypescriptType": "Models_Theme",
          "usedStructName": "models.Theme",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetThemeEvent is triggered after processing GetTheme."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateThemeRequestedEvent",
      "formattedName": "HandleUpdateThemeRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Theme",
          "jsonName": "theme",
          "goType": "models.Theme",
          "typescriptType": "Models_Theme",
          "usedTypescriptType": "Models_Theme",
          "usedStructName": "models.Theme",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.Theme",
          "typescriptType": "Models_Theme",
          "usedTypescriptType": "Models_Theme",
          "usedStructName": "models.Theme",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateThemeRequestedEvent is triggered when UpdateTheme is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleUpdateThemeEvent",
      "formattedName": "HandleUpdateThemeEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.Theme",
          "typescriptType": "Models_Theme",
          "usedTypescriptType": "Models_Theme",
          "usedStructName": "models.Theme",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleUpdateThemeEvent is triggered after processing UpdateTheme."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetActiveTorrentListRequestedEvent",
      "formattedName": "HandleGetActiveTorrentListRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrent_client.Torrent",
          "typescriptType": "TorrentClient_Torrent",
          "usedTypescriptType": "TorrentClient_Torrent",
          "usedStructName": "torrent_client.Torrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetActiveTorrentListRequestedEvent is triggered when GetActiveTorrentList is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetActiveTorrentListEvent",
      "formattedName": "HandleGetActiveTorrentListEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrent_client.Torrent",
          "typescriptType": "TorrentClient_Torrent",
          "usedTypescriptType": "TorrentClient_Torrent",
          "usedStructName": "torrent_client.Torrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetActiveTorrentListEvent is triggered after processing GetActiveTorrentList."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTorrentClientActionRequestedEvent",
      "formattedName": "HandleTorrentClientActionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Hash",
          "jsonName": "hash",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Action",
          "jsonName": "action",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Dir",
          "jsonName": "dir",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTorrentClientActionRequestedEvent is triggered when TorrentClientAction is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTorrentClientDownloadRequestedEvent",
      "formattedName": "HandleTorrentClientDownloadRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Torrents",
          "jsonName": "torrents",
          "goType": "[]hibiketorrent.AnimeTorrent",
          "typescriptType": "Array\u003cAnimeTorrent\u003e",
          "usedTypescriptType": "AnimeTorrent",
          "usedStructName": "[]hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Destination",
          "jsonName": "destination",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SmartSelect",
          "jsonName": "smartSelect",
          "goType": "__STRUCT__",
          "typescriptType": "{ enabled: boolean; missingEpisodeNumbers: Array\u003cnumber\u003e; }",
          "usedTypescriptType": "{ enabled: boolean; missingEpisodeNumbers: Array\u003cnumber\u003e; }",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTorrentClientDownloadRequestedEvent is triggered when TorrentClientDownload is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTorrentClientAddMagnetFromRuleRequestedEvent",
      "formattedName": "HandleTorrentClientAddMagnetFromRuleRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MagnetUrl",
          "jsonName": "magnetUrl",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "RuleId",
          "jsonName": "ruleId",
          "goType": "uint",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "QueuedItemId",
          "jsonName": "queuedItemId",
          "goType": "uint",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTorrentClientAddMagnetFromRuleRequestedEvent is triggered when TorrentClientAddMagnetFromRule is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSearchTorrentRequestedEvent",
      "formattedName": "HandleSearchTorrentRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Type",
          "jsonName": "type",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Query",
          "jsonName": "query",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Batch",
          "jsonName": "batch",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AbsoluteOffset",
          "jsonName": "absoluteOffset",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Resolution",
          "jsonName": "resolution",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "BestRelease",
          "jsonName": "bestRelease",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrent.SearchData",
          "typescriptType": "Torrent_SearchData",
          "usedTypescriptType": "Torrent_SearchData",
          "usedStructName": "torrent.SearchData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSearchTorrentRequestedEvent is triggered when SearchTorrent is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSearchTorrentEvent",
      "formattedName": "HandleSearchTorrentEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrent.SearchData",
          "typescriptType": "Torrent_SearchData",
          "usedTypescriptType": "Torrent_SearchData",
          "usedStructName": "torrent.SearchData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSearchTorrentEvent is triggered after processing SearchTorrent."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamEpisodeCollectionRequestedEvent",
      "formattedName": "HandleGetTorrentstreamEpisodeCollectionRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Id",
          "jsonName": "id",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrentstream.EpisodeCollection",
          "typescriptType": "Torrentstream_EpisodeCollection",
          "usedTypescriptType": "Torrentstream_EpisodeCollection",
          "usedStructName": "torrentstream.EpisodeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamEpisodeCollectionRequestedEvent is triggered when GetTorrentstreamEpisodeCollection is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamEpisodeCollectionEvent",
      "formattedName": "HandleGetTorrentstreamEpisodeCollectionEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrentstream.EpisodeCollection",
          "typescriptType": "Torrentstream_EpisodeCollection",
          "usedTypescriptType": "Torrentstream_EpisodeCollection",
          "usedStructName": "torrentstream.EpisodeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamEpisodeCollectionEvent is triggered after processing GetTorrentstreamEpisodeCollection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamSettingsRequestedEvent",
      "formattedName": "HandleGetTorrentstreamSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.TorrentstreamSettings",
          "typescriptType": "Models_TorrentstreamSettings",
          "usedTypescriptType": "Models_TorrentstreamSettings",
          "usedStructName": "models.TorrentstreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamSettingsRequestedEvent is triggered when GetTorrentstreamSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamSettingsEvent",
      "formattedName": "HandleGetTorrentstreamSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.TorrentstreamSettings",
          "typescriptType": "Models_TorrentstreamSettings",
          "usedTypescriptType": "Models_TorrentstreamSettings",
          "usedStructName": "models.TorrentstreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamSettingsEvent is triggered after processing GetTorrentstreamSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveTorrentstreamSettingsRequestedEvent",
      "formattedName": "HandleSaveTorrentstreamSettingsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Settings",
          "jsonName": "settings",
          "goType": "models.TorrentstreamSettings",
          "typescriptType": "Models_TorrentstreamSettings",
          "usedTypescriptType": "Models_TorrentstreamSettings",
          "usedStructName": "models.TorrentstreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.TorrentstreamSettings",
          "typescriptType": "Models_TorrentstreamSettings",
          "usedTypescriptType": "Models_TorrentstreamSettings",
          "usedStructName": "models.TorrentstreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveTorrentstreamSettingsRequestedEvent is triggered when SaveTorrentstreamSettings is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleSaveTorrentstreamSettingsEvent",
      "formattedName": "HandleSaveTorrentstreamSettingsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "models.TorrentstreamSettings",
          "typescriptType": "Models_TorrentstreamSettings",
          "usedTypescriptType": "Models_TorrentstreamSettings",
          "usedStructName": "models.TorrentstreamSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleSaveTorrentstreamSettingsEvent is triggered after processing SaveTorrentstreamSettings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamTorrentFilePreviewsRequestedEvent",
      "formattedName": "HandleGetTorrentstreamTorrentFilePreviewsRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "hibiketorrent.AnimeTorrent",
          "typescriptType": "HibikeTorrent_AnimeTorrent",
          "usedTypescriptType": "HibikeTorrent_AnimeTorrent",
          "usedStructName": "hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrentstream.FilePreview",
          "typescriptType": "Torrentstream_FilePreview",
          "usedTypescriptType": "Torrentstream_FilePreview",
          "usedStructName": "torrentstream.FilePreview",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamTorrentFilePreviewsRequestedEvent is triggered when GetTorrentstreamTorrentFilePreviews is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamTorrentFilePreviewsEvent",
      "formattedName": "HandleGetTorrentstreamTorrentFilePreviewsEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrentstream.FilePreview",
          "typescriptType": "Torrentstream_FilePreview",
          "usedTypescriptType": "Torrentstream_FilePreview",
          "usedStructName": "torrentstream.FilePreview",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamTorrentFilePreviewsEvent is triggered after processing GetTorrentstreamTorrentFilePreviews."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTorrentstreamStartStreamRequestedEvent",
      "formattedName": "HandleTorrentstreamStartStreamRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "EpisodeNumber",
          "jsonName": "episodeNumber",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AniDBEpisode",
          "jsonName": "aniDBEpisode",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AutoSelect",
          "jsonName": "autoSelect",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "hibiketorrent.AnimeTorrent",
          "typescriptType": "HibikeTorrent_AnimeTorrent",
          "usedTypescriptType": "HibikeTorrent_AnimeTorrent",
          "usedStructName": "hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "FileIndex",
          "jsonName": "fileIndex",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "PlaybackType",
          "jsonName": "playbackType",
          "goType": "torrentstream.PlaybackType",
          "typescriptType": "Torrentstream_PlaybackType",
          "usedTypescriptType": "Torrentstream_PlaybackType",
          "usedStructName": "torrentstream.PlaybackType",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ClientId",
          "jsonName": "clientId",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTorrentstreamStartStreamRequestedEvent is triggered when TorrentstreamStartStream is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTorrentstreamStopStreamRequestedEvent",
      "formattedName": "HandleTorrentstreamStopStreamRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTorrentstreamStopStreamRequestedEvent is triggered when TorrentstreamStopStream is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTorrentstreamDropTorrentRequestedEvent",
      "formattedName": "HandleTorrentstreamDropTorrentRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTorrentstreamDropTorrentRequestedEvent is triggered when TorrentstreamDropTorrent is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamBatchHistoryRequestedEvent",
      "formattedName": "HandleGetTorrentstreamBatchHistoryRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "MediaID",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrentstream.BatchHistoryResponse",
          "typescriptType": "Torrentstream_BatchHistoryResponse",
          "usedTypescriptType": "Torrentstream_BatchHistoryResponse",
          "usedStructName": "torrentstream.BatchHistoryResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamBatchHistoryRequestedEvent is triggered when GetTorrentstreamBatchHistory is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleGetTorrentstreamBatchHistoryEvent",
      "formattedName": "HandleGetTorrentstreamBatchHistoryEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "Data",
          "jsonName": "data",
          "goType": "torrentstream.BatchHistoryResponse",
          "typescriptType": "Torrentstream_BatchHistoryResponse",
          "usedTypescriptType": "Torrentstream_BatchHistoryResponse",
          "usedStructName": "torrentstream.BatchHistoryResponse",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleGetTorrentstreamBatchHistoryEvent is triggered after processing GetTorrentstreamBatchHistory."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "handlers",
    "goStruct": {
      "filepath": "../internal/handlers/hook_events.go",
      "filename": "hook_events.go",
      "name": "HandleTorrentstreamServeStreamRequestedEvent",
      "formattedName": "HandleTorrentstreamServeStreamRequestedEvent",
      "package": "handlers",
      "fields": [
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " HandleTorrentstreamServeStreamRequestedEvent is triggered when TorrentstreamServeStream is requested.",
        " Prevent default to skip the default behavior and provide your own implementation."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEntryRequestedEvent",
      "formattedName": "Anime_AnimeEntryRequestedEvent",
      "package": "anime",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Entry",
          "jsonName": "entry",
          "goType": "Entry",
          "typescriptType": "Anime_Entry",
          "usedTypescriptType": "Anime_Entry",
          "usedStructName": "anime.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEntryRequestedEvent is triggered when an anime entry is requested.",
        " Prevent default to skip the default behavior and return the modified entry.",
        " This event is triggered before [AnimeEntryEvent].",
        " If the modified entry is nil, an error will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEntryEvent",
      "formattedName": "Anime_AnimeEntryEvent",
      "package": "anime",
      "fields": [
        {
          "name": "Entry",
          "jsonName": "entry",
          "goType": "Entry",
          "typescriptType": "Anime_Entry",
          "usedTypescriptType": "Anime_Entry",
          "usedStructName": "anime.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEntryEvent is triggered when the media entry is being returned.",
        " This event is triggered after [AnimeEntryRequestedEvent]."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEntryFillerHydrationEvent",
      "formattedName": "Anime_AnimeEntryFillerHydrationEvent",
      "package": "anime",
      "fields": [
        {
          "name": "Entry",
          "jsonName": "entry",
          "goType": "Entry",
          "typescriptType": "Anime_Entry",
          "usedTypescriptType": "Anime_Entry",
          "usedStructName": "anime.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEntryFillerHydrationEvent is triggered when the filler data is being added to the media entry.",
        " This event is triggered after [AnimeEntryEvent].",
        " Prevent default to skip the filler data."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEntryLibraryDataRequestedEvent",
      "formattedName": "Anime_AnimeEntryLibraryDataRequestedEvent",
      "package": "anime",
      "fields": [
        {
          "name": "EntryLocalFiles",
          "jsonName": "entryLocalFiles",
          "goType": "[]LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "CurrentProgress",
          "jsonName": "currentProgress",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEntryLibraryDataRequestedEvent is triggered when the app requests the library data for a media entry.",
        " This is triggered before [AnimeEntryLibraryDataEvent]."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEntryLibraryDataEvent",
      "formattedName": "Anime_AnimeEntryLibraryDataEvent",
      "package": "anime",
      "fields": [
        {
          "name": "EntryLibraryData",
          "jsonName": "entryLibraryData",
          "goType": "EntryLibraryData",
          "typescriptType": "Anime_EntryLibraryData",
          "usedTypescriptType": "Anime_EntryLibraryData",
          "usedStructName": "anime.EntryLibraryData",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEntryLibraryDataEvent is triggered when the library data is being added to the media entry.",
        " This is triggered after [AnimeEntryLibraryDataRequestedEvent]."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeEntryManualMatchBeforeSaveEvent",
      "formattedName": "Anime_AnimeEntryManualMatchBeforeSaveEvent",
      "package": "anime",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Paths",
          "jsonName": "paths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MatchedLocalFiles",
          "jsonName": "matchedLocalFiles",
          "goType": "[]LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeEntryManualMatchBeforeSaveEvent is triggered when the user manually matches local files to a media entry.",
        " Prevent default to skip saving the local files."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "MissingEpisodesRequestedEvent",
      "formattedName": "Anime_MissingEpisodesRequestedEvent",
      "package": "anime",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "SilencedMediaIds",
          "jsonName": "silencedMediaIds",
          "goType": "[]int",
          "typescriptType": "Array\u003cnumber\u003e",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MissingEpisodes",
          "jsonName": "missingEpisodes",
          "goType": "MissingEpisodes",
          "typescriptType": "Anime_MissingEpisodes",
          "usedTypescriptType": "Anime_MissingEpisodes",
          "usedStructName": "anime.MissingEpisodes",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MissingEpisodesRequestedEvent is triggered when the user requests the missing episodes for the entire library.",
        " Prevent default to skip the default process and return the modified missing episodes."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "MissingEpisodesEvent",
      "formattedName": "Anime_MissingEpisodesEvent",
      "package": "anime",
      "fields": [
        {
          "name": "MissingEpisodes",
          "jsonName": "missingEpisodes",
          "goType": "MissingEpisodes",
          "typescriptType": "Anime_MissingEpisodes",
          "usedTypescriptType": "Anime_MissingEpisodes",
          "usedStructName": "anime.MissingEpisodes",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MissingEpisodesEvent is triggered when the missing episodes are being returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeLibraryCollectionRequestedEvent",
      "formattedName": "Anime_AnimeLibraryCollectionRequestedEvent",
      "package": "anime",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LibraryCollection",
          "jsonName": "libraryCollection",
          "goType": "LibraryCollection",
          "typescriptType": "Anime_LibraryCollection",
          "usedTypescriptType": "Anime_LibraryCollection",
          "usedStructName": "anime.LibraryCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeLibraryCollectionRequestedEvent is triggered when the user requests the library collection.",
        " Prevent default to skip the default process and return the modified library collection.",
        " If the modified library collection is nil, an error will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeLibraryCollectionEvent",
      "formattedName": "Anime_AnimeLibraryCollectionEvent",
      "package": "anime",
      "fields": [
        {
          "name": "LibraryCollection",
          "jsonName": "libraryCollection",
          "goType": "LibraryCollection",
          "typescriptType": "Anime_LibraryCollection",
          "usedTypescriptType": "Anime_LibraryCollection",
          "usedStructName": "anime.LibraryCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeLibraryCollectionRequestedEvent is triggered when the user requests the library collection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeLibraryStreamCollectionRequestedEvent",
      "formattedName": "Anime_AnimeLibraryStreamCollectionRequestedEvent",
      "package": "anime",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LibraryCollection",
          "jsonName": "libraryCollection",
          "goType": "LibraryCollection",
          "typescriptType": "Anime_LibraryCollection",
          "usedTypescriptType": "Anime_LibraryCollection",
          "usedStructName": "anime.LibraryCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeLibraryStreamCollectionRequestedEvent is triggered when the user requests the library stream collection.",
        " This is called when the user enables \"Include in library\" for either debrid/online/torrent streamings."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anime",
    "goStruct": {
      "filepath": "../internal/library/anime/hook_events.go",
      "filename": "hook_events.go",
      "name": "AnimeLibraryStreamCollectionEvent",
      "formattedName": "Anime_AnimeLibraryStreamCollectionEvent",
      "package": "anime",
      "fields": [
        {
          "name": "StreamCollection",
          "jsonName": "streamCollection",
          "goType": "StreamCollection",
          "typescriptType": "Anime_StreamCollection",
          "usedTypescriptType": "Anime_StreamCollection",
          "usedStructName": "anime.StreamCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AnimeLibraryStreamCollectionEvent is triggered when the library stream collection is being returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "autodownloader",
    "goStruct": {
      "filepath": "../internal/library/autodownloader/hook_events.go",
      "filename": "hook_events.go",
      "name": "AutoDownloaderRunStartedEvent",
      "formattedName": "AutoDownloader_AutoDownloaderRunStartedEvent",
      "package": "autodownloader",
      "fields": [
        {
          "name": "Rules",
          "jsonName": "rules",
          "goType": "[]anime.AutoDownloaderRule",
          "typescriptType": "Array\u003cAnime_AutoDownloaderRule\u003e",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AutoDownloaderRunStartedEvent is triggered when the autodownloader starts checking for new episodes.",
        " Prevent default to abort the run."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "autodownloader",
    "goStruct": {
      "filepath": "../internal/library/autodownloader/hook_events.go",
      "filename": "hook_events.go",
      "name": "AutoDownloaderTorrentsFetchedEvent",
      "formattedName": "AutoDownloader_AutoDownloaderTorrentsFetchedEvent",
      "package": "autodownloader",
      "fields": [
        {
          "name": "Torrents",
          "jsonName": "torrents",
          "goType": "[]NormalizedTorrent",
          "typescriptType": "Array\u003cAutoDownloader_NormalizedTorrent\u003e",
          "usedTypescriptType": "AutoDownloader_NormalizedTorrent",
          "usedStructName": "autodownloader.NormalizedTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AutoDownloaderTorrentsFetchedEvent is triggered at the beginning of a run, when the autodownloader fetches torrents from the provider."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "autodownloader",
    "goStruct": {
      "filepath": "../internal/library/autodownloader/hook_events.go",
      "filename": "hook_events.go",
      "name": "AutoDownloaderMatchVerifiedEvent",
      "formattedName": "AutoDownloader_AutoDownloaderMatchVerifiedEvent",
      "package": "autodownloader",
      "fields": [
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "NormalizedTorrent",
          "typescriptType": "AutoDownloader_NormalizedTorrent",
          "usedTypescriptType": "AutoDownloader_NormalizedTorrent",
          "usedStructName": "autodownloader.NormalizedTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Rule",
          "jsonName": "rule",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ListEntry",
          "jsonName": "listEntry",
          "goType": "anilist.AnimeListEntry",
          "typescriptType": "AL_AnimeListEntry",
          "usedTypescriptType": "AL_AnimeListEntry",
          "usedStructName": "anilist.AnimeListEntry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalEntry",
          "jsonName": "localEntry",
          "goType": "anime.LocalFileWrapperEntry",
          "typescriptType": "Anime_LocalFileWrapperEntry",
          "usedTypescriptType": "Anime_LocalFileWrapperEntry",
          "usedStructName": "anime.LocalFileWrapperEntry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Episode",
          "jsonName": "episode",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MatchFound",
          "jsonName": "matchFound",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AutoDownloaderMatchVerifiedEvent is triggered when a torrent is verified to follow a rule.",
        " Prevent default to abort the download if the match is found."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "autodownloader",
    "goStruct": {
      "filepath": "../internal/library/autodownloader/hook_events.go",
      "filename": "hook_events.go",
      "name": "AutoDownloaderSettingsUpdatedEvent",
      "formattedName": "AutoDownloader_AutoDownloaderSettingsUpdatedEvent",
      "package": "autodownloader",
      "fields": [
        {
          "name": "Settings",
          "jsonName": "settings",
          "goType": "models.AutoDownloaderSettings",
          "typescriptType": "Models_AutoDownloaderSettings",
          "usedTypescriptType": "Models_AutoDownloaderSettings",
          "usedStructName": "models.AutoDownloaderSettings",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AutoDownloaderSettingsUpdatedEvent is triggered when the autodownloader settings are updated"
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "autodownloader",
    "goStruct": {
      "filepath": "../internal/library/autodownloader/hook_events.go",
      "filename": "hook_events.go",
      "name": "AutoDownloaderBeforeDownloadTorrentEvent",
      "formattedName": "AutoDownloader_AutoDownloaderBeforeDownloadTorrentEvent",
      "package": "autodownloader",
      "fields": [
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "NormalizedTorrent",
          "typescriptType": "AutoDownloader_NormalizedTorrent",
          "usedTypescriptType": "AutoDownloader_NormalizedTorrent",
          "usedStructName": "autodownloader.NormalizedTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Rule",
          "jsonName": "rule",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Items",
          "jsonName": "items",
          "goType": "[]models.AutoDownloaderItem",
          "typescriptType": "Array\u003cModels_AutoDownloaderItem\u003e",
          "usedTypescriptType": "Models_AutoDownloaderItem",
          "usedStructName": "models.AutoDownloaderItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AutoDownloaderBeforeDownloadTorrentEvent is triggered when the autodownloader is about to download a torrent.",
        " Prevent default to abort the download."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "autodownloader",
    "goStruct": {
      "filepath": "../internal/library/autodownloader/hook_events.go",
      "filename": "hook_events.go",
      "name": "AutoDownloaderAfterDownloadTorrentEvent",
      "formattedName": "AutoDownloader_AutoDownloaderAfterDownloadTorrentEvent",
      "package": "autodownloader",
      "fields": [
        {
          "name": "Torrent",
          "jsonName": "torrent",
          "goType": "NormalizedTorrent",
          "typescriptType": "AutoDownloader_NormalizedTorrent",
          "usedTypescriptType": "AutoDownloader_NormalizedTorrent",
          "usedStructName": "autodownloader.NormalizedTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Rule",
          "jsonName": "rule",
          "goType": "anime.AutoDownloaderRule",
          "typescriptType": "Anime_AutoDownloaderRule",
          "usedTypescriptType": "Anime_AutoDownloaderRule",
          "usedStructName": "anime.AutoDownloaderRule",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " AutoDownloaderAfterDownloadTorrentEvent is triggered when the autodownloader has downloaded a torrent."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "playbackmanager",
    "goStruct": {
      "filepath": "../internal/library/playbackmanager/hook_events.go",
      "filename": "hook_events.go",
      "name": "LocalFilePlaybackRequestedEvent",
      "formattedName": "PlaybackManager_LocalFilePlaybackRequestedEvent",
      "package": "playbackmanager",
      "fields": [
        {
          "name": "Path",
          "jsonName": "path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " LocalFilePlaybackRequestedEvent is triggered when a local file is requested to be played.",
        " Prevent default to skip the default playback and override the playback."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "playbackmanager",
    "goStruct": {
      "filepath": "../internal/library/playbackmanager/hook_events.go",
      "filename": "hook_events.go",
      "name": "StreamPlaybackRequestedEvent",
      "formattedName": "PlaybackManager_StreamPlaybackRequestedEvent",
      "package": "playbackmanager",
      "fields": [
        {
          "name": "WindowTitle",
          "jsonName": "windowTitle",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Payload",
          "jsonName": "payload",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AniDbEpisode",
          "jsonName": "aniDbEpisode",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " StreamPlaybackRequestedEvent is triggered when a stream is requested to be played.",
        " Prevent default to skip the default playback and override the playback."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "playbackmanager",
    "goStruct": {
      "filepath": "../internal/library/playbackmanager/hook_events.go",
      "filename": "hook_events.go",
      "name": "PlaybackBeforeTrackingEvent",
      "formattedName": "PlaybackManager_PlaybackBeforeTrackingEvent",
      "package": "playbackmanager",
      "fields": [
        {
          "name": "IsStream",
          "jsonName": "isStream",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " PlaybackBeforeTrackingEvent is triggered just before the playback tracking starts.",
        " Prevent default to skip playback tracking."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "playbackmanager",
    "goStruct": {
      "filepath": "../internal/library/playbackmanager/hook_events.go",
      "filename": "hook_events.go",
      "name": "PlaybackLocalFileDetailsRequestedEvent",
      "formattedName": "PlaybackManager_PlaybackLocalFileDetailsRequestedEvent",
      "package": "playbackmanager",
      "fields": [
        {
          "name": "Path",
          "jsonName": "path",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AnimeListEntry",
          "jsonName": "animeListEntry",
          "goType": "anilist.AnimeListEntry",
          "typescriptType": "AL_AnimeListEntry",
          "usedTypescriptType": "AL_AnimeListEntry",
          "usedStructName": "anilist.AnimeListEntry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFile",
          "jsonName": "localFile",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFileWrapperEntry",
          "jsonName": "localFileWrapperEntry",
          "goType": "anime.LocalFileWrapperEntry",
          "typescriptType": "Anime_LocalFileWrapperEntry",
          "usedTypescriptType": "Anime_LocalFileWrapperEntry",
          "usedStructName": "anime.LocalFileWrapperEntry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " PlaybackLocalFileDetailsRequestedEvent is triggered when the local files details for a specific path are requested.",
        " This event is triggered right after the media player loads an episode.",
        " The playback manager uses the local files details to track the progress, propose next episodes, etc.",
        " In the current implementation, the details are fetched by selecting the local file from the database and making requests to retrieve the media and anime list entry.",
        " Prevent default to skip the default fetching and override the details."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "playbackmanager",
    "goStruct": {
      "filepath": "../internal/library/playbackmanager/hook_events.go",
      "filename": "hook_events.go",
      "name": "PlaybackStreamDetailsRequestedEvent",
      "formattedName": "PlaybackManager_PlaybackStreamDetailsRequestedEvent",
      "package": "playbackmanager",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "AnimeListEntry",
          "jsonName": "animeListEntry",
          "goType": "anilist.AnimeListEntry",
          "typescriptType": "AL_AnimeListEntry",
          "usedTypescriptType": "AL_AnimeListEntry",
          "usedStructName": "anilist.AnimeListEntry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " PlaybackStreamDetailsRequestedEvent is triggered when the stream details are requested.",
        " Prevent default to skip the default fetching and override the details.",
        " In the current implementation, the details are fetched by selecting the anime from the anime collection. If nothing is found, the stream is still tracked."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanStartedEvent",
      "formattedName": "Scanner_ScanStartedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LibraryPath",
          "jsonName": "libraryPath",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "OtherLibraryPaths",
          "jsonName": "otherLibraryPaths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Enhanced",
          "jsonName": "enhanced",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SkipLocked",
          "jsonName": "skipLocked",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "SkipIgnored",
          "jsonName": "skipIgnored",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanStartedEvent is triggered when the scanning process begins.",
        " Prevent default to skip the rest of the scanning process and return the local files."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanFilePathsRetrievedEvent",
      "formattedName": "Scanner_ScanFilePathsRetrievedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "FilePaths",
          "jsonName": "filePaths",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanFilePathsRetrievedEvent is triggered when the file paths to scan are retrieved.",
        " The event includes file paths from all directories to scan.",
        " The event includes file paths of local files that will be skipped."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanLocalFilesParsedEvent",
      "formattedName": "Scanner_ScanLocalFilesParsedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanLocalFilesParsedEvent is triggered right after the file paths are parsed into local file objects.",
        " The event does not include local files that are skipped."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanCompletedEvent",
      "formattedName": "Scanner_ScanCompletedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Duration",
          "jsonName": "duration",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": [
            " in milliseconds"
          ]
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanCompletedEvent is triggered when the scanning process finishes.",
        " The event includes all the local files (skipped and scanned) to be inserted as a new entry.",
        " Right after this event, the local files will be inserted as a new entry."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanMediaFetcherStartedEvent",
      "formattedName": "Scanner_ScanMediaFetcherStartedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "Enhanced",
          "jsonName": "enhanced",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanMediaFetcherStartedEvent is triggered right before Seanime starts fetching media to be matched against the local files."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanMediaFetcherCompletedEvent",
      "formattedName": "Scanner_ScanMediaFetcherCompletedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "AllMedia",
          "jsonName": "allMedia",
          "goType": "[]anilist.CompleteAnime",
          "typescriptType": "Array\u003cAL_CompleteAnime\u003e",
          "usedTypescriptType": "AL_CompleteAnime",
          "usedStructName": "anilist.CompleteAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "UnknownMediaIds",
          "jsonName": "unknownMediaIds",
          "goType": "[]int",
          "typescriptType": "Array\u003cnumber\u003e",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanMediaFetcherCompletedEvent is triggered when the media fetcher completes.",
        " The event includes all the media fetched from AniList.",
        " The event includes the media IDs that are not in the user's collection."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanMatchingStartedEvent",
      "formattedName": "Scanner_ScanMatchingStartedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "NormalizedMedia",
          "jsonName": "normalizedMedia",
          "goType": "[]anime.NormalizedMedia",
          "typescriptType": "Array\u003cAnime_NormalizedMedia\u003e",
          "usedTypescriptType": "Anime_NormalizedMedia",
          "usedStructName": "anime.NormalizedMedia",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Algorithm",
          "jsonName": "algorithm",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Threshold",
          "jsonName": "threshold",
          "goType": "float64",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanMatchingStartedEvent is triggered when the matching process begins.",
        " Prevent default to skip the default matching, in which case modified local files will be used."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanLocalFileMatchedEvent",
      "formattedName": "Scanner_ScanLocalFileMatchedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "Match",
          "jsonName": "match",
          "goType": "anime.NormalizedMedia",
          "typescriptType": "Anime_NormalizedMedia",
          "usedTypescriptType": "Anime_NormalizedMedia",
          "usedStructName": "anime.NormalizedMedia",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Found",
          "jsonName": "found",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "LocalFile",
          "jsonName": "localFile",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Score",
          "jsonName": "score",
          "goType": "float64",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanLocalFileMatchedEvent is triggered when a local file is matched with media and before the match is analyzed.",
        " Prevent default to skip the default analysis and override the match."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanMatchingCompletedEvent",
      "formattedName": "Scanner_ScanMatchingCompletedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanMatchingCompletedEvent is triggered when the matching process completes."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanHydrationStartedEvent",
      "formattedName": "Scanner_ScanHydrationStartedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LocalFiles",
          "jsonName": "localFiles",
          "goType": "[]anime.LocalFile",
          "typescriptType": "Array\u003cAnime_LocalFile\u003e",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AllMedia",
          "jsonName": "allMedia",
          "goType": "[]anime.NormalizedMedia",
          "typescriptType": "Array\u003cAnime_NormalizedMedia\u003e",
          "usedTypescriptType": "Anime_NormalizedMedia",
          "usedStructName": "anime.NormalizedMedia",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanHydrationStartedEvent is triggered when the file hydration process begins.",
        " Prevent default to skip the rest of the hydration process, in which case the event's local files will be used."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanLocalFileHydrationStartedEvent",
      "formattedName": "Scanner_ScanLocalFileHydrationStartedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LocalFile",
          "jsonName": "localFile",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anime.NormalizedMedia",
          "typescriptType": "Anime_NormalizedMedia",
          "usedTypescriptType": "Anime_NormalizedMedia",
          "usedStructName": "anime.NormalizedMedia",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanLocalFileHydrationStartedEvent is triggered when a local file's metadata is about to be hydrated.",
        " Prevent default to skip the default hydration and override the hydration."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "scanner",
    "goStruct": {
      "filepath": "../internal/library/scanner/hook_events.go",
      "filename": "hook_events.go",
      "name": "ScanLocalFileHydratedEvent",
      "formattedName": "Scanner_ScanLocalFileHydratedEvent",
      "package": "scanner",
      "fields": [
        {
          "name": "LocalFile",
          "jsonName": "localFile",
          "goType": "anime.LocalFile",
          "typescriptType": "Anime_LocalFile",
          "usedTypescriptType": "Anime_LocalFile",
          "usedStructName": "anime.LocalFile",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Episode",
          "jsonName": "episode",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " ScanLocalFileHydratedEvent is triggered when a local file's metadata is hydrated"
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaEntryRequestedEvent",
      "formattedName": "Manga_MangaEntryRequestedEvent",
      "package": "manga",
      "fields": [
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MangaCollection",
          "jsonName": "mangaCollection",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Entry",
          "jsonName": "entry",
          "goType": "Entry",
          "typescriptType": "Manga_Entry",
          "usedTypescriptType": "Manga_Entry",
          "usedStructName": "manga.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaEntryRequestedEvent is triggered when a manga entry is requested.",
        " Prevent default to skip the default behavior and return the modified entry.",
        " If the modified entry is nil, an error will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaEntryEvent",
      "formattedName": "Manga_MangaEntryEvent",
      "package": "manga",
      "fields": [
        {
          "name": "Entry",
          "jsonName": "entry",
          "goType": "Entry",
          "typescriptType": "Manga_Entry",
          "usedTypescriptType": "Manga_Entry",
          "usedStructName": "manga.Entry",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaEntryEvent is triggered when the manga entry is being returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaLibraryCollectionRequestedEvent",
      "formattedName": "Manga_MangaLibraryCollectionRequestedEvent",
      "package": "manga",
      "fields": [
        {
          "name": "MangaCollection",
          "jsonName": "mangaCollection",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaLibraryCollectionRequestedEvent is triggered when the manga library collection is being requested."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaLibraryCollectionEvent",
      "formattedName": "Manga_MangaLibraryCollectionEvent",
      "package": "manga",
      "fields": [
        {
          "name": "LibraryCollection",
          "jsonName": "libraryCollection",
          "goType": "Collection",
          "typescriptType": "Manga_Collection",
          "usedTypescriptType": "Manga_Collection",
          "usedStructName": "manga.Collection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaLibraryCollectionEvent is triggered when the manga library collection is being returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaDownloadedChapterContainersRequestedEvent",
      "formattedName": "Manga_MangaDownloadedChapterContainersRequestedEvent",
      "package": "manga",
      "fields": [
        {
          "name": "MangaCollection",
          "jsonName": "mangaCollection",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ChapterContainers",
          "jsonName": "chapterContainers",
          "goType": "[]ChapterContainer",
          "typescriptType": "Array\u003cManga_ChapterContainer\u003e",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaDownloadedChapterContainersRequestedEvent is triggered when the manga downloaded chapter containers are being requested.",
        " Prevent default to skip the default behavior and return the modified chapter containers.",
        " If the modified chapter containers are nil, an error will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaDownloadedChapterContainersEvent",
      "formattedName": "Manga_MangaDownloadedChapterContainersEvent",
      "package": "manga",
      "fields": [
        {
          "name": "ChapterContainers",
          "jsonName": "chapterContainers",
          "goType": "[]ChapterContainer",
          "typescriptType": "Array\u003cManga_ChapterContainer\u003e",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaDownloadedChapterContainersEvent is triggered when the manga downloaded chapter containers are being returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaLatestChapterNumbersMapEvent",
      "formattedName": "Manga_MangaLatestChapterNumbersMapEvent",
      "package": "manga",
      "fields": [
        {
          "name": "LatestChapterNumbersMap",
          "jsonName": "latestChapterNumbersMap",
          "goType": "map[int][]MangaLatestChapterNumberItem",
          "typescriptType": "Record\u003cnumber, Array\u003cManga_MangaLatestChapterNumberItem\u003e\u003e",
          "usedTypescriptType": "Manga_MangaLatestChapterNumberItem",
          "usedStructName": "manga.MangaLatestChapterNumberItem",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaLatestChapterNumbersMapEvent is triggered when the manga latest chapter numbers map is being returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaDownloadMapEvent",
      "formattedName": "Manga_MangaDownloadMapEvent",
      "package": "manga",
      "fields": [
        {
          "name": "MediaMap",
          "jsonName": "mediaMap",
          "goType": "MediaMap",
          "typescriptType": "Manga_MediaMap",
          "usedTypescriptType": "Manga_MediaMap",
          "usedStructName": "manga.MediaMap",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaDownloadMapEvent is triggered when the manga download map has been updated.",
        " This map is used to tell the client which chapters have been downloaded."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaChapterContainerRequestedEvent",
      "formattedName": "Manga_MangaChapterContainerRequestedEvent",
      "package": "manga",
      "fields": [
        {
          "name": "Provider",
          "jsonName": "provider",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MediaId",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Titles",
          "jsonName": "titles",
          "goType": "[]string",
          "typescriptType": "Array\u003cstring\u003e",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Year",
          "jsonName": "year",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "ChapterContainer",
          "jsonName": "chapterContainer",
          "goType": "ChapterContainer",
          "typescriptType": "Manga_ChapterContainer",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaChapterContainerRequestedEvent is triggered when the manga chapter container is being requested.",
        " This event happens before the chapter container is fetched from the cache or provider.",
        " Prevent default to skip the default behavior and return the modified chapter container.",
        " If the modified chapter container is nil, an error will be returned."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "manga",
    "goStruct": {
      "filepath": "../internal/manga/hook_events.go",
      "filename": "hook_events.go",
      "name": "MangaChapterContainerEvent",
      "formattedName": "Manga_MangaChapterContainerEvent",
      "package": "manga",
      "fields": [
        {
          "name": "ChapterContainer",
          "jsonName": "chapterContainer",
          "goType": "ChapterContainer",
          "typescriptType": "Manga_ChapterContainer",
          "usedTypescriptType": "Manga_ChapterContainer",
          "usedStructName": "manga.ChapterContainer",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MangaChapterContainerEvent is triggered when the manga chapter container is being returned.",
        " This event happens after the chapter container is fetched from the cache or provider."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "mediaplayer",
    "goStruct": {
      "filepath": "../internal/mediaplayers/mediaplayer/hook_events.go",
      "filename": "hook_events.go",
      "name": "MediaPlayerLocalFileTrackingRequestedEvent",
      "formattedName": "MediaPlayerLocalFileTrackingRequestedEvent",
      "package": "mediaplayer",
      "fields": [
        {
          "name": "StartRefreshDelay",
          "jsonName": "startRefreshDelay",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "RefreshDelay",
          "jsonName": "refreshDelay",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MaxRetries",
          "jsonName": "maxRetries",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MediaPlayerLocalFileTrackingRequestedEvent is triggered when the playback manager wants to track the progress of a local file.",
        " Prevent default to stop tracking."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "mediaplayer",
    "goStruct": {
      "filepath": "../internal/mediaplayers/mediaplayer/hook_events.go",
      "filename": "hook_events.go",
      "name": "MediaPlayerStreamTrackingRequestedEvent",
      "formattedName": "MediaPlayerStreamTrackingRequestedEvent",
      "package": "mediaplayer",
      "fields": [
        {
          "name": "StartRefreshDelay",
          "jsonName": "startRefreshDelay",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "RefreshDelay",
          "jsonName": "refreshDelay",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MaxRetries",
          "jsonName": "maxRetries",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "MaxRetriesAfterStart",
          "jsonName": "maxRetriesAfterStart",
          "goType": "int",
          "typescriptType": "number",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " MediaPlayerStreamTrackingRequestedEvent is triggered when the playback manager wants to track the progress of a stream.",
        " Prevent default to stop tracking."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetAnimeEvent",
      "formattedName": "GetAnimeEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "Anime",
          "jsonName": "anime",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetAnimeDetailsEvent",
      "formattedName": "GetAnimeDetailsEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "Anime",
          "jsonName": "anime",
          "goType": "anilist.AnimeDetailsById_Media",
          "typescriptType": "AL_AnimeDetailsById_Media",
          "usedTypescriptType": "AL_AnimeDetailsById_Media",
          "usedStructName": "anilist.AnimeDetailsById_Media",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetMangaEvent",
      "formattedName": "GetMangaEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "Manga",
          "jsonName": "manga",
          "goType": "anilist.BaseManga",
          "typescriptType": "AL_BaseManga",
          "usedTypescriptType": "AL_BaseManga",
          "usedStructName": "anilist.BaseManga",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetMangaDetailsEvent",
      "formattedName": "GetMangaDetailsEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "Manga",
          "jsonName": "manga",
          "goType": "anilist.MangaDetailsById_Media",
          "typescriptType": "AL_MangaDetailsById_Media",
          "usedTypescriptType": "AL_MangaDetailsById_Media",
          "usedStructName": "anilist.MangaDetailsById_Media",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetCachedAnimeCollectionEvent",
      "formattedName": "GetCachedAnimeCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetCachedMangaCollectionEvent",
      "formattedName": "GetCachedMangaCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MangaCollection",
          "jsonName": "mangaCollection",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetAnimeCollectionEvent",
      "formattedName": "GetAnimeCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetMangaCollectionEvent",
      "formattedName": "GetMangaCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MangaCollection",
          "jsonName": "mangaCollection",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetCachedRawAnimeCollectionEvent",
      "formattedName": "GetCachedRawAnimeCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetCachedRawMangaCollectionEvent",
      "formattedName": "GetCachedRawMangaCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MangaCollection",
          "jsonName": "mangaCollection",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetRawAnimeCollectionEvent",
      "formattedName": "GetRawAnimeCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "AnimeCollection",
          "jsonName": "animeCollection",
          "goType": "anilist.AnimeCollection",
          "typescriptType": "AL_AnimeCollection",
          "usedTypescriptType": "AL_AnimeCollection",
          "usedStructName": "anilist.AnimeCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetRawMangaCollectionEvent",
      "formattedName": "GetRawMangaCollectionEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MangaCollection",
          "jsonName": "mangaCollection",
          "goType": "anilist.MangaCollection",
          "typescriptType": "AL_MangaCollection",
          "usedTypescriptType": "AL_MangaCollection",
          "usedStructName": "anilist.MangaCollection",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "GetStudioDetailsEvent",
      "formattedName": "GetStudioDetailsEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "Studio",
          "jsonName": "studio",
          "goType": "anilist.StudioDetails",
          "typescriptType": "AL_StudioDetails",
          "usedTypescriptType": "AL_StudioDetails",
          "usedStructName": "anilist.StudioDetails",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "PreUpdateEntryEvent",
      "formattedName": "PreUpdateEntryEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MediaID",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Status",
          "jsonName": "status",
          "goType": "anilist.MediaListStatus",
          "typescriptType": "AL_MediaListStatus",
          "usedTypescriptType": "AL_MediaListStatus",
          "usedStructName": "anilist.MediaListStatus",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "ScoreRaw",
          "jsonName": "scoreRaw",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Progress",
          "jsonName": "progress",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "StartedAt",
          "jsonName": "startedAt",
          "goType": "anilist.FuzzyDateInput",
          "typescriptType": "AL_FuzzyDateInput",
          "usedTypescriptType": "AL_FuzzyDateInput",
          "usedStructName": "anilist.FuzzyDateInput",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "CompletedAt",
          "jsonName": "completedAt",
          "goType": "anilist.FuzzyDateInput",
          "typescriptType": "AL_FuzzyDateInput",
          "usedTypescriptType": "AL_FuzzyDateInput",
          "usedStructName": "anilist.FuzzyDateInput",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " PreUpdateEntryEvent is triggered when an entry is about to be updated.",
        " Prevent default to skip the default update and override the update."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "PostUpdateEntryEvent",
      "formattedName": "PostUpdateEntryEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MediaID",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "PreUpdateEntryProgressEvent",
      "formattedName": "PreUpdateEntryProgressEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MediaID",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Progress",
          "jsonName": "progress",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "TotalCount",
          "jsonName": "totalCount",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Status",
          "jsonName": "status",
          "goType": "anilist.MediaListStatus",
          "typescriptType": "AL_MediaListStatus",
          "usedTypescriptType": "AL_MediaListStatus",
          "usedStructName": "anilist.MediaListStatus",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " PreUpdateEntryProgressEvent is triggered when an entry's progress is about to be updated.",
        " Prevent default to skip the default update and override the update."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "PostUpdateEntryProgressEvent",
      "formattedName": "PostUpdateEntryProgressEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MediaID",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "PreUpdateEntryRepeatEvent",
      "formattedName": "PreUpdateEntryRepeatEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MediaID",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "Repeat",
          "jsonName": "repeat",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " PreUpdateEntryRepeatEvent is triggered when an entry's repeat is about to be updated.",
        " Prevent default to skip the default update and override the update."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "anilist_platform",
    "goStruct": {
      "filepath": "../internal/platforms/anilist_platform/hook_events.go",
      "filename": "hook_events.go",
      "name": "PostUpdateEntryRepeatEvent",
      "formattedName": "PostUpdateEntryRepeatEvent",
      "package": "anilist_platform",
      "fields": [
        {
          "name": "MediaID",
          "jsonName": "mediaId",
          "goType": "int",
          "typescriptType": "number",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "torrentstream",
    "goStruct": {
      "filepath": "../internal/torrentstream/hook_events.go",
      "filename": "hook_events.go",
      "name": "TorrentStreamAutoSelectTorrentsFetchedEvent",
      "formattedName": "Torrentstream_TorrentStreamAutoSelectTorrentsFetchedEvent",
      "package": "torrentstream",
      "fields": [
        {
          "name": "Torrents",
          "jsonName": "Torrents",
          "goType": "[]hibiketorrent.AnimeTorrent",
          "typescriptType": "Array\u003cHibikeTorrent_AnimeTorrent\u003e",
          "usedTypescriptType": "HibikeTorrent_AnimeTorrent",
          "usedStructName": "hibiketorrent.AnimeTorrent",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " TorrentStreamAutoSelectTorrentsFetchedEvent is triggered when the torrents are fetched for auto select.",
        " The torrents are sorted by seeders from highest to lowest.",
        " This event is triggered before the top 3 torrents are analyzed."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  },
  {
    "package": "torrentstream",
    "goStruct": {
      "filepath": "../internal/torrentstream/hook_events.go",
      "filename": "hook_events.go",
      "name": "TorrentStreamSendStreamToMediaPlayerEvent",
      "formattedName": "Torrentstream_TorrentStreamSendStreamToMediaPlayerEvent",
      "package": "torrentstream",
      "fields": [
        {
          "name": "WindowTitle",
          "jsonName": "windowTitle",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "StreamURL",
          "jsonName": "streamURL",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "Media",
          "jsonName": "media",
          "goType": "anilist.BaseAnime",
          "typescriptType": "AL_BaseAnime",
          "usedTypescriptType": "AL_BaseAnime",
          "usedStructName": "anilist.BaseAnime",
          "required": false,
          "public": true,
          "comments": []
        },
        {
          "name": "AniDbEpisode",
          "jsonName": "aniDbEpisode",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "PlaybackType",
          "jsonName": "playbackType",
          "goType": "string",
          "typescriptType": "string",
          "required": true,
          "public": true,
          "comments": []
        },
        {
          "name": "next",
          "jsonName": "next",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "preventDefault",
          "jsonName": "preventDefault",
          "goType": "",
          "typescriptType": "any",
          "required": true,
          "public": false,
          "comments": []
        },
        {
          "name": "DefaultPrevented",
          "jsonName": "defaultPrevented",
          "goType": "bool",
          "typescriptType": "boolean",
          "required": true,
          "public": true,
          "comments": []
        }
      ],
      "comments": [
        " TorrentStreamSendStreamToMediaPlayerEvent is triggered when the torrent stream is about to send a stream to the media player.",
        " Prevent default to skip the default playback and override the playback."
      ],
      "embeddedStructNames": [
        "hook_resolver.Event"
      ]
    }
  }
]
