// Code generated by 'yaegi extract github.com/gocolly/colly'. DO NOT EDIT.

package yaegi_interp

import (
	"github.com/gocolly/colly"
	"reflect"
)

func init() {
	Symbols["github.com/gocolly/colly/colly"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllowURLRevisit":                 reflect.ValueOf(colly.AllowURLRevisit),
		"AllowedDomains":                  reflect.ValueOf(colly.AllowedDomains),
		"Async":                           reflect.ValueOf(colly.Async),
		"CacheDir":                        reflect.ValueOf(colly.CacheDir),
		"Debugger":                        reflect.ValueOf(colly.Debugger),
		"DetectCharset":                   reflect.ValueOf(colly.DetectCharset),
		"DisallowedDomains":               reflect.ValueOf(colly.DisallowedDomains),
		"DisallowedURLFilters":            reflect.ValueOf(colly.DisallowedURLFilters),
		"ErrAlreadyVisited":               reflect.ValueOf(&colly.ErrAlreadyVisited).Elem(),
		"ErrForbiddenDomain":              reflect.ValueOf(&colly.ErrForbiddenDomain).Elem(),
		"ErrForbiddenURL":                 reflect.ValueOf(&colly.ErrForbiddenURL).Elem(),
		"ErrMaxDepth":                     reflect.ValueOf(&colly.ErrMaxDepth).Elem(),
		"ErrMissingURL":                   reflect.ValueOf(&colly.ErrMissingURL).Elem(),
		"ErrNoCookieJar":                  reflect.ValueOf(&colly.ErrNoCookieJar).Elem(),
		"ErrNoPattern":                    reflect.ValueOf(&colly.ErrNoPattern).Elem(),
		"ErrNoURLFiltersMatch":            reflect.ValueOf(&colly.ErrNoURLFiltersMatch).Elem(),
		"ErrRobotsTxtBlocked":             reflect.ValueOf(&colly.ErrRobotsTxtBlocked).Elem(),
		"ID":                              reflect.ValueOf(colly.ID),
		"IgnoreRobotsTxt":                 reflect.ValueOf(colly.IgnoreRobotsTxt),
		"MaxBodySize":                     reflect.ValueOf(colly.MaxBodySize),
		"MaxDepth":                        reflect.ValueOf(colly.MaxDepth),
		"NewCollector":                    reflect.ValueOf(colly.NewCollector),
		"NewContext":                      reflect.ValueOf(colly.NewContext),
		"NewHTMLElementFromSelectionNode": reflect.ValueOf(colly.NewHTMLElementFromSelectionNode),
		"NewXMLElementFromHTMLNode":       reflect.ValueOf(colly.NewXMLElementFromHTMLNode),
		"NewXMLElementFromXMLNode":        reflect.ValueOf(colly.NewXMLElementFromXMLNode),
		"ParseHTTPErrorResponse":          reflect.ValueOf(colly.ParseHTTPErrorResponse),
		"ProxyURLKey":                     reflect.ValueOf(colly.ProxyURLKey),
		"SanitizeFileName":                reflect.ValueOf(colly.SanitizeFileName),
		"URLFilters":                      reflect.ValueOf(colly.URLFilters),
		"UnmarshalHTML":                   reflect.ValueOf(colly.UnmarshalHTML),
		"UserAgent":                       reflect.ValueOf(colly.UserAgent),

		// type definitions
		"Collector":        reflect.ValueOf((*colly.Collector)(nil)),
		"Context":          reflect.ValueOf((*colly.Context)(nil)),
		"ErrorCallback":    reflect.ValueOf((*colly.ErrorCallback)(nil)),
		"HTMLCallback":     reflect.ValueOf((*colly.HTMLCallback)(nil)),
		"HTMLElement":      reflect.ValueOf((*colly.HTMLElement)(nil)),
		"LimitRule":        reflect.ValueOf((*colly.LimitRule)(nil)),
		"ProxyFunc":        reflect.ValueOf((*colly.ProxyFunc)(nil)),
		"Request":          reflect.ValueOf((*colly.Request)(nil)),
		"RequestCallback":  reflect.ValueOf((*colly.RequestCallback)(nil)),
		"Response":         reflect.ValueOf((*colly.Response)(nil)),
		"ResponseCallback": reflect.ValueOf((*colly.ResponseCallback)(nil)),
		"ScrapedCallback":  reflect.ValueOf((*colly.ScrapedCallback)(nil)),
		"XMLCallback":      reflect.ValueOf((*colly.XMLCallback)(nil)),
		"XMLElement":       reflect.ValueOf((*colly.XMLElement)(nil)),
	}
}
