// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package anilist

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type GithubGraphQLClient interface {
	UpdateEntry(ctx context.Context, mediaID *int, status *MediaListStatus, score *float64, progress *int, repeat *int, private *bool, notes *string, hiddenFromStatusLists *bool, startedAt *FuzzyDateInput, completedAt *FuzzyDateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntry, error)
	UpdateMediaListEntry(ctx context.Context, mediaID *int, status *MediaListStatus, scoreRaw *int, progress *int, startedAt *FuzzyDateInput, completedAt *FuzzyDateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMediaListEntry, error)
	UpdateMediaListEntryProgress(ctx context.Context, mediaID *int, progress *int, status *MediaListStatus, interceptors ...clientv2.RequestInterceptor) (*UpdateMediaListEntryProgress, error)
	UpdateMediaListEntryStatus(ctx context.Context, mediaID *int, progress *int, status *MediaListStatus, scoreRaw *int, interceptors ...clientv2.RequestInterceptor) (*UpdateMediaListEntryStatus, error)
	DeleteEntry(ctx context.Context, mediaListEntryID *int, interceptors ...clientv2.RequestInterceptor) (*DeleteEntry, error)
	MangaCollection(ctx context.Context, userName *string, interceptors ...clientv2.RequestInterceptor) (*MangaCollection, error)
	SearchBaseManga(ctx context.Context, page *int, perPage *int, sort []*MediaSort, search *string, status []*MediaStatus, interceptors ...clientv2.RequestInterceptor) (*SearchBaseManga, error)
	BaseMangaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BaseMangaByID, error)
	MangaDetailsByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*MangaDetailsByID, error)
	ListManga(ctx context.Context, page *int, search *string, perPage *int, sort []*MediaSort, status []*MediaStatus, genres []*string, averageScoreGreater *int, season *MediaSeason, seasonYear *int, format *MediaFormat, interceptors ...clientv2.RequestInterceptor) (*ListManga, error)
	AnimeCollection(ctx context.Context, userName *string, interceptors ...clientv2.RequestInterceptor) (*AnimeCollection, error)
	SearchAnimeShortMedia(ctx context.Context, page *int, perPage *int, sort []*MediaSort, search *string, status []*MediaStatus, interceptors ...clientv2.RequestInterceptor) (*SearchAnimeShortMedia, error)
	BasicMediaByMalID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BasicMediaByMalID, error)
	BasicMediaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BasicMediaByID, error)
	BaseMediaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BaseMediaByID, error)
	MediaDetailsByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*MediaDetailsByID, error)
	CompleteMediaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*CompleteMediaByID, error)
	ListMedia(ctx context.Context, page *int, search *string, perPage *int, sort []*MediaSort, status []*MediaStatus, genres []*string, averageScoreGreater *int, season *MediaSeason, seasonYear *int, format *MediaFormat, interceptors ...clientv2.RequestInterceptor) (*ListMedia, error)
	ListRecentMedia(ctx context.Context, page *int, perPage *int, airingAtGreater *int, airingAtLesser *int, interceptors ...clientv2.RequestInterceptor) (*ListRecentMedia, error)
	GetViewer(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetViewer, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GithubGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type BaseManga struct {
	ID              int                   "json:\"id\" graphql:\"id\""
	IDMal           *int                  "json:\"idMal,omitempty\" graphql:\"idMal\""
	SiteURL         *string               "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	Status          *MediaStatus          "json:\"status,omitempty\" graphql:\"status\""
	Season          *MediaSeason          "json:\"season,omitempty\" graphql:\"season\""
	Type            *MediaType            "json:\"type,omitempty\" graphql:\"type\""
	Format          *MediaFormat          "json:\"format,omitempty\" graphql:\"format\""
	BannerImage     *string               "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	Chapters        *int                  "json:\"chapters,omitempty\" graphql:\"chapters\""
	Volumes         *int                  "json:\"volumes,omitempty\" graphql:\"volumes\""
	Synonyms        []*string             "json:\"synonyms,omitempty\" graphql:\"synonyms\""
	IsAdult         *bool                 "json:\"isAdult,omitempty\" graphql:\"isAdult\""
	CountryOfOrigin *string               "json:\"countryOfOrigin,omitempty\" graphql:\"countryOfOrigin\""
	MeanScore       *int                  "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Description     *string               "json:\"description,omitempty\" graphql:\"description\""
	Title           *BaseManga_Title      "json:\"title,omitempty\" graphql:\"title\""
	CoverImage      *BaseManga_CoverImage "json:\"coverImage,omitempty\" graphql:\"coverImage\""
	StartDate       *BaseManga_StartDate  "json:\"startDate,omitempty\" graphql:\"startDate\""
	EndDate         *BaseManga_EndDate    "json:\"endDate,omitempty\" graphql:\"endDate\""
	Relations       *BaseManga_Relations  "json:\"relations,omitempty\" graphql:\"relations\""
}

func (t *BaseManga) GetID() int {
	if t == nil {
		t = &BaseManga{}
	}
	return t.ID
}
func (t *BaseManga) GetIDMal() *int {
	if t == nil {
		t = &BaseManga{}
	}
	return t.IDMal
}
func (t *BaseManga) GetSiteURL() *string {
	if t == nil {
		t = &BaseManga{}
	}
	return t.SiteURL
}
func (t *BaseManga) GetStatus() *MediaStatus {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Status
}
func (t *BaseManga) GetSeason() *MediaSeason {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Season
}
func (t *BaseManga) GetType() *MediaType {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Type
}
func (t *BaseManga) GetFormat() *MediaFormat {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Format
}
func (t *BaseManga) GetBannerImage() *string {
	if t == nil {
		t = &BaseManga{}
	}
	return t.BannerImage
}
func (t *BaseManga) GetChapters() *int {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Chapters
}
func (t *BaseManga) GetVolumes() *int {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Volumes
}
func (t *BaseManga) GetSynonyms() []*string {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Synonyms
}
func (t *BaseManga) GetIsAdult() *bool {
	if t == nil {
		t = &BaseManga{}
	}
	return t.IsAdult
}
func (t *BaseManga) GetCountryOfOrigin() *string {
	if t == nil {
		t = &BaseManga{}
	}
	return t.CountryOfOrigin
}
func (t *BaseManga) GetMeanScore() *int {
	if t == nil {
		t = &BaseManga{}
	}
	return t.MeanScore
}
func (t *BaseManga) GetDescription() *string {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Description
}
func (t *BaseManga) GetTitle() *BaseManga_Title {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Title
}
func (t *BaseManga) GetCoverImage() *BaseManga_CoverImage {
	if t == nil {
		t = &BaseManga{}
	}
	return t.CoverImage
}
func (t *BaseManga) GetStartDate() *BaseManga_StartDate {
	if t == nil {
		t = &BaseManga{}
	}
	return t.StartDate
}
func (t *BaseManga) GetEndDate() *BaseManga_EndDate {
	if t == nil {
		t = &BaseManga{}
	}
	return t.EndDate
}
func (t *BaseManga) GetRelations() *BaseManga_Relations {
	if t == nil {
		t = &BaseManga{}
	}
	return t.Relations
}

type BasicManga struct {
	ID              int                    "json:\"id\" graphql:\"id\""
	IDMal           *int                   "json:\"idMal,omitempty\" graphql:\"idMal\""
	SiteURL         *string                "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	Status          *MediaStatus           "json:\"status,omitempty\" graphql:\"status\""
	Season          *MediaSeason           "json:\"season,omitempty\" graphql:\"season\""
	Type            *MediaType             "json:\"type,omitempty\" graphql:\"type\""
	Format          *MediaFormat           "json:\"format,omitempty\" graphql:\"format\""
	BannerImage     *string                "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	Chapters        *int                   "json:\"chapters,omitempty\" graphql:\"chapters\""
	Volumes         *int                   "json:\"volumes,omitempty\" graphql:\"volumes\""
	Synonyms        []*string              "json:\"synonyms,omitempty\" graphql:\"synonyms\""
	IsAdult         *bool                  "json:\"isAdult,omitempty\" graphql:\"isAdult\""
	CountryOfOrigin *string                "json:\"countryOfOrigin,omitempty\" graphql:\"countryOfOrigin\""
	MeanScore       *int                   "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Title           *BasicManga_Title      "json:\"title,omitempty\" graphql:\"title\""
	CoverImage      *BasicManga_CoverImage "json:\"coverImage,omitempty\" graphql:\"coverImage\""
	StartDate       *BasicManga_StartDate  "json:\"startDate,omitempty\" graphql:\"startDate\""
	EndDate         *BasicManga_EndDate    "json:\"endDate,omitempty\" graphql:\"endDate\""
}

func (t *BasicManga) GetID() int {
	if t == nil {
		t = &BasicManga{}
	}
	return t.ID
}
func (t *BasicManga) GetIDMal() *int {
	if t == nil {
		t = &BasicManga{}
	}
	return t.IDMal
}
func (t *BasicManga) GetSiteURL() *string {
	if t == nil {
		t = &BasicManga{}
	}
	return t.SiteURL
}
func (t *BasicManga) GetStatus() *MediaStatus {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Status
}
func (t *BasicManga) GetSeason() *MediaSeason {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Season
}
func (t *BasicManga) GetType() *MediaType {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Type
}
func (t *BasicManga) GetFormat() *MediaFormat {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Format
}
func (t *BasicManga) GetBannerImage() *string {
	if t == nil {
		t = &BasicManga{}
	}
	return t.BannerImage
}
func (t *BasicManga) GetChapters() *int {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Chapters
}
func (t *BasicManga) GetVolumes() *int {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Volumes
}
func (t *BasicManga) GetSynonyms() []*string {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Synonyms
}
func (t *BasicManga) GetIsAdult() *bool {
	if t == nil {
		t = &BasicManga{}
	}
	return t.IsAdult
}
func (t *BasicManga) GetCountryOfOrigin() *string {
	if t == nil {
		t = &BasicManga{}
	}
	return t.CountryOfOrigin
}
func (t *BasicManga) GetMeanScore() *int {
	if t == nil {
		t = &BasicManga{}
	}
	return t.MeanScore
}
func (t *BasicManga) GetDescription() *string {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Description
}
func (t *BasicManga) GetTitle() *BasicManga_Title {
	if t == nil {
		t = &BasicManga{}
	}
	return t.Title
}
func (t *BasicManga) GetCoverImage() *BasicManga_CoverImage {
	if t == nil {
		t = &BasicManga{}
	}
	return t.CoverImage
}
func (t *BasicManga) GetStartDate() *BasicManga_StartDate {
	if t == nil {
		t = &BasicManga{}
	}
	return t.StartDate
}
func (t *BasicManga) GetEndDate() *BasicManga_EndDate {
	if t == nil {
		t = &BasicManga{}
	}
	return t.EndDate
}

type BasicMedia struct {
	ID                int                           "json:\"id\" graphql:\"id\""
	IDMal             *int                          "json:\"idMal,omitempty\" graphql:\"idMal\""
	SiteURL           *string                       "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	Status            *MediaStatus                  "json:\"status,omitempty\" graphql:\"status\""
	Season            *MediaSeason                  "json:\"season,omitempty\" graphql:\"season\""
	Type              *MediaType                    "json:\"type,omitempty\" graphql:\"type\""
	Format            *MediaFormat                  "json:\"format,omitempty\" graphql:\"format\""
	BannerImage       *string                       "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	Episodes          *int                          "json:\"episodes,omitempty\" graphql:\"episodes\""
	Synonyms          []*string                     "json:\"synonyms,omitempty\" graphql:\"synonyms\""
	IsAdult           *bool                         "json:\"isAdult,omitempty\" graphql:\"isAdult\""
	CountryOfOrigin   *string                       "json:\"countryOfOrigin,omitempty\" graphql:\"countryOfOrigin\""
	MeanScore         *int                          "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Description       *string                       "json:\"description,omitempty\" graphql:\"description\""
	Trailer           *BasicMedia_Trailer           "json:\"trailer,omitempty\" graphql:\"trailer\""
	Title             *BasicMedia_Title             "json:\"title,omitempty\" graphql:\"title\""
	CoverImage        *BasicMedia_CoverImage        "json:\"coverImage,omitempty\" graphql:\"coverImage\""
	StartDate         *BasicMedia_StartDate         "json:\"startDate,omitempty\" graphql:\"startDate\""
	EndDate           *BasicMedia_EndDate           "json:\"endDate,omitempty\" graphql:\"endDate\""
	NextAiringEpisode *BasicMedia_NextAiringEpisode "json:\"nextAiringEpisode,omitempty\" graphql:\"nextAiringEpisode\""
}

func (t *BasicMedia) GetID() int {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.ID
}
func (t *BasicMedia) GetIDMal() *int {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.IDMal
}
func (t *BasicMedia) GetSiteURL() *string {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.SiteURL
}
func (t *BasicMedia) GetStatus() *MediaStatus {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Status
}
func (t *BasicMedia) GetSeason() *MediaSeason {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Season
}
func (t *BasicMedia) GetType() *MediaType {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Type
}
func (t *BasicMedia) GetFormat() *MediaFormat {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Format
}
func (t *BasicMedia) GetBannerImage() *string {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.BannerImage
}
func (t *BasicMedia) GetEpisodes() *int {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Episodes
}
func (t *BasicMedia) GetSynonyms() []*string {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Synonyms
}
func (t *BasicMedia) GetIsAdult() *bool {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.IsAdult
}
func (t *BasicMedia) GetCountryOfOrigin() *string {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.CountryOfOrigin
}
func (t *BasicMedia) GetMeanScore() *int {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.MeanScore
}
func (t *BasicMedia) GetDescription() *string {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Description
}
func (t *BasicMedia) GetTrailer() *BasicMedia_Trailer {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Trailer
}
func (t *BasicMedia) GetTitle() *BasicMedia_Title {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.Title
}
func (t *BasicMedia) GetCoverImage() *BasicMedia_CoverImage {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.CoverImage
}
func (t *BasicMedia) GetStartDate() *BasicMedia_StartDate {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.StartDate
}
func (t *BasicMedia) GetEndDate() *BasicMedia_EndDate {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.EndDate
}
func (t *BasicMedia) GetNextAiringEpisode() *BasicMedia_NextAiringEpisode {
	if t == nil {
		t = &BasicMedia{}
	}
	return t.NextAiringEpisode
}

type BaseMedia struct {
	ID                int                          "json:\"id\" graphql:\"id\""
	IDMal             *int                         "json:\"idMal,omitempty\" graphql:\"idMal\""
	SiteURL           *string                      "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	Status            *MediaStatus                 "json:\"status,omitempty\" graphql:\"status\""
	Season            *MediaSeason                 "json:\"season,omitempty\" graphql:\"season\""
	Type              *MediaType                   "json:\"type,omitempty\" graphql:\"type\""
	Format            *MediaFormat                 "json:\"format,omitempty\" graphql:\"format\""
	BannerImage       *string                      "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	Episodes          *int                         "json:\"episodes,omitempty\" graphql:\"episodes\""
	Synonyms          []*string                    "json:\"synonyms,omitempty\" graphql:\"synonyms\""
	IsAdult           *bool                        "json:\"isAdult,omitempty\" graphql:\"isAdult\""
	CountryOfOrigin   *string                      "json:\"countryOfOrigin,omitempty\" graphql:\"countryOfOrigin\""
	MeanScore         *int                         "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Description       *string                      "json:\"description,omitempty\" graphql:\"description\""
	Trailer           *BaseMedia_Trailer           "json:\"trailer,omitempty\" graphql:\"trailer\""
	Title             *BaseMedia_Title             "json:\"title,omitempty\" graphql:\"title\""
	CoverImage        *BaseMedia_CoverImage        "json:\"coverImage,omitempty\" graphql:\"coverImage\""
	StartDate         *BaseMedia_StartDate         "json:\"startDate,omitempty\" graphql:\"startDate\""
	EndDate           *BaseMedia_EndDate           "json:\"endDate,omitempty\" graphql:\"endDate\""
	NextAiringEpisode *BaseMedia_NextAiringEpisode "json:\"nextAiringEpisode,omitempty\" graphql:\"nextAiringEpisode\""
	Relations         *BaseMedia_Relations         "json:\"relations,omitempty\" graphql:\"relations\""
}

func (t *BaseMedia) GetID() int {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.ID
}
func (t *BaseMedia) GetIDMal() *int {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.IDMal
}
func (t *BaseMedia) GetSiteURL() *string {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.SiteURL
}
func (t *BaseMedia) GetStatus() *MediaStatus {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Status
}
func (t *BaseMedia) GetSeason() *MediaSeason {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Season
}
func (t *BaseMedia) GetType() *MediaType {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Type
}
func (t *BaseMedia) GetFormat() *MediaFormat {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Format
}
func (t *BaseMedia) GetBannerImage() *string {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.BannerImage
}
func (t *BaseMedia) GetEpisodes() *int {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Episodes
}
func (t *BaseMedia) GetSynonyms() []*string {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Synonyms
}
func (t *BaseMedia) GetIsAdult() *bool {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.IsAdult
}
func (t *BaseMedia) GetCountryOfOrigin() *string {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.CountryOfOrigin
}
func (t *BaseMedia) GetMeanScore() *int {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.MeanScore
}
func (t *BaseMedia) GetDescription() *string {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Description
}
func (t *BaseMedia) GetTrailer() *BaseMedia_Trailer {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Trailer
}
func (t *BaseMedia) GetTitle() *BaseMedia_Title {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Title
}
func (t *BaseMedia) GetCoverImage() *BaseMedia_CoverImage {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.CoverImage
}
func (t *BaseMedia) GetStartDate() *BaseMedia_StartDate {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.StartDate
}
func (t *BaseMedia) GetEndDate() *BaseMedia_EndDate {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.EndDate
}
func (t *BaseMedia) GetNextAiringEpisode() *BaseMedia_NextAiringEpisode {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.NextAiringEpisode
}
func (t *BaseMedia) GetRelations() *BaseMedia_Relations {
	if t == nil {
		t = &BaseMedia{}
	}
	return t.Relations
}

type CompleteMedia struct {
	ID                int                              "json:\"id\" graphql:\"id\""
	IDMal             *int                             "json:\"idMal,omitempty\" graphql:\"idMal\""
	SiteURL           *string                          "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	Status            *MediaStatus                     "json:\"status,omitempty\" graphql:\"status\""
	Season            *MediaSeason                     "json:\"season,omitempty\" graphql:\"season\""
	Type              *MediaType                       "json:\"type,omitempty\" graphql:\"type\""
	Format            *MediaFormat                     "json:\"format,omitempty\" graphql:\"format\""
	BannerImage       *string                          "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	Episodes          *int                             "json:\"episodes,omitempty\" graphql:\"episodes\""
	Synonyms          []*string                        "json:\"synonyms,omitempty\" graphql:\"synonyms\""
	IsAdult           *bool                            "json:\"isAdult,omitempty\" graphql:\"isAdult\""
	CountryOfOrigin   *string                          "json:\"countryOfOrigin,omitempty\" graphql:\"countryOfOrigin\""
	Duration          *int                             "json:\"duration,omitempty\" graphql:\"duration\""
	Genres            []*string                        "json:\"genres,omitempty\" graphql:\"genres\""
	AverageScore      *int                             "json:\"averageScore,omitempty\" graphql:\"averageScore\""
	Popularity        *int                             "json:\"popularity,omitempty\" graphql:\"popularity\""
	MeanScore         *int                             "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Title             *CompleteMedia_Title             "json:\"title,omitempty\" graphql:\"title\""
	CoverImage        *CompleteMedia_CoverImage        "json:\"coverImage,omitempty\" graphql:\"coverImage\""
	StartDate         *CompleteMedia_StartDate         "json:\"startDate,omitempty\" graphql:\"startDate\""
	EndDate           *CompleteMedia_EndDate           "json:\"endDate,omitempty\" graphql:\"endDate\""
	NextAiringEpisode *CompleteMedia_NextAiringEpisode "json:\"nextAiringEpisode,omitempty\" graphql:\"nextAiringEpisode\""
	Relations         *CompleteMedia_Relations         "json:\"relations,omitempty\" graphql:\"relations\""
}

func (t *CompleteMedia) GetID() int {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.ID
}
func (t *CompleteMedia) GetIDMal() *int {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.IDMal
}
func (t *CompleteMedia) GetSiteURL() *string {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.SiteURL
}
func (t *CompleteMedia) GetStatus() *MediaStatus {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Status
}
func (t *CompleteMedia) GetSeason() *MediaSeason {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Season
}
func (t *CompleteMedia) GetType() *MediaType {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Type
}
func (t *CompleteMedia) GetFormat() *MediaFormat {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Format
}
func (t *CompleteMedia) GetBannerImage() *string {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.BannerImage
}
func (t *CompleteMedia) GetEpisodes() *int {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Episodes
}
func (t *CompleteMedia) GetSynonyms() []*string {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Synonyms
}
func (t *CompleteMedia) GetIsAdult() *bool {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.IsAdult
}
func (t *CompleteMedia) GetCountryOfOrigin() *string {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.CountryOfOrigin
}
func (t *CompleteMedia) GetDuration() *int {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Duration
}
func (t *CompleteMedia) GetGenres() []*string {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Genres
}
func (t *CompleteMedia) GetAverageScore() *int {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.AverageScore
}
func (t *CompleteMedia) GetPopularity() *int {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Popularity
}
func (t *CompleteMedia) GetMeanScore() *int {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.MeanScore
}
func (t *CompleteMedia) GetTitle() *CompleteMedia_Title {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Title
}
func (t *CompleteMedia) GetCoverImage() *CompleteMedia_CoverImage {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.CoverImage
}
func (t *CompleteMedia) GetStartDate() *CompleteMedia_StartDate {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.StartDate
}
func (t *CompleteMedia) GetEndDate() *CompleteMedia_EndDate {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.EndDate
}
func (t *CompleteMedia) GetNextAiringEpisode() *CompleteMedia_NextAiringEpisode {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.NextAiringEpisode
}
func (t *CompleteMedia) GetRelations() *CompleteMedia_Relations {
	if t == nil {
		t = &CompleteMedia{}
	}
	return t.Relations
}

type BaseManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseManga_Title{}
	}
	return t.UserPreferred
}
func (t *BaseManga_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseManga_Title{}
	}
	return t.Romaji
}
func (t *BaseManga_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseManga_Title{}
	}
	return t.English
}
func (t *BaseManga_Title) GetNative() *string {
	if t == nil {
		t = &BaseManga_Title{}
	}
	return t.Native
}

type BaseManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseManga_CoverImage{}
	}
	return t.Large
}
func (t *BaseManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseManga_CoverImage{}
	}
	return t.Medium
}
func (t *BaseManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseManga_CoverImage{}
	}
	return t.Color
}

type BaseManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseManga_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseManga_StartDate{}
	}
	return t.Year
}
func (t *BaseManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseManga_StartDate{}
	}
	return t.Month
}
func (t *BaseManga_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseManga_StartDate{}
	}
	return t.Day
}

type BaseManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseManga_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseManga_EndDate{}
	}
	return t.Year
}
func (t *BaseManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseManga_EndDate{}
	}
	return t.Month
}
func (t *BaseManga_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseManga_EndDate{}
	}
	return t.Day
}

type BaseManga_Relations_Edges_Node_BasicManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseManga_Relations_Edges_Node_BasicManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.UserPreferred
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Romaji
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.English
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_Title) GetNative() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Native
}

type BaseManga_Relations_Edges_Node_BasicManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Large
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Medium
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Color
}

type BaseManga_Relations_Edges_Node_BasicManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Year
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Month
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Day
}

type BaseManga_Relations_Edges_Node_BasicManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Year
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Month
}
func (t *BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Day
}

type BaseManga_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicManga    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *BaseManga_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &BaseManga_Relations_Edges{}
	}
	return t.RelationType
}
func (t *BaseManga_Relations_Edges) GetNode() *BasicManga {
	if t == nil {
		t = &BaseManga_Relations_Edges{}
	}
	return t.Node
}

type BaseManga_Relations struct {
	Edges []*BaseManga_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *BaseManga_Relations) GetEdges() []*BaseManga_Relations_Edges {
	if t == nil {
		t = &BaseManga_Relations{}
	}
	return t.Edges
}

type BasicManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BasicManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BasicManga_Title{}
	}
	return t.UserPreferred
}
func (t *BasicManga_Title) GetRomaji() *string {
	if t == nil {
		t = &BasicManga_Title{}
	}
	return t.Romaji
}
func (t *BasicManga_Title) GetEnglish() *string {
	if t == nil {
		t = &BasicManga_Title{}
	}
	return t.English
}
func (t *BasicManga_Title) GetNative() *string {
	if t == nil {
		t = &BasicManga_Title{}
	}
	return t.Native
}

type BasicManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BasicManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BasicManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BasicManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BasicManga_CoverImage{}
	}
	return t.Large
}
func (t *BasicManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BasicManga_CoverImage{}
	}
	return t.Medium
}
func (t *BasicManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &BasicManga_CoverImage{}
	}
	return t.Color
}

type BasicManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicManga_StartDate) GetYear() *int {
	if t == nil {
		t = &BasicManga_StartDate{}
	}
	return t.Year
}
func (t *BasicManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &BasicManga_StartDate{}
	}
	return t.Month
}
func (t *BasicManga_StartDate) GetDay() *int {
	if t == nil {
		t = &BasicManga_StartDate{}
	}
	return t.Day
}

type BasicManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicManga_EndDate) GetYear() *int {
	if t == nil {
		t = &BasicManga_EndDate{}
	}
	return t.Year
}
func (t *BasicManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &BasicManga_EndDate{}
	}
	return t.Month
}
func (t *BasicManga_EndDate) GetDay() *int {
	if t == nil {
		t = &BasicManga_EndDate{}
	}
	return t.Day
}

type BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &BasicMedia_Title{}
	}
	return t.English
}
func (t *BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &BasicMedia_Title{}
	}
	return t.Native
}

type BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &BasicMedia_CoverImage{}
	}
	return t.Color
}

type BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &BasicMedia_StartDate{}
	}
	return t.Day
}

type BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &BasicMedia_EndDate{}
	}
	return t.Day
}

type BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type BaseMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *BaseMedia_Trailer) GetID() *string {
	if t == nil {
		t = &BaseMedia_Trailer{}
	}
	return t.ID
}
func (t *BaseMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &BaseMedia_Trailer{}
	}
	return t.Site
}
func (t *BaseMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &BaseMedia_Trailer{}
	}
	return t.Thumbnail
}

type BaseMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseMedia_Title{}
	}
	return t.UserPreferred
}
func (t *BaseMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseMedia_Title{}
	}
	return t.Romaji
}
func (t *BaseMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseMedia_Title{}
	}
	return t.English
}
func (t *BaseMedia_Title) GetNative() *string {
	if t == nil {
		t = &BaseMedia_Title{}
	}
	return t.Native
}

type BaseMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseMedia_CoverImage{}
	}
	return t.Large
}
func (t *BaseMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseMedia_CoverImage{}
	}
	return t.Medium
}
func (t *BaseMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseMedia_CoverImage{}
	}
	return t.Color
}

type BaseMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseMedia_StartDate{}
	}
	return t.Year
}
func (t *BaseMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseMedia_StartDate{}
	}
	return t.Month
}
func (t *BaseMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseMedia_StartDate{}
	}
	return t.Day
}

type BaseMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseMedia_EndDate{}
	}
	return t.Year
}
func (t *BaseMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseMedia_EndDate{}
	}
	return t.Month
}
func (t *BaseMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseMedia_EndDate{}
	}
	return t.Day
}

type BaseMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *BaseMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &BaseMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *BaseMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &BaseMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *BaseMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &BaseMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type BaseMedia_Relations_Edges_Node_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type BaseMedia_Relations_Edges_Node_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.English
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Native
}

type BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Color
}

type BaseMedia_Relations_Edges_Node_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Day
}

type BaseMedia_Relations_Edges_Node_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Day
}

type BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type BaseMedia_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicMedia    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *BaseMedia_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &BaseMedia_Relations_Edges{}
	}
	return t.RelationType
}
func (t *BaseMedia_Relations_Edges) GetNode() *BasicMedia {
	if t == nil {
		t = &BaseMedia_Relations_Edges{}
	}
	return t.Node
}

type BaseMedia_Relations struct {
	Edges []*BaseMedia_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *BaseMedia_Relations) GetEdges() []*BaseMedia_Relations_Edges {
	if t == nil {
		t = &BaseMedia_Relations{}
	}
	return t.Edges
}

type CompleteMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *CompleteMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &CompleteMedia_Title{}
	}
	return t.UserPreferred
}
func (t *CompleteMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &CompleteMedia_Title{}
	}
	return t.Romaji
}
func (t *CompleteMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &CompleteMedia_Title{}
	}
	return t.English
}
func (t *CompleteMedia_Title) GetNative() *string {
	if t == nil {
		t = &CompleteMedia_Title{}
	}
	return t.Native
}

type CompleteMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *CompleteMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &CompleteMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *CompleteMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &CompleteMedia_CoverImage{}
	}
	return t.Large
}
func (t *CompleteMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &CompleteMedia_CoverImage{}
	}
	return t.Medium
}
func (t *CompleteMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &CompleteMedia_CoverImage{}
	}
	return t.Color
}

type CompleteMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &CompleteMedia_StartDate{}
	}
	return t.Year
}
func (t *CompleteMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMedia_StartDate{}
	}
	return t.Month
}
func (t *CompleteMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &CompleteMedia_StartDate{}
	}
	return t.Day
}

type CompleteMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &CompleteMedia_EndDate{}
	}
	return t.Year
}
func (t *CompleteMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMedia_EndDate{}
	}
	return t.Month
}
func (t *CompleteMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &CompleteMedia_EndDate{}
	}
	return t.Day
}

type CompleteMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *CompleteMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &CompleteMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *CompleteMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &CompleteMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *CompleteMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &CompleteMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type CompleteMedia_Relations_Edges_Node_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.English
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Native
}

type CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Color
}

type CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Day
}

type CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Day
}

type CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type CompleteMedia_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicMedia    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CompleteMedia_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &CompleteMedia_Relations_Edges{}
	}
	return t.RelationType
}
func (t *CompleteMedia_Relations_Edges) GetNode() *BasicMedia {
	if t == nil {
		t = &CompleteMedia_Relations_Edges{}
	}
	return t.Node
}

type CompleteMedia_Relations struct {
	Edges []*CompleteMedia_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CompleteMedia_Relations) GetEdges() []*CompleteMedia_Relations_Edges {
	if t == nil {
		t = &CompleteMedia_Relations{}
	}
	return t.Edges
}

type UpdateEntry_SaveMediaListEntry struct {
	ID int "json:\"id\" graphql:\"id\""
}

func (t *UpdateEntry_SaveMediaListEntry) GetID() int {
	if t == nil {
		t = &UpdateEntry_SaveMediaListEntry{}
	}
	return t.ID
}

type UpdateMediaListEntry_SaveMediaListEntry struct {
	ID int "json:\"id\" graphql:\"id\""
}

func (t *UpdateMediaListEntry_SaveMediaListEntry) GetID() int {
	if t == nil {
		t = &UpdateMediaListEntry_SaveMediaListEntry{}
	}
	return t.ID
}

type UpdateMediaListEntryProgress_SaveMediaListEntry struct {
	ID int "json:\"id\" graphql:\"id\""
}

func (t *UpdateMediaListEntryProgress_SaveMediaListEntry) GetID() int {
	if t == nil {
		t = &UpdateMediaListEntryProgress_SaveMediaListEntry{}
	}
	return t.ID
}

type UpdateMediaListEntryStatus_SaveMediaListEntry struct {
	ID int "json:\"id\" graphql:\"id\""
}

func (t *UpdateMediaListEntryStatus_SaveMediaListEntry) GetID() int {
	if t == nil {
		t = &UpdateMediaListEntryStatus_SaveMediaListEntry{}
	}
	return t.ID
}

type DeleteEntry_DeleteMediaListEntry struct {
	Deleted *bool "json:\"deleted,omitempty\" graphql:\"deleted\""
}

func (t *DeleteEntry_DeleteMediaListEntry) GetDeleted() *bool {
	if t == nil {
		t = &DeleteEntry_DeleteMediaListEntry{}
	}
	return t.Deleted
}

type MangaCollection_MediaListCollection_Lists_Entries_StartedAt struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_StartedAt) GetYear() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_StartedAt{}
	}
	return t.Year
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_StartedAt) GetMonth() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_StartedAt{}
	}
	return t.Month
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_StartedAt) GetDay() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_StartedAt{}
	}
	return t.Day
}

type MangaCollection_MediaListCollection_Lists_Entries_CompletedAt struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_CompletedAt) GetYear() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_CompletedAt{}
	}
	return t.Year
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_CompletedAt) GetMonth() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_CompletedAt{}
	}
	return t.Month
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_CompletedAt) GetDay() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_CompletedAt{}
	}
	return t.Day
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title{}
	}
	return t.UserPreferred
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title) GetRomaji() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title{}
	}
	return t.Romaji
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title) GetEnglish() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title{}
	}
	return t.English
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title) GetNative() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Title{}
	}
	return t.Native
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage{}
	}
	return t.Large
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage{}
	}
	return t.Medium
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_CoverImage{}
	}
	return t.Color
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_StartDate) GetYear() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_StartDate{}
	}
	return t.Year
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_StartDate{}
	}
	return t.Month
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_StartDate) GetDay() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_StartDate{}
	}
	return t.Day
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_EndDate) GetYear() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_EndDate{}
	}
	return t.Year
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_EndDate{}
	}
	return t.Month
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_EndDate) GetDay() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_EndDate{}
	}
	return t.Day
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.UserPreferred
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetRomaji() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Romaji
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetEnglish() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.English
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetNative() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Native
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Large
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Medium
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Color
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetYear() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Year
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Month
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetDay() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Day
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetYear() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Year
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Month
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetDay() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Day
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicManga    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges{}
	}
	return t.RelationType
}
func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges) GetNode() *BasicManga {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges{}
	}
	return t.Node
}

type MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations struct {
	Edges []*MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations) GetEdges() []*MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations_Edges {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries_Media_BaseManga_Relations{}
	}
	return t.Edges
}

type MangaCollection_MediaListCollection_Lists_Entries struct {
	ID          int                                                            "json:\"id\" graphql:\"id\""
	Score       *float64                                                       "json:\"score,omitempty\" graphql:\"score\""
	Progress    *int                                                           "json:\"progress,omitempty\" graphql:\"progress\""
	Status      *MediaListStatus                                               "json:\"status,omitempty\" graphql:\"status\""
	Notes       *string                                                        "json:\"notes,omitempty\" graphql:\"notes\""
	Repeat      *int                                                           "json:\"repeat,omitempty\" graphql:\"repeat\""
	Private     *bool                                                          "json:\"private,omitempty\" graphql:\"private\""
	StartedAt   *MangaCollection_MediaListCollection_Lists_Entries_StartedAt   "json:\"startedAt,omitempty\" graphql:\"startedAt\""
	CompletedAt *MangaCollection_MediaListCollection_Lists_Entries_CompletedAt "json:\"completedAt,omitempty\" graphql:\"completedAt\""
	Media       *BaseManga                                                     "json:\"media,omitempty\" graphql:\"media\""
}

func (t *MangaCollection_MediaListCollection_Lists_Entries) GetID() int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.ID
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetScore() *float64 {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Score
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetProgress() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Progress
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetStatus() *MediaListStatus {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Status
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetNotes() *string {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Notes
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetRepeat() *int {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Repeat
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetPrivate() *bool {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Private
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetStartedAt() *MangaCollection_MediaListCollection_Lists_Entries_StartedAt {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.StartedAt
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetCompletedAt() *MangaCollection_MediaListCollection_Lists_Entries_CompletedAt {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.CompletedAt
}
func (t *MangaCollection_MediaListCollection_Lists_Entries) GetMedia() *BaseManga {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Media
}

type MangaCollection_MediaListCollection_Lists struct {
	Status  *MediaListStatus                                     "json:\"status,omitempty\" graphql:\"status\""
	Entries []*MangaCollection_MediaListCollection_Lists_Entries "json:\"entries,omitempty\" graphql:\"entries\""
}

func (t *MangaCollection_MediaListCollection_Lists) GetStatus() *MediaListStatus {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists{}
	}
	return t.Status
}
func (t *MangaCollection_MediaListCollection_Lists) GetEntries() []*MangaCollection_MediaListCollection_Lists_Entries {
	if t == nil {
		t = &MangaCollection_MediaListCollection_Lists{}
	}
	return t.Entries
}

type MangaCollection_MediaListCollection struct {
	Lists []*MangaCollection_MediaListCollection_Lists "json:\"lists,omitempty\" graphql:\"lists\""
}

func (t *MangaCollection_MediaListCollection) GetLists() []*MangaCollection_MediaListCollection_Lists {
	if t == nil {
		t = &MangaCollection_MediaListCollection{}
	}
	return t.Lists
}

type SearchBaseManga_Page_PageInfo struct {
	HasNextPage *bool "json:\"hasNextPage,omitempty\" graphql:\"hasNextPage\""
}

func (t *SearchBaseManga_Page_PageInfo) GetHasNextPage() *bool {
	if t == nil {
		t = &SearchBaseManga_Page_PageInfo{}
	}
	return t.HasNextPage
}

type SearchBaseManga_Page_Media_BaseManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Title{}
	}
	return t.UserPreferred
}
func (t *SearchBaseManga_Page_Media_BaseManga_Title) GetRomaji() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Title{}
	}
	return t.Romaji
}
func (t *SearchBaseManga_Page_Media_BaseManga_Title) GetEnglish() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Title{}
	}
	return t.English
}
func (t *SearchBaseManga_Page_Media_BaseManga_Title) GetNative() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Title{}
	}
	return t.Native
}

type SearchBaseManga_Page_Media_BaseManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *SearchBaseManga_Page_Media_BaseManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_CoverImage{}
	}
	return t.Large
}
func (t *SearchBaseManga_Page_Media_BaseManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_CoverImage{}
	}
	return t.Medium
}
func (t *SearchBaseManga_Page_Media_BaseManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_CoverImage{}
	}
	return t.Color
}

type SearchBaseManga_Page_Media_BaseManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_StartDate) GetYear() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_StartDate{}
	}
	return t.Year
}
func (t *SearchBaseManga_Page_Media_BaseManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_StartDate{}
	}
	return t.Month
}
func (t *SearchBaseManga_Page_Media_BaseManga_StartDate) GetDay() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_StartDate{}
	}
	return t.Day
}

type SearchBaseManga_Page_Media_BaseManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_EndDate) GetYear() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_EndDate{}
	}
	return t.Year
}
func (t *SearchBaseManga_Page_Media_BaseManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_EndDate{}
	}
	return t.Month
}
func (t *SearchBaseManga_Page_Media_BaseManga_EndDate) GetDay() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_EndDate{}
	}
	return t.Day
}

type SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.UserPreferred
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetRomaji() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Romaji
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetEnglish() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.English
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetNative() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Native
}

type SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Large
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Medium
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Color
}

type SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetYear() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Year
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Month
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetDay() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Day
}

type SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetYear() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Year
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Month
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetDay() *int {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Day
}

type SearchBaseManga_Page_Media_BaseManga_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicManga    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges{}
	}
	return t.RelationType
}
func (t *SearchBaseManga_Page_Media_BaseManga_Relations_Edges) GetNode() *BasicManga {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations_Edges{}
	}
	return t.Node
}

type SearchBaseManga_Page_Media_BaseManga_Relations struct {
	Edges []*SearchBaseManga_Page_Media_BaseManga_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *SearchBaseManga_Page_Media_BaseManga_Relations) GetEdges() []*SearchBaseManga_Page_Media_BaseManga_Relations_Edges {
	if t == nil {
		t = &SearchBaseManga_Page_Media_BaseManga_Relations{}
	}
	return t.Edges
}

type SearchBaseManga_Page struct {
	PageInfo *SearchBaseManga_Page_PageInfo "json:\"pageInfo,omitempty\" graphql:\"pageInfo\""
	Media    []*BaseManga                   "json:\"media,omitempty\" graphql:\"media\""
}

func (t *SearchBaseManga_Page) GetPageInfo() *SearchBaseManga_Page_PageInfo {
	if t == nil {
		t = &SearchBaseManga_Page{}
	}
	return t.PageInfo
}
func (t *SearchBaseManga_Page) GetMedia() []*BaseManga {
	if t == nil {
		t = &SearchBaseManga_Page{}
	}
	return t.Media
}

type BaseMangaById_Media_BaseManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseMangaById_Media_BaseManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Title{}
	}
	return t.UserPreferred
}
func (t *BaseMangaById_Media_BaseManga_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Title{}
	}
	return t.Romaji
}
func (t *BaseMangaById_Media_BaseManga_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Title{}
	}
	return t.English
}
func (t *BaseMangaById_Media_BaseManga_Title) GetNative() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Title{}
	}
	return t.Native
}

type BaseMangaById_Media_BaseManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseMangaById_Media_BaseManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseMangaById_Media_BaseManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_CoverImage{}
	}
	return t.Large
}
func (t *BaseMangaById_Media_BaseManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_CoverImage{}
	}
	return t.Medium
}
func (t *BaseMangaById_Media_BaseManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_CoverImage{}
	}
	return t.Color
}

type BaseMangaById_Media_BaseManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMangaById_Media_BaseManga_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_StartDate{}
	}
	return t.Year
}
func (t *BaseMangaById_Media_BaseManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_StartDate{}
	}
	return t.Month
}
func (t *BaseMangaById_Media_BaseManga_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_StartDate{}
	}
	return t.Day
}

type BaseMangaById_Media_BaseManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMangaById_Media_BaseManga_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_EndDate{}
	}
	return t.Year
}
func (t *BaseMangaById_Media_BaseManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_EndDate{}
	}
	return t.Month
}
func (t *BaseMangaById_Media_BaseManga_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_EndDate{}
	}
	return t.Day
}

type BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.UserPreferred
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Romaji
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.English
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title) GetNative() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_Title{}
	}
	return t.Native
}

type BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Large
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Medium
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_CoverImage{}
	}
	return t.Color
}

type BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Year
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Month
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_StartDate{}
	}
	return t.Day
}

type BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Year
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Month
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges_Node_BasicManga_EndDate{}
	}
	return t.Day
}

type BaseMangaById_Media_BaseManga_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicManga    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *BaseMangaById_Media_BaseManga_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges{}
	}
	return t.RelationType
}
func (t *BaseMangaById_Media_BaseManga_Relations_Edges) GetNode() *BasicManga {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations_Edges{}
	}
	return t.Node
}

type BaseMangaById_Media_BaseManga_Relations struct {
	Edges []*BaseMangaById_Media_BaseManga_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *BaseMangaById_Media_BaseManga_Relations) GetEdges() []*BaseMangaById_Media_BaseManga_Relations_Edges {
	if t == nil {
		t = &BaseMangaById_Media_BaseManga_Relations{}
	}
	return t.Edges
}

type MangaDetailsById_Media_Rankings struct {
	Context string        "json:\"context\" graphql:\"context\""
	Type    MediaRankType "json:\"type\" graphql:\"type\""
	Rank    int           "json:\"rank\" graphql:\"rank\""
	Year    *int          "json:\"year,omitempty\" graphql:\"year\""
	Format  MediaFormat   "json:\"format\" graphql:\"format\""
	AllTime *bool         "json:\"allTime,omitempty\" graphql:\"allTime\""
	Season  *MediaSeason  "json:\"season,omitempty\" graphql:\"season\""
}

func (t *MangaDetailsById_Media_Rankings) GetContext() string {
	if t == nil {
		t = &MangaDetailsById_Media_Rankings{}
	}
	return t.Context
}
func (t *MangaDetailsById_Media_Rankings) GetType() *MediaRankType {
	if t == nil {
		t = &MangaDetailsById_Media_Rankings{}
	}
	return &t.Type
}
func (t *MangaDetailsById_Media_Rankings) GetRank() int {
	if t == nil {
		t = &MangaDetailsById_Media_Rankings{}
	}
	return t.Rank
}
func (t *MangaDetailsById_Media_Rankings) GetYear() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Rankings{}
	}
	return t.Year
}
func (t *MangaDetailsById_Media_Rankings) GetFormat() *MediaFormat {
	if t == nil {
		t = &MangaDetailsById_Media_Rankings{}
	}
	return &t.Format
}
func (t *MangaDetailsById_Media_Rankings) GetAllTime() *bool {
	if t == nil {
		t = &MangaDetailsById_Media_Rankings{}
	}
	return t.AllTime
}
func (t *MangaDetailsById_Media_Rankings) GetSeason() *MediaSeason {
	if t == nil {
		t = &MangaDetailsById_Media_Rankings{}
	}
	return t.Season
}

type MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetUserPreferred() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.UserPreferred
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetRomaji() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.Romaji
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetEnglish() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.English
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetNative() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.Native
}

type MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetLarge() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.Large
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetMedium() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.Medium
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetColor() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.Color
}

type MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate) GetYear() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate{}
	}
	return t.Year
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate) GetMonth() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate{}
	}
	return t.Month
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate) GetDay() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate{}
	}
	return t.Day
}

type MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate) GetYear() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate{}
	}
	return t.Year
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate) GetMonth() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate{}
	}
	return t.Month
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate) GetDay() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate{}
	}
	return t.Day
}

type MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation struct {
	ID              int                                                                               "json:\"id\" graphql:\"id\""
	IDMal           *int                                                                              "json:\"idMal,omitempty\" graphql:\"idMal\""
	SiteURL         *string                                                                           "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	Status          *MediaStatus                                                                      "json:\"status,omitempty\" graphql:\"status\""
	Season          *MediaSeason                                                                      "json:\"season,omitempty\" graphql:\"season\""
	Type            *MediaType                                                                        "json:\"type,omitempty\" graphql:\"type\""
	Format          *MediaFormat                                                                      "json:\"format,omitempty\" graphql:\"format\""
	BannerImage     *string                                                                           "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	Chapters        *int                                                                              "json:\"chapters,omitempty\" graphql:\"chapters\""
	Volumes         *int                                                                              "json:\"volumes,omitempty\" graphql:\"volumes\""
	Synonyms        []*string                                                                         "json:\"synonyms,omitempty\" graphql:\"synonyms\""
	IsAdult         *bool                                                                             "json:\"isAdult,omitempty\" graphql:\"isAdult\""
	CountryOfOrigin *string                                                                           "json:\"countryOfOrigin,omitempty\" graphql:\"countryOfOrigin\""
	MeanScore       *int                                                                              "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Description     *string                                                                           "json:\"description,omitempty\" graphql:\"description\""
	Title           *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title      "json:\"title,omitempty\" graphql:\"title\""
	CoverImage      *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage "json:\"coverImage,omitempty\" graphql:\"coverImage\""
	StartDate       *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate  "json:\"startDate,omitempty\" graphql:\"startDate\""
	EndDate         *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate    "json:\"endDate,omitempty\" graphql:\"endDate\""
}

func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetID() int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.ID
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetIDMal() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.IDMal
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetSiteURL() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.SiteURL
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetStatus() *MediaStatus {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Status
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetSeason() *MediaSeason {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Season
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetType() *MediaType {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Type
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetFormat() *MediaFormat {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Format
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetBannerImage() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.BannerImage
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetChapters() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Chapters
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetVolumes() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Volumes
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetSynonyms() []*string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Synonyms
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetIsAdult() *bool {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.IsAdult
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetCountryOfOrigin() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.CountryOfOrigin
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetMeanScore() *int {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.MeanScore
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetDescription() *string {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Description
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetTitle() *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Title
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetCoverImage() *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.CoverImage
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetStartDate() *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.StartDate
}
func (t *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetEndDate() *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.EndDate
}

type MangaDetailsById_Media_Recommendations_Edges_Node struct {
	MediaRecommendation *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation "json:\"mediaRecommendation,omitempty\" graphql:\"mediaRecommendation\""
}

func (t *MangaDetailsById_Media_Recommendations_Edges_Node) GetMediaRecommendation() *MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges_Node{}
	}
	return t.MediaRecommendation
}

type MangaDetailsById_Media_Recommendations_Edges struct {
	Node *MangaDetailsById_Media_Recommendations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *MangaDetailsById_Media_Recommendations_Edges) GetNode() *MangaDetailsById_Media_Recommendations_Edges_Node {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations_Edges{}
	}
	return t.Node
}

type MangaDetailsById_Media_Recommendations struct {
	Edges []*MangaDetailsById_Media_Recommendations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *MangaDetailsById_Media_Recommendations) GetEdges() []*MangaDetailsById_Media_Recommendations_Edges {
	if t == nil {
		t = &MangaDetailsById_Media_Recommendations{}
	}
	return t.Edges
}

type MangaDetailsById_Media struct {
	SiteURL         *string                                 "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	ID              int                                     "json:\"id\" graphql:\"id\""
	Duration        *int                                    "json:\"duration,omitempty\" graphql:\"duration\""
	Genres          []*string                               "json:\"genres,omitempty\" graphql:\"genres\""
	Rankings        []*MangaDetailsById_Media_Rankings      "json:\"rankings,omitempty\" graphql:\"rankings\""
	Recommendations *MangaDetailsById_Media_Recommendations "json:\"recommendations,omitempty\" graphql:\"recommendations\""
}

func (t *MangaDetailsById_Media) GetSiteURL() *string {
	if t == nil {
		t = &MangaDetailsById_Media{}
	}
	return t.SiteURL
}
func (t *MangaDetailsById_Media) GetID() int {
	if t == nil {
		t = &MangaDetailsById_Media{}
	}
	return t.ID
}
func (t *MangaDetailsById_Media) GetDuration() *int {
	if t == nil {
		t = &MangaDetailsById_Media{}
	}
	return t.Duration
}
func (t *MangaDetailsById_Media) GetGenres() []*string {
	if t == nil {
		t = &MangaDetailsById_Media{}
	}
	return t.Genres
}
func (t *MangaDetailsById_Media) GetRankings() []*MangaDetailsById_Media_Rankings {
	if t == nil {
		t = &MangaDetailsById_Media{}
	}
	return t.Rankings
}
func (t *MangaDetailsById_Media) GetRecommendations() *MangaDetailsById_Media_Recommendations {
	if t == nil {
		t = &MangaDetailsById_Media{}
	}
	return t.Recommendations
}

type ListManga_Page_PageInfo struct {
	HasNextPage *bool "json:\"hasNextPage,omitempty\" graphql:\"hasNextPage\""
	Total       *int  "json:\"total,omitempty\" graphql:\"total\""
	PerPage     *int  "json:\"perPage,omitempty\" graphql:\"perPage\""
	CurrentPage *int  "json:\"currentPage,omitempty\" graphql:\"currentPage\""
	LastPage    *int  "json:\"lastPage,omitempty\" graphql:\"lastPage\""
}

func (t *ListManga_Page_PageInfo) GetHasNextPage() *bool {
	if t == nil {
		t = &ListManga_Page_PageInfo{}
	}
	return t.HasNextPage
}
func (t *ListManga_Page_PageInfo) GetTotal() *int {
	if t == nil {
		t = &ListManga_Page_PageInfo{}
	}
	return t.Total
}
func (t *ListManga_Page_PageInfo) GetPerPage() *int {
	if t == nil {
		t = &ListManga_Page_PageInfo{}
	}
	return t.PerPage
}
func (t *ListManga_Page_PageInfo) GetCurrentPage() *int {
	if t == nil {
		t = &ListManga_Page_PageInfo{}
	}
	return t.CurrentPage
}
func (t *ListManga_Page_PageInfo) GetLastPage() *int {
	if t == nil {
		t = &ListManga_Page_PageInfo{}
	}
	return t.LastPage
}

type ListManga_Page_Media_BasicManga_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *ListManga_Page_Media_BasicManga_Title) GetUserPreferred() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_Title{}
	}
	return t.UserPreferred
}
func (t *ListManga_Page_Media_BasicManga_Title) GetRomaji() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_Title{}
	}
	return t.Romaji
}
func (t *ListManga_Page_Media_BasicManga_Title) GetEnglish() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_Title{}
	}
	return t.English
}
func (t *ListManga_Page_Media_BasicManga_Title) GetNative() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_Title{}
	}
	return t.Native
}

type ListManga_Page_Media_BasicManga_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *ListManga_Page_Media_BasicManga_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *ListManga_Page_Media_BasicManga_CoverImage) GetLarge() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_CoverImage{}
	}
	return t.Large
}
func (t *ListManga_Page_Media_BasicManga_CoverImage) GetMedium() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_CoverImage{}
	}
	return t.Medium
}
func (t *ListManga_Page_Media_BasicManga_CoverImage) GetColor() *string {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_CoverImage{}
	}
	return t.Color
}

type ListManga_Page_Media_BasicManga_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *ListManga_Page_Media_BasicManga_StartDate) GetYear() *int {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_StartDate{}
	}
	return t.Year
}
func (t *ListManga_Page_Media_BasicManga_StartDate) GetMonth() *int {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_StartDate{}
	}
	return t.Month
}
func (t *ListManga_Page_Media_BasicManga_StartDate) GetDay() *int {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_StartDate{}
	}
	return t.Day
}

type ListManga_Page_Media_BasicManga_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *ListManga_Page_Media_BasicManga_EndDate) GetYear() *int {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_EndDate{}
	}
	return t.Year
}
func (t *ListManga_Page_Media_BasicManga_EndDate) GetMonth() *int {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_EndDate{}
	}
	return t.Month
}
func (t *ListManga_Page_Media_BasicManga_EndDate) GetDay() *int {
	if t == nil {
		t = &ListManga_Page_Media_BasicManga_EndDate{}
	}
	return t.Day
}

type ListManga_Page struct {
	PageInfo *ListManga_Page_PageInfo "json:\"pageInfo,omitempty\" graphql:\"pageInfo\""
	Media    []*BasicManga            "json:\"media,omitempty\" graphql:\"media\""
}

func (t *ListManga_Page) GetPageInfo() *ListManga_Page_PageInfo {
	if t == nil {
		t = &ListManga_Page{}
	}
	return t.PageInfo
}
func (t *ListManga_Page) GetMedia() []*BasicManga {
	if t == nil {
		t = &ListManga_Page{}
	}
	return t.Media
}

type AnimeCollection_MediaListCollection_Lists_Entries_StartedAt struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_StartedAt) GetYear() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_StartedAt{}
	}
	return t.Year
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_StartedAt) GetMonth() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_StartedAt{}
	}
	return t.Month
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_StartedAt) GetDay() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_StartedAt{}
	}
	return t.Day
}

type AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt) GetYear() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt{}
	}
	return t.Year
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt) GetMonth() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt{}
	}
	return t.Month
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt) GetDay() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt{}
	}
	return t.Day
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Trailer) GetID() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Trailer{}
	}
	return t.ID
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Trailer{}
	}
	return t.Site
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Trailer{}
	}
	return t.Thumbnail
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title{}
	}
	return t.UserPreferred
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title{}
	}
	return t.Romaji
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title{}
	}
	return t.English
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title) GetNative() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Title{}
	}
	return t.Native
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage{}
	}
	return t.Large
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage{}
	}
	return t.Medium
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_CoverImage{}
	}
	return t.Color
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_StartDate{}
	}
	return t.Year
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_StartDate{}
	}
	return t.Month
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_StartDate{}
	}
	return t.Day
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_EndDate{}
	}
	return t.Year
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_EndDate{}
	}
	return t.Month
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_EndDate{}
	}
	return t.Day
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.English
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Native
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Color
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Day
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Day
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicMedia    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges{}
	}
	return t.RelationType
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges) GetNode() *BasicMedia {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges{}
	}
	return t.Node
}

type AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations struct {
	Edges []*AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations) GetEdges() []*AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations_Edges {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries_Media_BaseMedia_Relations{}
	}
	return t.Edges
}

type AnimeCollection_MediaListCollection_Lists_Entries struct {
	ID          int                                                            "json:\"id\" graphql:\"id\""
	Score       *float64                                                       "json:\"score,omitempty\" graphql:\"score\""
	Progress    *int                                                           "json:\"progress,omitempty\" graphql:\"progress\""
	Status      *MediaListStatus                                               "json:\"status,omitempty\" graphql:\"status\""
	Notes       *string                                                        "json:\"notes,omitempty\" graphql:\"notes\""
	Repeat      *int                                                           "json:\"repeat,omitempty\" graphql:\"repeat\""
	Private     *bool                                                          "json:\"private,omitempty\" graphql:\"private\""
	StartedAt   *AnimeCollection_MediaListCollection_Lists_Entries_StartedAt   "json:\"startedAt,omitempty\" graphql:\"startedAt\""
	CompletedAt *AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt "json:\"completedAt,omitempty\" graphql:\"completedAt\""
	Media       *BaseMedia                                                     "json:\"media,omitempty\" graphql:\"media\""
}

func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetID() int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.ID
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetScore() *float64 {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Score
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetProgress() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Progress
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetStatus() *MediaListStatus {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Status
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetNotes() *string {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Notes
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetRepeat() *int {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Repeat
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetPrivate() *bool {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Private
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetStartedAt() *AnimeCollection_MediaListCollection_Lists_Entries_StartedAt {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.StartedAt
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetCompletedAt() *AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.CompletedAt
}
func (t *AnimeCollection_MediaListCollection_Lists_Entries) GetMedia() *BaseMedia {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists_Entries{}
	}
	return t.Media
}

type AnimeCollection_MediaListCollection_Lists struct {
	Status  *MediaListStatus                                     "json:\"status,omitempty\" graphql:\"status\""
	Entries []*AnimeCollection_MediaListCollection_Lists_Entries "json:\"entries,omitempty\" graphql:\"entries\""
}

func (t *AnimeCollection_MediaListCollection_Lists) GetStatus() *MediaListStatus {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists{}
	}
	return t.Status
}
func (t *AnimeCollection_MediaListCollection_Lists) GetEntries() []*AnimeCollection_MediaListCollection_Lists_Entries {
	if t == nil {
		t = &AnimeCollection_MediaListCollection_Lists{}
	}
	return t.Entries
}

type AnimeCollection_MediaListCollection struct {
	Lists []*AnimeCollection_MediaListCollection_Lists "json:\"lists,omitempty\" graphql:\"lists\""
}

func (t *AnimeCollection_MediaListCollection) GetLists() []*AnimeCollection_MediaListCollection_Lists {
	if t == nil {
		t = &AnimeCollection_MediaListCollection{}
	}
	return t.Lists
}

type SearchAnimeShortMedia_Page_PageInfo struct {
	HasNextPage *bool "json:\"hasNextPage,omitempty\" graphql:\"hasNextPage\""
}

func (t *SearchAnimeShortMedia_Page_PageInfo) GetHasNextPage() *bool {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_PageInfo{}
	}
	return t.HasNextPage
}

type SearchAnimeShortMedia_Page_Media_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type SearchAnimeShortMedia_Page_Media_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_Title{}
	}
	return t.English
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_Title{}
	}
	return t.Native
}

type SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.Color
}

type SearchAnimeShortMedia_Page_Media_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_StartDate{}
	}
	return t.Day
}

type SearchAnimeShortMedia_Page_Media_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_EndDate{}
	}
	return t.Day
}

type SearchAnimeShortMedia_Page_Media_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *SearchAnimeShortMedia_Page_Media_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &SearchAnimeShortMedia_Page_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type SearchAnimeShortMedia_Page struct {
	PageInfo *SearchAnimeShortMedia_Page_PageInfo "json:\"pageInfo,omitempty\" graphql:\"pageInfo\""
	Media    []*BasicMedia                        "json:\"media,omitempty\" graphql:\"media\""
}

func (t *SearchAnimeShortMedia_Page) GetPageInfo() *SearchAnimeShortMedia_Page_PageInfo {
	if t == nil {
		t = &SearchAnimeShortMedia_Page{}
	}
	return t.PageInfo
}
func (t *SearchAnimeShortMedia_Page) GetMedia() []*BasicMedia {
	if t == nil {
		t = &SearchAnimeShortMedia_Page{}
	}
	return t.Media
}

type BasicMediaByMalId_Media_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *BasicMediaByMalId_Media_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *BasicMediaByMalId_Media_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *BasicMediaByMalId_Media_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type BasicMediaByMalId_Media_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BasicMediaByMalId_Media_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *BasicMediaByMalId_Media_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *BasicMediaByMalId_Media_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_Title{}
	}
	return t.English
}
func (t *BasicMediaByMalId_Media_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_Title{}
	}
	return t.Native
}

type BasicMediaByMalId_Media_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BasicMediaByMalId_Media_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BasicMediaByMalId_Media_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *BasicMediaByMalId_Media_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *BasicMediaByMalId_Media_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_CoverImage{}
	}
	return t.Color
}

type BasicMediaByMalId_Media_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicMediaByMalId_Media_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *BasicMediaByMalId_Media_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *BasicMediaByMalId_Media_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_StartDate{}
	}
	return t.Day
}

type BasicMediaByMalId_Media_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicMediaByMalId_Media_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *BasicMediaByMalId_Media_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *BasicMediaByMalId_Media_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_EndDate{}
	}
	return t.Day
}

type BasicMediaByMalId_Media_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *BasicMediaByMalId_Media_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *BasicMediaByMalId_Media_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *BasicMediaByMalId_Media_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &BasicMediaByMalId_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type BasicMediaById_Media_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *BasicMediaById_Media_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *BasicMediaById_Media_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *BasicMediaById_Media_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type BasicMediaById_Media_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BasicMediaById_Media_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *BasicMediaById_Media_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *BasicMediaById_Media_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_Title{}
	}
	return t.English
}
func (t *BasicMediaById_Media_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_Title{}
	}
	return t.Native
}

type BasicMediaById_Media_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BasicMediaById_Media_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BasicMediaById_Media_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *BasicMediaById_Media_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *BasicMediaById_Media_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_CoverImage{}
	}
	return t.Color
}

type BasicMediaById_Media_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicMediaById_Media_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *BasicMediaById_Media_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *BasicMediaById_Media_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_StartDate{}
	}
	return t.Day
}

type BasicMediaById_Media_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BasicMediaById_Media_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *BasicMediaById_Media_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *BasicMediaById_Media_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_EndDate{}
	}
	return t.Day
}

type BasicMediaById_Media_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *BasicMediaById_Media_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *BasicMediaById_Media_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *BasicMediaById_Media_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &BasicMediaById_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type BaseMediaById_Media_BaseMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *BaseMediaById_Media_BaseMedia_Trailer) GetID() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Trailer{}
	}
	return t.ID
}
func (t *BaseMediaById_Media_BaseMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Trailer{}
	}
	return t.Site
}
func (t *BaseMediaById_Media_BaseMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Trailer{}
	}
	return t.Thumbnail
}

type BaseMediaById_Media_BaseMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseMediaById_Media_BaseMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Title{}
	}
	return t.UserPreferred
}
func (t *BaseMediaById_Media_BaseMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Title{}
	}
	return t.Romaji
}
func (t *BaseMediaById_Media_BaseMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Title{}
	}
	return t.English
}
func (t *BaseMediaById_Media_BaseMedia_Title) GetNative() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Title{}
	}
	return t.Native
}

type BaseMediaById_Media_BaseMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseMediaById_Media_BaseMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseMediaById_Media_BaseMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_CoverImage{}
	}
	return t.Large
}
func (t *BaseMediaById_Media_BaseMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_CoverImage{}
	}
	return t.Medium
}
func (t *BaseMediaById_Media_BaseMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_CoverImage{}
	}
	return t.Color
}

type BaseMediaById_Media_BaseMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMediaById_Media_BaseMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_StartDate{}
	}
	return t.Year
}
func (t *BaseMediaById_Media_BaseMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_StartDate{}
	}
	return t.Month
}
func (t *BaseMediaById_Media_BaseMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_StartDate{}
	}
	return t.Day
}

type BaseMediaById_Media_BaseMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMediaById_Media_BaseMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_EndDate{}
	}
	return t.Year
}
func (t *BaseMediaById_Media_BaseMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_EndDate{}
	}
	return t.Month
}
func (t *BaseMediaById_Media_BaseMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_EndDate{}
	}
	return t.Day
}

type BaseMediaById_Media_BaseMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *BaseMediaById_Media_BaseMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *BaseMediaById_Media_BaseMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *BaseMediaById_Media_BaseMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.English
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Native
}

type BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Color
}

type BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Day
}

type BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Day
}

type BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type BaseMediaById_Media_BaseMedia_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicMedia    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges{}
	}
	return t.RelationType
}
func (t *BaseMediaById_Media_BaseMedia_Relations_Edges) GetNode() *BasicMedia {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations_Edges{}
	}
	return t.Node
}

type BaseMediaById_Media_BaseMedia_Relations struct {
	Edges []*BaseMediaById_Media_BaseMedia_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *BaseMediaById_Media_BaseMedia_Relations) GetEdges() []*BaseMediaById_Media_BaseMedia_Relations_Edges {
	if t == nil {
		t = &BaseMediaById_Media_BaseMedia_Relations{}
	}
	return t.Edges
}

type MediaDetailsById_Media_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *MediaDetailsById_Media_Trailer) GetID() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Trailer{}
	}
	return t.ID
}
func (t *MediaDetailsById_Media_Trailer) GetSite() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Trailer{}
	}
	return t.Site
}
func (t *MediaDetailsById_Media_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Trailer{}
	}
	return t.Thumbnail
}

type MediaDetailsById_Media_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MediaDetailsById_Media_StartDate) GetYear() *int {
	if t == nil {
		t = &MediaDetailsById_Media_StartDate{}
	}
	return t.Year
}
func (t *MediaDetailsById_Media_StartDate) GetMonth() *int {
	if t == nil {
		t = &MediaDetailsById_Media_StartDate{}
	}
	return t.Month
}
func (t *MediaDetailsById_Media_StartDate) GetDay() *int {
	if t == nil {
		t = &MediaDetailsById_Media_StartDate{}
	}
	return t.Day
}

type MediaDetailsById_Media_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MediaDetailsById_Media_EndDate) GetYear() *int {
	if t == nil {
		t = &MediaDetailsById_Media_EndDate{}
	}
	return t.Year
}
func (t *MediaDetailsById_Media_EndDate) GetMonth() *int {
	if t == nil {
		t = &MediaDetailsById_Media_EndDate{}
	}
	return t.Month
}
func (t *MediaDetailsById_Media_EndDate) GetDay() *int {
	if t == nil {
		t = &MediaDetailsById_Media_EndDate{}
	}
	return t.Day
}

type MediaDetailsById_Media_Studios_Nodes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *MediaDetailsById_Media_Studios_Nodes) GetName() string {
	if t == nil {
		t = &MediaDetailsById_Media_Studios_Nodes{}
	}
	return t.Name
}

type MediaDetailsById_Media_Studios struct {
	Nodes []*MediaDetailsById_Media_Studios_Nodes "json:\"nodes,omitempty\" graphql:\"nodes\""
}

func (t *MediaDetailsById_Media_Studios) GetNodes() []*MediaDetailsById_Media_Studios_Nodes {
	if t == nil {
		t = &MediaDetailsById_Media_Studios{}
	}
	return t.Nodes
}

type MediaDetailsById_Media_Rankings struct {
	Context string        "json:\"context\" graphql:\"context\""
	Type    MediaRankType "json:\"type\" graphql:\"type\""
	Rank    int           "json:\"rank\" graphql:\"rank\""
	Year    *int          "json:\"year,omitempty\" graphql:\"year\""
	Format  MediaFormat   "json:\"format\" graphql:\"format\""
	AllTime *bool         "json:\"allTime,omitempty\" graphql:\"allTime\""
	Season  *MediaSeason  "json:\"season,omitempty\" graphql:\"season\""
}

func (t *MediaDetailsById_Media_Rankings) GetContext() string {
	if t == nil {
		t = &MediaDetailsById_Media_Rankings{}
	}
	return t.Context
}
func (t *MediaDetailsById_Media_Rankings) GetType() *MediaRankType {
	if t == nil {
		t = &MediaDetailsById_Media_Rankings{}
	}
	return &t.Type
}
func (t *MediaDetailsById_Media_Rankings) GetRank() int {
	if t == nil {
		t = &MediaDetailsById_Media_Rankings{}
	}
	return t.Rank
}
func (t *MediaDetailsById_Media_Rankings) GetYear() *int {
	if t == nil {
		t = &MediaDetailsById_Media_Rankings{}
	}
	return t.Year
}
func (t *MediaDetailsById_Media_Rankings) GetFormat() *MediaFormat {
	if t == nil {
		t = &MediaDetailsById_Media_Rankings{}
	}
	return &t.Format
}
func (t *MediaDetailsById_Media_Rankings) GetAllTime() *bool {
	if t == nil {
		t = &MediaDetailsById_Media_Rankings{}
	}
	return t.AllTime
}
func (t *MediaDetailsById_Media_Rankings) GetSeason() *MediaSeason {
	if t == nil {
		t = &MediaDetailsById_Media_Rankings{}
	}
	return t.Season
}

type MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer) GetID() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer{}
	}
	return t.ID
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer) GetSite() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer{}
	}
	return t.Site
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer{}
	}
	return t.Thumbnail
}

type MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate) GetYear() *int {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate{}
	}
	return t.Year
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate) GetMonth() *int {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate{}
	}
	return t.Month
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate) GetDay() *int {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate{}
	}
	return t.Day
}

type MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetLarge() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.Large
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetMedium() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.Medium
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage) GetColor() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage{}
	}
	return t.Color
}

type MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title struct {
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
}

func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetRomaji() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.Romaji
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetEnglish() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.English
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetNative() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.Native
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title) GetUserPreferred() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title{}
	}
	return t.UserPreferred
}

type MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation struct {
	ID          int                                                                               "json:\"id\" graphql:\"id\""
	IDMal       *int                                                                              "json:\"idMal,omitempty\" graphql:\"idMal\""
	SiteURL     *string                                                                           "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	Status      *MediaStatus                                                                      "json:\"status,omitempty\" graphql:\"status\""
	IsAdult     *bool                                                                             "json:\"isAdult,omitempty\" graphql:\"isAdult\""
	Season      *MediaSeason                                                                      "json:\"season,omitempty\" graphql:\"season\""
	Type        *MediaType                                                                        "json:\"type,omitempty\" graphql:\"type\""
	Format      *MediaFormat                                                                      "json:\"format,omitempty\" graphql:\"format\""
	MeanScore   *int                                                                              "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Description *string                                                                           "json:\"description,omitempty\" graphql:\"description\""
	Episodes    *int                                                                              "json:\"episodes,omitempty\" graphql:\"episodes\""
	Trailer     *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer    "json:\"trailer,omitempty\" graphql:\"trailer\""
	StartDate   *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate  "json:\"startDate,omitempty\" graphql:\"startDate\""
	CoverImage  *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage "json:\"coverImage,omitempty\" graphql:\"coverImage\""
	BannerImage *string                                                                           "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	Title       *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title      "json:\"title,omitempty\" graphql:\"title\""
}

func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetID() int {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.ID
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetIDMal() *int {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.IDMal
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetSiteURL() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.SiteURL
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetStatus() *MediaStatus {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Status
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetIsAdult() *bool {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.IsAdult
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetSeason() *MediaSeason {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Season
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetType() *MediaType {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Type
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetFormat() *MediaFormat {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Format
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetMeanScore() *int {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.MeanScore
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetDescription() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Description
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetEpisodes() *int {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Episodes
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetTrailer() *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Trailer
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetStartDate() *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.StartDate
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetCoverImage() *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.CoverImage
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetBannerImage() *string {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.BannerImage
}
func (t *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation) GetTitle() *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation{}
	}
	return t.Title
}

type MediaDetailsById_Media_Recommendations_Edges_Node struct {
	MediaRecommendation *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation "json:\"mediaRecommendation,omitempty\" graphql:\"mediaRecommendation\""
}

func (t *MediaDetailsById_Media_Recommendations_Edges_Node) GetMediaRecommendation() *MediaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges_Node{}
	}
	return t.MediaRecommendation
}

type MediaDetailsById_Media_Recommendations_Edges struct {
	Node *MediaDetailsById_Media_Recommendations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *MediaDetailsById_Media_Recommendations_Edges) GetNode() *MediaDetailsById_Media_Recommendations_Edges_Node {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations_Edges{}
	}
	return t.Node
}

type MediaDetailsById_Media_Recommendations struct {
	Edges []*MediaDetailsById_Media_Recommendations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *MediaDetailsById_Media_Recommendations) GetEdges() []*MediaDetailsById_Media_Recommendations_Edges {
	if t == nil {
		t = &MediaDetailsById_Media_Recommendations{}
	}
	return t.Edges
}

type MediaDetailsById_Media struct {
	SiteURL         *string                                 "json:\"siteUrl,omitempty\" graphql:\"siteUrl\""
	ID              int                                     "json:\"id\" graphql:\"id\""
	Duration        *int                                    "json:\"duration,omitempty\" graphql:\"duration\""
	Genres          []*string                               "json:\"genres,omitempty\" graphql:\"genres\""
	AverageScore    *int                                    "json:\"averageScore,omitempty\" graphql:\"averageScore\""
	Popularity      *int                                    "json:\"popularity,omitempty\" graphql:\"popularity\""
	MeanScore       *int                                    "json:\"meanScore,omitempty\" graphql:\"meanScore\""
	Description     *string                                 "json:\"description,omitempty\" graphql:\"description\""
	Trailer         *MediaDetailsById_Media_Trailer         "json:\"trailer,omitempty\" graphql:\"trailer\""
	StartDate       *MediaDetailsById_Media_StartDate       "json:\"startDate,omitempty\" graphql:\"startDate\""
	EndDate         *MediaDetailsById_Media_EndDate         "json:\"endDate,omitempty\" graphql:\"endDate\""
	Studios         *MediaDetailsById_Media_Studios         "json:\"studios,omitempty\" graphql:\"studios\""
	Rankings        []*MediaDetailsById_Media_Rankings      "json:\"rankings,omitempty\" graphql:\"rankings\""
	Recommendations *MediaDetailsById_Media_Recommendations "json:\"recommendations,omitempty\" graphql:\"recommendations\""
}

func (t *MediaDetailsById_Media) GetSiteURL() *string {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.SiteURL
}
func (t *MediaDetailsById_Media) GetID() int {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.ID
}
func (t *MediaDetailsById_Media) GetDuration() *int {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Duration
}
func (t *MediaDetailsById_Media) GetGenres() []*string {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Genres
}
func (t *MediaDetailsById_Media) GetAverageScore() *int {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.AverageScore
}
func (t *MediaDetailsById_Media) GetPopularity() *int {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Popularity
}
func (t *MediaDetailsById_Media) GetMeanScore() *int {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.MeanScore
}
func (t *MediaDetailsById_Media) GetDescription() *string {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Description
}
func (t *MediaDetailsById_Media) GetTrailer() *MediaDetailsById_Media_Trailer {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Trailer
}
func (t *MediaDetailsById_Media) GetStartDate() *MediaDetailsById_Media_StartDate {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.StartDate
}
func (t *MediaDetailsById_Media) GetEndDate() *MediaDetailsById_Media_EndDate {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.EndDate
}
func (t *MediaDetailsById_Media) GetStudios() *MediaDetailsById_Media_Studios {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Studios
}
func (t *MediaDetailsById_Media) GetRankings() []*MediaDetailsById_Media_Rankings {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Rankings
}
func (t *MediaDetailsById_Media) GetRecommendations() *MediaDetailsById_Media_Recommendations {
	if t == nil {
		t = &MediaDetailsById_Media{}
	}
	return t.Recommendations
}

type CompleteMediaById_Media_CompleteMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Title{}
	}
	return t.UserPreferred
}
func (t *CompleteMediaById_Media_CompleteMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Title{}
	}
	return t.Romaji
}
func (t *CompleteMediaById_Media_CompleteMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Title{}
	}
	return t.English
}
func (t *CompleteMediaById_Media_CompleteMedia_Title) GetNative() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Title{}
	}
	return t.Native
}

type CompleteMediaById_Media_CompleteMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *CompleteMediaById_Media_CompleteMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *CompleteMediaById_Media_CompleteMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_CoverImage{}
	}
	return t.Large
}
func (t *CompleteMediaById_Media_CompleteMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_CoverImage{}
	}
	return t.Medium
}
func (t *CompleteMediaById_Media_CompleteMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_CoverImage{}
	}
	return t.Color
}

type CompleteMediaById_Media_CompleteMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMediaById_Media_CompleteMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_StartDate{}
	}
	return t.Year
}
func (t *CompleteMediaById_Media_CompleteMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_StartDate{}
	}
	return t.Month
}
func (t *CompleteMediaById_Media_CompleteMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_StartDate{}
	}
	return t.Day
}

type CompleteMediaById_Media_CompleteMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMediaById_Media_CompleteMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_EndDate{}
	}
	return t.Year
}
func (t *CompleteMediaById_Media_CompleteMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_EndDate{}
	}
	return t.Month
}
func (t *CompleteMediaById_Media_CompleteMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_EndDate{}
	}
	return t.Day
}

type CompleteMediaById_Media_CompleteMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *CompleteMediaById_Media_CompleteMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *CompleteMediaById_Media_CompleteMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *CompleteMediaById_Media_CompleteMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.English
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_Title{}
	}
	return t.Native
}

type CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_CoverImage{}
	}
	return t.Color
}

type CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_StartDate{}
	}
	return t.Day
}

type CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_EndDate{}
	}
	return t.Day
}

type CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges_Node_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type CompleteMediaById_Media_CompleteMedia_Relations_Edges struct {
	RelationType *MediaRelation "json:\"relationType,omitempty\" graphql:\"relationType\""
	Node         *BasicMedia    "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges) GetRelationType() *MediaRelation {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges{}
	}
	return t.RelationType
}
func (t *CompleteMediaById_Media_CompleteMedia_Relations_Edges) GetNode() *BasicMedia {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations_Edges{}
	}
	return t.Node
}

type CompleteMediaById_Media_CompleteMedia_Relations struct {
	Edges []*CompleteMediaById_Media_CompleteMedia_Relations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CompleteMediaById_Media_CompleteMedia_Relations) GetEdges() []*CompleteMediaById_Media_CompleteMedia_Relations_Edges {
	if t == nil {
		t = &CompleteMediaById_Media_CompleteMedia_Relations{}
	}
	return t.Edges
}

type ListMedia_Page_PageInfo struct {
	HasNextPage *bool "json:\"hasNextPage,omitempty\" graphql:\"hasNextPage\""
	Total       *int  "json:\"total,omitempty\" graphql:\"total\""
	PerPage     *int  "json:\"perPage,omitempty\" graphql:\"perPage\""
	CurrentPage *int  "json:\"currentPage,omitempty\" graphql:\"currentPage\""
	LastPage    *int  "json:\"lastPage,omitempty\" graphql:\"lastPage\""
}

func (t *ListMedia_Page_PageInfo) GetHasNextPage() *bool {
	if t == nil {
		t = &ListMedia_Page_PageInfo{}
	}
	return t.HasNextPage
}
func (t *ListMedia_Page_PageInfo) GetTotal() *int {
	if t == nil {
		t = &ListMedia_Page_PageInfo{}
	}
	return t.Total
}
func (t *ListMedia_Page_PageInfo) GetPerPage() *int {
	if t == nil {
		t = &ListMedia_Page_PageInfo{}
	}
	return t.PerPage
}
func (t *ListMedia_Page_PageInfo) GetCurrentPage() *int {
	if t == nil {
		t = &ListMedia_Page_PageInfo{}
	}
	return t.CurrentPage
}
func (t *ListMedia_Page_PageInfo) GetLastPage() *int {
	if t == nil {
		t = &ListMedia_Page_PageInfo{}
	}
	return t.LastPage
}

type ListMedia_Page_Media_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *ListMedia_Page_Media_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *ListMedia_Page_Media_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *ListMedia_Page_Media_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type ListMedia_Page_Media_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *ListMedia_Page_Media_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *ListMedia_Page_Media_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *ListMedia_Page_Media_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_Title{}
	}
	return t.English
}
func (t *ListMedia_Page_Media_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_Title{}
	}
	return t.Native
}

type ListMedia_Page_Media_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *ListMedia_Page_Media_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *ListMedia_Page_Media_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *ListMedia_Page_Media_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *ListMedia_Page_Media_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_CoverImage{}
	}
	return t.Color
}

type ListMedia_Page_Media_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *ListMedia_Page_Media_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *ListMedia_Page_Media_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *ListMedia_Page_Media_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_StartDate{}
	}
	return t.Day
}

type ListMedia_Page_Media_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *ListMedia_Page_Media_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *ListMedia_Page_Media_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *ListMedia_Page_Media_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_EndDate{}
	}
	return t.Day
}

type ListMedia_Page_Media_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *ListMedia_Page_Media_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *ListMedia_Page_Media_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *ListMedia_Page_Media_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &ListMedia_Page_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type ListMedia_Page struct {
	PageInfo *ListMedia_Page_PageInfo "json:\"pageInfo,omitempty\" graphql:\"pageInfo\""
	Media    []*BasicMedia            "json:\"media,omitempty\" graphql:\"media\""
}

func (t *ListMedia_Page) GetPageInfo() *ListMedia_Page_PageInfo {
	if t == nil {
		t = &ListMedia_Page{}
	}
	return t.PageInfo
}
func (t *ListMedia_Page) GetMedia() []*BasicMedia {
	if t == nil {
		t = &ListMedia_Page{}
	}
	return t.Media
}

type ListRecentMedia_Page_PageInfo struct {
	HasNextPage *bool "json:\"hasNextPage,omitempty\" graphql:\"hasNextPage\""
	Total       *int  "json:\"total,omitempty\" graphql:\"total\""
	PerPage     *int  "json:\"perPage,omitempty\" graphql:\"perPage\""
	CurrentPage *int  "json:\"currentPage,omitempty\" graphql:\"currentPage\""
	LastPage    *int  "json:\"lastPage,omitempty\" graphql:\"lastPage\""
}

func (t *ListRecentMedia_Page_PageInfo) GetHasNextPage() *bool {
	if t == nil {
		t = &ListRecentMedia_Page_PageInfo{}
	}
	return t.HasNextPage
}
func (t *ListRecentMedia_Page_PageInfo) GetTotal() *int {
	if t == nil {
		t = &ListRecentMedia_Page_PageInfo{}
	}
	return t.Total
}
func (t *ListRecentMedia_Page_PageInfo) GetPerPage() *int {
	if t == nil {
		t = &ListRecentMedia_Page_PageInfo{}
	}
	return t.PerPage
}
func (t *ListRecentMedia_Page_PageInfo) GetCurrentPage() *int {
	if t == nil {
		t = &ListRecentMedia_Page_PageInfo{}
	}
	return t.CurrentPage
}
func (t *ListRecentMedia_Page_PageInfo) GetLastPage() *int {
	if t == nil {
		t = &ListRecentMedia_Page_PageInfo{}
	}
	return t.LastPage
}

type ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Trailer struct {
	ID        *string "json:\"id,omitempty\" graphql:\"id\""
	Site      *string "json:\"site,omitempty\" graphql:\"site\""
	Thumbnail *string "json:\"thumbnail,omitempty\" graphql:\"thumbnail\""
}

func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Trailer) GetID() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Trailer{}
	}
	return t.ID
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Trailer) GetSite() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Trailer{}
	}
	return t.Site
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Trailer) GetThumbnail() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Trailer{}
	}
	return t.Thumbnail
}

type ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title struct {
	UserPreferred *string "json:\"userPreferred,omitempty\" graphql:\"userPreferred\""
	Romaji        *string "json:\"romaji,omitempty\" graphql:\"romaji\""
	English       *string "json:\"english,omitempty\" graphql:\"english\""
	Native        *string "json:\"native,omitempty\" graphql:\"native\""
}

func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title) GetUserPreferred() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title{}
	}
	return t.UserPreferred
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title) GetRomaji() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title{}
	}
	return t.Romaji
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title) GetEnglish() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title{}
	}
	return t.English
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title) GetNative() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_Title{}
	}
	return t.Native
}

type ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage struct {
	ExtraLarge *string "json:\"extraLarge,omitempty\" graphql:\"extraLarge\""
	Large      *string "json:\"large,omitempty\" graphql:\"large\""
	Medium     *string "json:\"medium,omitempty\" graphql:\"medium\""
	Color      *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage) GetExtraLarge() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage{}
	}
	return t.ExtraLarge
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage) GetLarge() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage{}
	}
	return t.Large
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage) GetMedium() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage{}
	}
	return t.Medium
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage) GetColor() *string {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_CoverImage{}
	}
	return t.Color
}

type ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_StartDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_StartDate) GetYear() *int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_StartDate{}
	}
	return t.Year
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_StartDate) GetMonth() *int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_StartDate{}
	}
	return t.Month
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_StartDate) GetDay() *int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_StartDate{}
	}
	return t.Day
}

type ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_EndDate struct {
	Year  *int "json:\"year,omitempty\" graphql:\"year\""
	Month *int "json:\"month,omitempty\" graphql:\"month\""
	Day   *int "json:\"day,omitempty\" graphql:\"day\""
}

func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_EndDate) GetYear() *int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_EndDate{}
	}
	return t.Year
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_EndDate) GetMonth() *int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_EndDate{}
	}
	return t.Month
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_EndDate) GetDay() *int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_EndDate{}
	}
	return t.Day
}

type ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_NextAiringEpisode struct {
	AiringAt        int "json:\"airingAt\" graphql:\"airingAt\""
	TimeUntilAiring int "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Episode         int "json:\"episode\" graphql:\"episode\""
}

func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_NextAiringEpisode) GetAiringAt() int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.AiringAt
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_NextAiringEpisode) GetTimeUntilAiring() int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.TimeUntilAiring
}
func (t *ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_NextAiringEpisode) GetEpisode() int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules_Media_BasicMedia_NextAiringEpisode{}
	}
	return t.Episode
}

type ListRecentMedia_Page_AiringSchedules struct {
	ID              int         "json:\"id\" graphql:\"id\""
	AiringAt        int         "json:\"airingAt\" graphql:\"airingAt\""
	Episode         int         "json:\"episode\" graphql:\"episode\""
	TimeUntilAiring int         "json:\"timeUntilAiring\" graphql:\"timeUntilAiring\""
	Media           *BasicMedia "json:\"media,omitempty\" graphql:\"media\""
}

func (t *ListRecentMedia_Page_AiringSchedules) GetID() int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules{}
	}
	return t.ID
}
func (t *ListRecentMedia_Page_AiringSchedules) GetAiringAt() int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules{}
	}
	return t.AiringAt
}
func (t *ListRecentMedia_Page_AiringSchedules) GetEpisode() int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules{}
	}
	return t.Episode
}
func (t *ListRecentMedia_Page_AiringSchedules) GetTimeUntilAiring() int {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules{}
	}
	return t.TimeUntilAiring
}
func (t *ListRecentMedia_Page_AiringSchedules) GetMedia() *BasicMedia {
	if t == nil {
		t = &ListRecentMedia_Page_AiringSchedules{}
	}
	return t.Media
}

type ListRecentMedia_Page struct {
	PageInfo        *ListRecentMedia_Page_PageInfo          "json:\"pageInfo,omitempty\" graphql:\"pageInfo\""
	AiringSchedules []*ListRecentMedia_Page_AiringSchedules "json:\"airingSchedules,omitempty\" graphql:\"airingSchedules\""
}

func (t *ListRecentMedia_Page) GetPageInfo() *ListRecentMedia_Page_PageInfo {
	if t == nil {
		t = &ListRecentMedia_Page{}
	}
	return t.PageInfo
}
func (t *ListRecentMedia_Page) GetAiringSchedules() []*ListRecentMedia_Page_AiringSchedules {
	if t == nil {
		t = &ListRecentMedia_Page{}
	}
	return t.AiringSchedules
}

type GetViewer_Viewer_Avatar struct {
	Large  *string "json:\"large,omitempty\" graphql:\"large\""
	Medium *string "json:\"medium,omitempty\" graphql:\"medium\""
}

func (t *GetViewer_Viewer_Avatar) GetLarge() *string {
	if t == nil {
		t = &GetViewer_Viewer_Avatar{}
	}
	return t.Large
}
func (t *GetViewer_Viewer_Avatar) GetMedium() *string {
	if t == nil {
		t = &GetViewer_Viewer_Avatar{}
	}
	return t.Medium
}

type GetViewer_Viewer_Options struct {
	DisplayAdultContent *bool   "json:\"displayAdultContent,omitempty\" graphql:\"displayAdultContent\""
	AiringNotifications *bool   "json:\"airingNotifications,omitempty\" graphql:\"airingNotifications\""
	ProfileColor        *string "json:\"profileColor,omitempty\" graphql:\"profileColor\""
}

func (t *GetViewer_Viewer_Options) GetDisplayAdultContent() *bool {
	if t == nil {
		t = &GetViewer_Viewer_Options{}
	}
	return t.DisplayAdultContent
}
func (t *GetViewer_Viewer_Options) GetAiringNotifications() *bool {
	if t == nil {
		t = &GetViewer_Viewer_Options{}
	}
	return t.AiringNotifications
}
func (t *GetViewer_Viewer_Options) GetProfileColor() *string {
	if t == nil {
		t = &GetViewer_Viewer_Options{}
	}
	return t.ProfileColor
}

type GetViewer_Viewer struct {
	Name        string                    "json:\"name\" graphql:\"name\""
	Avatar      *GetViewer_Viewer_Avatar  "json:\"avatar,omitempty\" graphql:\"avatar\""
	BannerImage *string                   "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	IsBlocked   *bool                     "json:\"isBlocked,omitempty\" graphql:\"isBlocked\""
	Options     *GetViewer_Viewer_Options "json:\"options,omitempty\" graphql:\"options\""
}

func (t *GetViewer_Viewer) GetName() string {
	if t == nil {
		t = &GetViewer_Viewer{}
	}
	return t.Name
}
func (t *GetViewer_Viewer) GetAvatar() *GetViewer_Viewer_Avatar {
	if t == nil {
		t = &GetViewer_Viewer{}
	}
	return t.Avatar
}
func (t *GetViewer_Viewer) GetBannerImage() *string {
	if t == nil {
		t = &GetViewer_Viewer{}
	}
	return t.BannerImage
}
func (t *GetViewer_Viewer) GetIsBlocked() *bool {
	if t == nil {
		t = &GetViewer_Viewer{}
	}
	return t.IsBlocked
}
func (t *GetViewer_Viewer) GetOptions() *GetViewer_Viewer_Options {
	if t == nil {
		t = &GetViewer_Viewer{}
	}
	return t.Options
}

type UpdateEntry struct {
	SaveMediaListEntry *UpdateEntry_SaveMediaListEntry "json:\"SaveMediaListEntry,omitempty\" graphql:\"SaveMediaListEntry\""
}

func (t *UpdateEntry) GetSaveMediaListEntry() *UpdateEntry_SaveMediaListEntry {
	if t == nil {
		t = &UpdateEntry{}
	}
	return t.SaveMediaListEntry
}

type UpdateMediaListEntry struct {
	SaveMediaListEntry *UpdateMediaListEntry_SaveMediaListEntry "json:\"SaveMediaListEntry,omitempty\" graphql:\"SaveMediaListEntry\""
}

func (t *UpdateMediaListEntry) GetSaveMediaListEntry() *UpdateMediaListEntry_SaveMediaListEntry {
	if t == nil {
		t = &UpdateMediaListEntry{}
	}
	return t.SaveMediaListEntry
}

type UpdateMediaListEntryProgress struct {
	SaveMediaListEntry *UpdateMediaListEntryProgress_SaveMediaListEntry "json:\"SaveMediaListEntry,omitempty\" graphql:\"SaveMediaListEntry\""
}

func (t *UpdateMediaListEntryProgress) GetSaveMediaListEntry() *UpdateMediaListEntryProgress_SaveMediaListEntry {
	if t == nil {
		t = &UpdateMediaListEntryProgress{}
	}
	return t.SaveMediaListEntry
}

type UpdateMediaListEntryStatus struct {
	SaveMediaListEntry *UpdateMediaListEntryStatus_SaveMediaListEntry "json:\"SaveMediaListEntry,omitempty\" graphql:\"SaveMediaListEntry\""
}

func (t *UpdateMediaListEntryStatus) GetSaveMediaListEntry() *UpdateMediaListEntryStatus_SaveMediaListEntry {
	if t == nil {
		t = &UpdateMediaListEntryStatus{}
	}
	return t.SaveMediaListEntry
}

type DeleteEntry struct {
	DeleteMediaListEntry *DeleteEntry_DeleteMediaListEntry "json:\"DeleteMediaListEntry,omitempty\" graphql:\"DeleteMediaListEntry\""
}

func (t *DeleteEntry) GetDeleteMediaListEntry() *DeleteEntry_DeleteMediaListEntry {
	if t == nil {
		t = &DeleteEntry{}
	}
	return t.DeleteMediaListEntry
}

type MangaCollection struct {
	MediaListCollection *MangaCollection_MediaListCollection "json:\"MediaListCollection,omitempty\" graphql:\"MediaListCollection\""
}

func (t *MangaCollection) GetMediaListCollection() *MangaCollection_MediaListCollection {
	if t == nil {
		t = &MangaCollection{}
	}
	return t.MediaListCollection
}

type SearchBaseManga struct {
	Page *SearchBaseManga_Page "json:\"Page,omitempty\" graphql:\"Page\""
}

func (t *SearchBaseManga) GetPage() *SearchBaseManga_Page {
	if t == nil {
		t = &SearchBaseManga{}
	}
	return t.Page
}

type BaseMangaByID struct {
	Media *BaseManga "json:\"Media,omitempty\" graphql:\"Media\""
}

func (t *BaseMangaByID) GetMedia() *BaseManga {
	if t == nil {
		t = &BaseMangaByID{}
	}
	return t.Media
}

type MangaDetailsByID struct {
	Media *MangaDetailsById_Media "json:\"Media,omitempty\" graphql:\"Media\""
}

func (t *MangaDetailsByID) GetMedia() *MangaDetailsById_Media {
	if t == nil {
		t = &MangaDetailsByID{}
	}
	return t.Media
}

type ListManga struct {
	Page *ListManga_Page "json:\"Page,omitempty\" graphql:\"Page\""
}

func (t *ListManga) GetPage() *ListManga_Page {
	if t == nil {
		t = &ListManga{}
	}
	return t.Page
}

type AnimeCollection struct {
	MediaListCollection *AnimeCollection_MediaListCollection "json:\"MediaListCollection,omitempty\" graphql:\"MediaListCollection\""
}

func (t *AnimeCollection) GetMediaListCollection() *AnimeCollection_MediaListCollection {
	if t == nil {
		t = &AnimeCollection{}
	}
	return t.MediaListCollection
}

type SearchAnimeShortMedia struct {
	Page *SearchAnimeShortMedia_Page "json:\"Page,omitempty\" graphql:\"Page\""
}

func (t *SearchAnimeShortMedia) GetPage() *SearchAnimeShortMedia_Page {
	if t == nil {
		t = &SearchAnimeShortMedia{}
	}
	return t.Page
}

type BasicMediaByMalID struct {
	Media *BasicMedia "json:\"Media,omitempty\" graphql:\"Media\""
}

func (t *BasicMediaByMalID) GetMedia() *BasicMedia {
	if t == nil {
		t = &BasicMediaByMalID{}
	}
	return t.Media
}

type BasicMediaByID struct {
	Media *BasicMedia "json:\"Media,omitempty\" graphql:\"Media\""
}

func (t *BasicMediaByID) GetMedia() *BasicMedia {
	if t == nil {
		t = &BasicMediaByID{}
	}
	return t.Media
}

type BaseMediaByID struct {
	Media *BaseMedia "json:\"Media,omitempty\" graphql:\"Media\""
}

func (t *BaseMediaByID) GetMedia() *BaseMedia {
	if t == nil {
		t = &BaseMediaByID{}
	}
	return t.Media
}

type MediaDetailsByID struct {
	Media *MediaDetailsById_Media "json:\"Media,omitempty\" graphql:\"Media\""
}

func (t *MediaDetailsByID) GetMedia() *MediaDetailsById_Media {
	if t == nil {
		t = &MediaDetailsByID{}
	}
	return t.Media
}

type CompleteMediaByID struct {
	Media *CompleteMedia "json:\"Media,omitempty\" graphql:\"Media\""
}

func (t *CompleteMediaByID) GetMedia() *CompleteMedia {
	if t == nil {
		t = &CompleteMediaByID{}
	}
	return t.Media
}

type ListMedia struct {
	Page *ListMedia_Page "json:\"Page,omitempty\" graphql:\"Page\""
}

func (t *ListMedia) GetPage() *ListMedia_Page {
	if t == nil {
		t = &ListMedia{}
	}
	return t.Page
}

type ListRecentMedia struct {
	Page *ListRecentMedia_Page "json:\"Page,omitempty\" graphql:\"Page\""
}

func (t *ListRecentMedia) GetPage() *ListRecentMedia_Page {
	if t == nil {
		t = &ListRecentMedia{}
	}
	return t.Page
}

type GetViewer struct {
	Viewer *GetViewer_Viewer "json:\"Viewer,omitempty\" graphql:\"Viewer\""
}

func (t *GetViewer) GetViewer() *GetViewer_Viewer {
	if t == nil {
		t = &GetViewer{}
	}
	return t.Viewer
}

const UpdateEntryDocument = `mutation UpdateEntry ($mediaId: Int, $status: MediaListStatus, $score: Float, $progress: Int, $repeat: Int, $private: Boolean, $notes: String, $hiddenFromStatusLists: Boolean, $startedAt: FuzzyDateInput, $completedAt: FuzzyDateInput) {
	SaveMediaListEntry(mediaId: $mediaId, status: $status, score: $score, progress: $progress, repeat: $repeat, private: $private, notes: $notes, hiddenFromStatusLists: $hiddenFromStatusLists, startedAt: $startedAt, completedAt: $completedAt) {
		id
	}
}
`

func (c *Client) UpdateEntry(ctx context.Context, mediaID *int, status *MediaListStatus, score *float64, progress *int, repeat *int, private *bool, notes *string, hiddenFromStatusLists *bool, startedAt *FuzzyDateInput, completedAt *FuzzyDateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntry, error) {
	vars := map[string]interface{}{
		"mediaId":               mediaID,
		"status":                status,
		"score":                 score,
		"progress":              progress,
		"repeat":                repeat,
		"private":               private,
		"notes":                 notes,
		"hiddenFromStatusLists": hiddenFromStatusLists,
		"startedAt":             startedAt,
		"completedAt":           completedAt,
	}

	var res UpdateEntry
	if err := c.Client.Post(ctx, "UpdateEntry", UpdateEntryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateMediaListEntryDocument = `mutation UpdateMediaListEntry ($mediaId: Int, $status: MediaListStatus, $scoreRaw: Int, $progress: Int, $startedAt: FuzzyDateInput, $completedAt: FuzzyDateInput) {
	SaveMediaListEntry(mediaId: $mediaId, status: $status, scoreRaw: $scoreRaw, progress: $progress, startedAt: $startedAt, completedAt: $completedAt) {
		id
	}
}
`

func (c *Client) UpdateMediaListEntry(ctx context.Context, mediaID *int, status *MediaListStatus, scoreRaw *int, progress *int, startedAt *FuzzyDateInput, completedAt *FuzzyDateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMediaListEntry, error) {
	vars := map[string]interface{}{
		"mediaId":     mediaID,
		"status":      status,
		"scoreRaw":    scoreRaw,
		"progress":    progress,
		"startedAt":   startedAt,
		"completedAt": completedAt,
	}

	var res UpdateMediaListEntry
	if err := c.Client.Post(ctx, "UpdateMediaListEntry", UpdateMediaListEntryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateMediaListEntryProgressDocument = `mutation UpdateMediaListEntryProgress ($mediaId: Int, $progress: Int, $status: MediaListStatus) {
	SaveMediaListEntry(mediaId: $mediaId, progress: $progress, status: $status) {
		id
	}
}
`

func (c *Client) UpdateMediaListEntryProgress(ctx context.Context, mediaID *int, progress *int, status *MediaListStatus, interceptors ...clientv2.RequestInterceptor) (*UpdateMediaListEntryProgress, error) {
	vars := map[string]interface{}{
		"mediaId":  mediaID,
		"progress": progress,
		"status":   status,
	}

	var res UpdateMediaListEntryProgress
	if err := c.Client.Post(ctx, "UpdateMediaListEntryProgress", UpdateMediaListEntryProgressDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateMediaListEntryStatusDocument = `mutation UpdateMediaListEntryStatus ($mediaId: Int, $progress: Int, $status: MediaListStatus, $scoreRaw: Int) {
	SaveMediaListEntry(mediaId: $mediaId, progress: $progress, status: $status, scoreRaw: $scoreRaw) {
		id
	}
}
`

func (c *Client) UpdateMediaListEntryStatus(ctx context.Context, mediaID *int, progress *int, status *MediaListStatus, scoreRaw *int, interceptors ...clientv2.RequestInterceptor) (*UpdateMediaListEntryStatus, error) {
	vars := map[string]interface{}{
		"mediaId":  mediaID,
		"progress": progress,
		"status":   status,
		"scoreRaw": scoreRaw,
	}

	var res UpdateMediaListEntryStatus
	if err := c.Client.Post(ctx, "UpdateMediaListEntryStatus", UpdateMediaListEntryStatusDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntryDocument = `mutation DeleteEntry ($mediaListEntryId: Int) {
	DeleteMediaListEntry(id: $mediaListEntryId) {
		deleted
	}
}
`

func (c *Client) DeleteEntry(ctx context.Context, mediaListEntryID *int, interceptors ...clientv2.RequestInterceptor) (*DeleteEntry, error) {
	vars := map[string]interface{}{
		"mediaListEntryId": mediaListEntryID,
	}

	var res DeleteEntry
	if err := c.Client.Post(ctx, "DeleteEntry", DeleteEntryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const MangaCollectionDocument = `query MangaCollection ($userName: String) {
	MediaListCollection(userName: $userName, type: MANGA) {
		lists {
			status
			entries {
				id
				score(format: POINT_10)
				progress
				status
				notes
				repeat
				private
				startedAt {
					year
					month
					day
				}
				completedAt {
					year
					month
					day
				}
				media {
					... baseManga
				}
			}
		}
	}
}
fragment baseManga on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	chapters
	volumes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	relations {
		edges {
			relationType(version: 2)
			node {
				... basicManga
			}
		}
	}
}
fragment basicManga on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	chapters
	volumes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
}
`

func (c *Client) MangaCollection(ctx context.Context, userName *string, interceptors ...clientv2.RequestInterceptor) (*MangaCollection, error) {
	vars := map[string]interface{}{
		"userName": userName,
	}

	var res MangaCollection
	if err := c.Client.Post(ctx, "MangaCollection", MangaCollectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SearchBaseMangaDocument = `query SearchBaseManga ($page: Int, $perPage: Int, $sort: [MediaSort], $search: String, $status: [MediaStatus]) {
	Page(page: $page, perPage: $perPage) {
		pageInfo {
			hasNextPage
		}
		media(type: MANGA, search: $search, sort: $sort, status_in: $status, format_not: MUSIC) {
			... baseManga
		}
	}
}
fragment baseManga on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	chapters
	volumes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	relations {
		edges {
			relationType(version: 2)
			node {
				... basicManga
			}
		}
	}
}
fragment basicManga on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	chapters
	volumes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
}
`

func (c *Client) SearchBaseManga(ctx context.Context, page *int, perPage *int, sort []*MediaSort, search *string, status []*MediaStatus, interceptors ...clientv2.RequestInterceptor) (*SearchBaseManga, error) {
	vars := map[string]interface{}{
		"page":    page,
		"perPage": perPage,
		"sort":    sort,
		"search":  search,
		"status":  status,
	}

	var res SearchBaseManga
	if err := c.Client.Post(ctx, "SearchBaseManga", SearchBaseMangaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BaseMangaByIDDocument = `query BaseMangaById ($id: Int) {
	Media(id: $id, type: MANGA) {
		... baseManga
	}
}
fragment baseManga on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	chapters
	volumes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	relations {
		edges {
			relationType(version: 2)
			node {
				... basicManga
			}
		}
	}
}
fragment basicManga on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	chapters
	volumes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
}
`

func (c *Client) BaseMangaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BaseMangaByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res BaseMangaByID
	if err := c.Client.Post(ctx, "BaseMangaById", BaseMangaByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const MangaDetailsByIDDocument = `query MangaDetailsById ($id: Int) {
	Media(id: $id, type: MANGA) {
		siteUrl
		id
		duration
		genres
		rankings {
			context
			type
			rank
			year
			format
			allTime
			season
		}
		recommendations(page: 1, perPage: 8, sort: RATING_DESC) {
			edges {
				node {
					mediaRecommendation {
						id
						idMal
						siteUrl
						status(version: 2)
						season
						type
						format
						bannerImage
						chapters
						volumes
						synonyms
						isAdult
						countryOfOrigin
						meanScore
						description
						title {
							userPreferred
							romaji
							english
							native
						}
						coverImage {
							extraLarge
							large
							medium
							color
						}
						startDate {
							year
							month
							day
						}
						endDate {
							year
							month
							day
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) MangaDetailsByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*MangaDetailsByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res MangaDetailsByID
	if err := c.Client.Post(ctx, "MangaDetailsById", MangaDetailsByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListMangaDocument = `query ListManga ($page: Int, $search: String, $perPage: Int, $sort: [MediaSort], $status: [MediaStatus], $genres: [String], $averageScore_greater: Int, $season: MediaSeason, $seasonYear: Int, $format: MediaFormat) {
	Page(page: $page, perPage: $perPage) {
		pageInfo {
			hasNextPage
			total
			perPage
			currentPage
			lastPage
		}
		media(type: MANGA, search: $search, sort: $sort, status_in: $status, format: $format, genre_in: $genres, averageScore_greater: $averageScore_greater, season: $season, seasonYear: $seasonYear, format_not: MUSIC) {
			... basicManga
		}
	}
}
fragment basicManga on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	chapters
	volumes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
}
`

func (c *Client) ListManga(ctx context.Context, page *int, search *string, perPage *int, sort []*MediaSort, status []*MediaStatus, genres []*string, averageScoreGreater *int, season *MediaSeason, seasonYear *int, format *MediaFormat, interceptors ...clientv2.RequestInterceptor) (*ListManga, error) {
	vars := map[string]interface{}{
		"page":                 page,
		"search":               search,
		"perPage":              perPage,
		"sort":                 sort,
		"status":               status,
		"genres":               genres,
		"averageScore_greater": averageScoreGreater,
		"season":               season,
		"seasonYear":           seasonYear,
		"format":               format,
	}

	var res ListManga
	if err := c.Client.Post(ctx, "ListManga", ListMangaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AnimeCollectionDocument = `query AnimeCollection ($userName: String) {
	MediaListCollection(userName: $userName, type: ANIME) {
		lists {
			status
			entries {
				id
				score(format: POINT_10)
				progress
				status
				notes
				repeat
				private
				startedAt {
					year
					month
					day
				}
				completedAt {
					year
					month
					day
				}
				media {
					... baseMedia
				}
			}
		}
	}
}
fragment baseMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
	relations {
		edges {
			relationType(version: 2)
			node {
				... basicMedia
			}
		}
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) AnimeCollection(ctx context.Context, userName *string, interceptors ...clientv2.RequestInterceptor) (*AnimeCollection, error) {
	vars := map[string]interface{}{
		"userName": userName,
	}

	var res AnimeCollection
	if err := c.Client.Post(ctx, "AnimeCollection", AnimeCollectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SearchAnimeShortMediaDocument = `query SearchAnimeShortMedia ($page: Int, $perPage: Int, $sort: [MediaSort], $search: String, $status: [MediaStatus]) {
	Page(page: $page, perPage: $perPage) {
		pageInfo {
			hasNextPage
		}
		media(type: ANIME, search: $search, sort: $sort, status_in: $status, isAdult: false, format_not: MUSIC) {
			... basicMedia
		}
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) SearchAnimeShortMedia(ctx context.Context, page *int, perPage *int, sort []*MediaSort, search *string, status []*MediaStatus, interceptors ...clientv2.RequestInterceptor) (*SearchAnimeShortMedia, error) {
	vars := map[string]interface{}{
		"page":    page,
		"perPage": perPage,
		"sort":    sort,
		"search":  search,
		"status":  status,
	}

	var res SearchAnimeShortMedia
	if err := c.Client.Post(ctx, "SearchAnimeShortMedia", SearchAnimeShortMediaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BasicMediaByMalIDDocument = `query BasicMediaByMalId ($id: Int) {
	Media(idMal: $id, type: ANIME) {
		... basicMedia
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) BasicMediaByMalID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BasicMediaByMalID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res BasicMediaByMalID
	if err := c.Client.Post(ctx, "BasicMediaByMalId", BasicMediaByMalIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BasicMediaByIDDocument = `query BasicMediaById ($id: Int) {
	Media(id: $id, type: ANIME) {
		... basicMedia
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) BasicMediaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BasicMediaByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res BasicMediaByID
	if err := c.Client.Post(ctx, "BasicMediaById", BasicMediaByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BaseMediaByIDDocument = `query BaseMediaById ($id: Int) {
	Media(id: $id, type: ANIME) {
		... baseMedia
	}
}
fragment baseMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
	relations {
		edges {
			relationType(version: 2)
			node {
				... basicMedia
			}
		}
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) BaseMediaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*BaseMediaByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res BaseMediaByID
	if err := c.Client.Post(ctx, "BaseMediaById", BaseMediaByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const MediaDetailsByIDDocument = `query MediaDetailsById ($id: Int) {
	Media(id: $id, type: ANIME) {
		siteUrl
		id
		duration
		genres
		averageScore
		popularity
		meanScore
		description
		trailer {
			id
			site
			thumbnail
		}
		startDate {
			year
			month
			day
		}
		endDate {
			year
			month
			day
		}
		studios(isMain: true) {
			nodes {
				name
			}
		}
		rankings {
			context
			type
			rank
			year
			format
			allTime
			season
		}
		recommendations(page: 1, perPage: 8, sort: RATING_DESC) {
			edges {
				node {
					mediaRecommendation {
						id
						idMal
						siteUrl
						status(version: 2)
						isAdult
						season
						type
						format
						meanScore
						description
						episodes
						trailer {
							id
							site
							thumbnail
						}
						startDate {
							year
							month
							day
						}
						coverImage {
							extraLarge
							large
							medium
							color
						}
						bannerImage
						title {
							romaji
							english
							native
							userPreferred
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) MediaDetailsByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*MediaDetailsByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res MediaDetailsByID
	if err := c.Client.Post(ctx, "MediaDetailsById", MediaDetailsByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CompleteMediaByIDDocument = `query CompleteMediaById ($id: Int) {
	Media(id: $id, type: ANIME) {
		... completeMedia
	}
}
fragment completeMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	duration
	genres
	averageScore
	popularity
	meanScore
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
	relations {
		edges {
			relationType(version: 2)
			node {
				... basicMedia
			}
		}
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) CompleteMediaByID(ctx context.Context, id *int, interceptors ...clientv2.RequestInterceptor) (*CompleteMediaByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res CompleteMediaByID
	if err := c.Client.Post(ctx, "CompleteMediaById", CompleteMediaByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListMediaDocument = `query ListMedia ($page: Int, $search: String, $perPage: Int, $sort: [MediaSort], $status: [MediaStatus], $genres: [String], $averageScore_greater: Int, $season: MediaSeason, $seasonYear: Int, $format: MediaFormat) {
	Page(page: $page, perPage: $perPage) {
		pageInfo {
			hasNextPage
			total
			perPage
			currentPage
			lastPage
		}
		media(type: ANIME, search: $search, sort: $sort, status_in: $status, isAdult: false, format: $format, genre_in: $genres, averageScore_greater: $averageScore_greater, season: $season, seasonYear: $seasonYear, format_not: MUSIC) {
			... basicMedia
		}
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) ListMedia(ctx context.Context, page *int, search *string, perPage *int, sort []*MediaSort, status []*MediaStatus, genres []*string, averageScoreGreater *int, season *MediaSeason, seasonYear *int, format *MediaFormat, interceptors ...clientv2.RequestInterceptor) (*ListMedia, error) {
	vars := map[string]interface{}{
		"page":                 page,
		"search":               search,
		"perPage":              perPage,
		"sort":                 sort,
		"status":               status,
		"genres":               genres,
		"averageScore_greater": averageScoreGreater,
		"season":               season,
		"seasonYear":           seasonYear,
		"format":               format,
	}

	var res ListMedia
	if err := c.Client.Post(ctx, "ListMedia", ListMediaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListRecentMediaDocument = `query ListRecentMedia ($page: Int, $perPage: Int, $airingAt_greater: Int, $airingAt_lesser: Int) {
	Page(page: $page, perPage: $perPage) {
		pageInfo {
			hasNextPage
			total
			perPage
			currentPage
			lastPage
		}
		airingSchedules(notYetAired: false, sort: TIME_DESC, airingAt_greater: $airingAt_greater, airingAt_lesser: $airingAt_lesser) {
			id
			airingAt
			episode
			timeUntilAiring
			media {
				... basicMedia
			}
		}
	}
}
fragment basicMedia on Media {
	id
	idMal
	siteUrl
	status(version: 2)
	season
	type
	format
	bannerImage
	episodes
	synonyms
	isAdult
	countryOfOrigin
	meanScore
	description
	trailer {
		id
		site
		thumbnail
	}
	title {
		userPreferred
		romaji
		english
		native
	}
	coverImage {
		extraLarge
		large
		medium
		color
	}
	startDate {
		year
		month
		day
	}
	endDate {
		year
		month
		day
	}
	nextAiringEpisode {
		airingAt
		timeUntilAiring
		episode
	}
}
`

func (c *Client) ListRecentMedia(ctx context.Context, page *int, perPage *int, airingAtGreater *int, airingAtLesser *int, interceptors ...clientv2.RequestInterceptor) (*ListRecentMedia, error) {
	vars := map[string]interface{}{
		"page":             page,
		"perPage":          perPage,
		"airingAt_greater": airingAtGreater,
		"airingAt_lesser":  airingAtLesser,
	}

	var res ListRecentMedia
	if err := c.Client.Post(ctx, "ListRecentMedia", ListRecentMediaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetViewerDocument = `query GetViewer {
	Viewer {
		name
		avatar {
			large
			medium
		}
		bannerImage
		isBlocked
		options {
			displayAdultContent
			airingNotifications
			profileColor
		}
	}
}
`

func (c *Client) GetViewer(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetViewer, error) {
	vars := map[string]interface{}{}

	var res GetViewer
	if err := c.Client.Post(ctx, "GetViewer", GetViewerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	UpdateEntryDocument:                  "UpdateEntry",
	UpdateMediaListEntryDocument:         "UpdateMediaListEntry",
	UpdateMediaListEntryProgressDocument: "UpdateMediaListEntryProgress",
	UpdateMediaListEntryStatusDocument:   "UpdateMediaListEntryStatus",
	DeleteEntryDocument:                  "DeleteEntry",
	MangaCollectionDocument:              "MangaCollection",
	SearchBaseMangaDocument:              "SearchBaseManga",
	BaseMangaByIDDocument:                "BaseMangaById",
	MangaDetailsByIDDocument:             "MangaDetailsById",
	ListMangaDocument:                    "ListManga",
	AnimeCollectionDocument:              "AnimeCollection",
	SearchAnimeShortMediaDocument:        "SearchAnimeShortMedia",
	BasicMediaByMalIDDocument:            "BasicMediaByMalId",
	BasicMediaByIDDocument:               "BasicMediaById",
	BaseMediaByIDDocument:                "BaseMediaById",
	MediaDetailsByIDDocument:             "MediaDetailsById",
	CompleteMediaByIDDocument:            "CompleteMediaById",
	ListMediaDocument:                    "ListMedia",
	ListRecentMediaDocument:              "ListRecentMedia",
	GetViewerDocument:                    "GetViewer",
}
