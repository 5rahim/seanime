{
  "id": "comick-custom",
  "name": "ComicK (Custom)",
  "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.",
  "version": "0.1.0",
  "type": "manga-provider",
  "manifestURI": "http://127.0.0.1:43210/custom-comick.json",
  "language": "typescript",
  "author": "Me",
  "meta": {
    "website": "https://seanime.rahim.app"
  },
  "payload": "/// <reference path=\"./manga-provider.d.ts\" />\n\nclass Provider {\n\n    // credit to Anify\n    private api = \"https://api.comick.fun\"\n\n    async search(opts: QueryOptions): Promise<SearchResult[]> {\n        console.log(this.api, opts.query)\n\n        const requestRes = await fetch(`${this.api}/v1.0/search?q=${encodeURIComponent(opts.query)}&limit=25&page=1`, {\n            method: \"get\",\n        })\n        const comickRes = await requestRes.json() as ComickSearchResult[]\n\n        const ret: SearchResult[] = []\n\n        for (const res of comickRes) {\n\n            let cover: any = res.md_covers ? res.md_covers[0] : null\n            if (cover && cover.b2key != undefined) {\n                cover = \"https://meo.comick.pictures/\" + cover.b2key\n            }\n\n            ret.push({\n                id: res.hid,\n                title: res.title ?? res.slug,\n                synonyms: res.md_titles?.map(t => t.title) ?? {},\n                year: res.year ?? 0,\n                image: cover,\n            })\n        }\n\n        return ret\n    }\n\n    async findChapters(id: string): Promise<ChapterDetails[]> {\n\n        console.log(\"Fetching chapters\", id)\n\n        const chapterList: ChapterDetails[] = []\n\n        const data = (await (await fetch(`${this.api}/comic/${id}/chapters?lang=en&page=0&limit=1000000`))?.json()) as { chapters: ComickChapter[] }\n\n        const chapters: ChapterDetails[] = []\n\n        for (const chapter of data.chapters) {\n\n            if (!chapter.chap) {\n                continue\n            }\n\n            let title = \"Chapter \" + this.padNum(chapter.chap, 2) + \" \"\n\n            if (title.length === 0) {\n                if (!chapter.title) {\n                    title = \"Oneshot\"\n                } else {\n                    title = chapter.title\n                }\n            }\n\n            let canPush = true\n            for (let i = 0; i < chapters.length; i++) {\n                if (chapters[i].title?.trim() === title?.trim()) {\n                    canPush = false\n                }\n            }\n\n            if (canPush) {\n                if (chapter.lang === \"en\") {\n                    chapters.push({\n                        url: `${this.api}/comic/${id}/chapter/${chapter.hid}`,\n                        index: 0,\n                        id: chapter.hid,\n                        title: title?.trim(),\n                        chapter: chapter.chap,\n                        rating: chapter.up_count - chapter.down_count,\n                        updatedAt: chapter.updated_at,\n                    })\n                }\n            }\n        }\n\n        chapters.reverse()\n\n        for (let i = 0; i < chapters.length; i++) {\n            chapters[i].index = i\n        }\n\n        console.log(chapters.map(c => c.chapter))\n\n        return chapters\n    }\n\n    async findChapterPages(id: string): Promise<ChapterPage[]> {\n\n        const data = (await (await fetch(`${this.api}/chapter/${id}`))?.json()) as {\n            chapter: { md_images: { vol: any; w: number; h: number; b2key: string }[] }\n        }\n\n        const pages: ChapterPage[] = []\n\n        data.chapter.md_images.map((image, index: number) => {\n            pages.push({\n                url: `https://meo.comick.pictures/${image.b2key}?width=${image.w}`,\n                index: index,\n                headers: {},\n            })\n        })\n\n        return pages\n    }\n\n    padNum(number: string, places: number): string {\n        let range = number.split(\"-\")\n        range = range.map((chapter) => {\n            chapter = chapter.trim()\n            const digits = chapter.split(\".\")[0].length\n            return \"0\".repeat(Math.max(0, places - digits)) + chapter\n        })\n        return range.join(\"-\")\n    }\n\n}\n\ninterface ComickSearchResult {\n    title: string;\n    id: number;\n    hid: string;\n    slug: string;\n    year?: number;\n    rating: string;\n    rating_count: number;\n    follow_count: number;\n    user_follow_count: number;\n    content_rating: string;\n    created_at: string;\n    demographic: number;\n    md_titles: { title: string }[];\n    md_covers: { vol: any; w: number; h: number; b2key: string }[];\n    highlight: string;\n}\n\ninterface Comic {\n    id: number;\n    hid: string;\n    title: string;\n    country: string;\n    status: number;\n    links: {\n        al: string;\n        ap: string;\n        bw: string;\n        kt: string;\n        mu: string;\n        amz: string;\n        cdj: string;\n        ebj: string;\n        mal: string;\n        raw: string;\n    };\n    last_chapter: any;\n    chapter_count: number;\n    demographic: number;\n    hentai: boolean;\n    user_follow_count: number;\n    follow_rank: number;\n    comment_count: number;\n    follow_count: number;\n    desc: string;\n    parsed: string;\n    slug: string;\n    mismatch: any;\n    year: number;\n    bayesian_rating: any;\n    rating_count: number;\n    content_rating: string;\n    translation_completed: boolean;\n    relate_from: Array<any>;\n    mies: any;\n    md_titles: { title: string }[];\n    md_comic_md_genres: { md_genres: { name: string; type: string | null; slug: string; group: string } }[];\n    mu_comics: {\n        licensed_in_english: any;\n        mu_comic_categories: {\n            mu_categories: { title: string; slug: string };\n            positive_vote: number;\n            negative_vote: number;\n        }[];\n    };\n    md_covers: { vol: any; w: number; h: number; b2key: string }[];\n    iso639_1: string;\n    lang_name: string;\n    lang_native: string;\n}\n\ninterface ComickChapter {\n    id: number;\n    chap: string;\n    title: string;\n    vol: string | null;\n    lang: string;\n    created_at: string;\n    updated_at: string;\n    up_count: number;\n    down_count: number;\n    group_name: any;\n    hid: string;\n    identities: any;\n    md_chapter_groups: { md_groups: { title: string; slug: string } }[];\n}\n"
}
