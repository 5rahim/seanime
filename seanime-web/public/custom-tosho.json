{
  "id": "custom-tosho",
  "name": "AnimeTosho (Custom)",
  "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation.",
  "version": "0.7.0",
  "type": "anime-torrent-provider",
  "manifestURI": "http://127.0.0.1:43210/custom-tosho.json",
  "language": "typescript",
  "author": "Me",
  "meta": {
    "website": "https://seanime.rahim.app"
  },
  "userConfig": {
    "requiresConfig": true,
    "version": 3,
    "fields": [
      {
        "name": "api",
        "label": "API URL",
        "type": "text",
        "default": "https://feed.animetosho.org/json"
      },
      {
        "name": "withSmartSearch",
        "label": "Enable Smart Search",
        "type": "switch",
        "default": "true"
      },
      {
        "name": "type",
        "label": "Provider Type",
        "type": "select",
        "default": "main",
        "options": [
          {
            "label": "Main",
            "value": "main"
          },
          {
            "label": "Special",
            "value": "special"
          }
        ]
      }
    ]
  },
  "payload": "/// <reference path=\"./anime-torrent-provider.d.ts\" />\n\nclass Provider {\n\n    api = \"{{api}}\"\n    withSmartSearch = \"{{withSmartSearch}}\"\n    type = \"{{type}}\"\n\n    getSettings(): AnimeProviderSettings {\n        return {\n            canSmartSearch: this.withSmartSearch === \"true\",\n            smartSearchFilters: [\"batch\", \"episodeNumber\", \"resolution\"],\n            supportsAdult: false,\n            type: this.type as AnimeProviderType,\n        }\n    }\n\n    async search(opts: AnimeSearchOptions): Promise<AnimeTorrent[]> {\n        const query = `?q=${encodeURIComponent(opts.query)}&only_tor=1`\n        console.log(query)\n        const torrents = await this.fetchTorrents(query)\n        return torrents.map(t => this.toAnimeTorrent(t))\n    }\n\n    async smartSearch(opts: AnimeSmartSearchOptions): Promise<AnimeTorrent[]> {\n        const ret: AnimeTorrent[] = []\n\n        if (opts.batch) {\n            if (!opts.anidbAID) return []\n\n            let torrents = await this.searchByAID(opts.anidbAID, opts.resolution)\n\n            if (!(opts.media.format == \"MOVIE\" || opts.media.episodeCount == 1)) {\n                torrents = torrents.filter(t => t.num_files > 1)\n            }\n\n            for (const torrent of torrents) {\n                const t = this.toAnimeTorrent(torrent)\n                t.isBatch = true\n                ret.push()\n            }\n\n            return ret\n        }\n\n        if (!opts.anidbEID) return []\n\n        const torrents = await this.searchByEID(opts.anidbEID, opts.resolution)\n\n        for (const torrent of torrents) {\n            ret.push(this.toAnimeTorrent(torrent))\n        }\n\n        return ret\n    }\n\n    async getTorrentInfoHash(torrent: AnimeTorrent): Promise<string> {\n        return torrent.infoHash || \"\"\n    }\n\n    async getTorrentMagnetLink(torrent: AnimeTorrent): Promise<string> {\n        return torrent.magnetLink || \"\"\n    }\n\n    async getLatest(): Promise<AnimeTorrent[]> {\n        const query = `?q=&only_tor=1`\n        const torrents = await this.fetchTorrents(query)\n        return torrents.map(t => this.toAnimeTorrent(t))\n    }\n\n    async searchByAID(aid: number, quality: string): Promise<ToshoTorrent[]> {\n        const q = encodeURIComponent(this.formatCommonQuery(quality))\n        const query = `?qx=1&order=size-d&aid=${aid}&q=${q}`\n        return this.fetchTorrents(query)\n    }\n\n    async searchByEID(eid: number, quality: string): Promise<ToshoTorrent[]> {\n        const q = encodeURIComponent(this.formatCommonQuery(quality))\n        const query = `?qx=1&eid=${eid}&q=${q}`\n        return this.fetchTorrents(query)\n    }\n\n    async fetchTorrents(url: string): Promise<ToshoTorrent[]> {\n        const furl = `${this.api}${url}`\n\n        try {\n            const response = await fetch(furl)\n\n            if (!response.ok) {\n                throw new Error(`Failed to fetch torrents, ${response.statusText}`)\n            }\n\n            const torrents: ToshoTorrent[] = await response.json()\n\n            return torrents.map(t => {\n                if (t.seeders > 30000) {\n                    t.seeders = 0\n                }\n                if (t.leechers > 30000) {\n                    t.leechers = 0\n                }\n                return t\n            })\n        }\n        catch (error) {\n            throw new Error(`Error fetching torrents: ${error}`)\n        }\n    }\n\n    formatCommonQuery(quality: string): string {\n        if (quality === \"\") {\n            return \"\"\n        }\n\n        quality = quality.replace(/p$/, \"\")\n\n        const resolutions = [\"480\", \"540\", \"720\", \"1080\"]\n\n        const others = resolutions.filter(r => r !== quality)\n        const othersStrs = others.map(r => `!\"${r}\"`)\n\n        return `(\"${quality}\" ${othersStrs.join(\" \")})`\n    }\n\n    toAnimeTorrent(torrent: ToshoTorrent): AnimeTorrent {\n        return {\n            name: torrent.title,\n            date: new Date(torrent.timestamp * 1000).toISOString(),\n            size: torrent.total_size,\n            formattedSize: \"\",\n            seeders: torrent.seeders,\n            leechers: torrent.leechers,\n            downloadCount: torrent.torrent_download_count,\n            link: torrent.link,\n            downloadUrl: torrent.torrent_url,\n            magnetLink: torrent.magnet_uri,\n            infoHash: torrent.info_hash,\n            resolution: \"\",\n            isBatch: false,\n            isBestRelease: false,\n            confirmed: true,\n        }\n    }\n}\n\ntype ToshoTorrent = {\n    id: number\n    title: string\n    link: string\n    timestamp: number\n    status: string\n    tosho_id?: number\n    nyaa_id?: number\n    nyaa_subdom?: any\n    anidex_id?: number\n    torrent_url: string\n    info_hash: string\n    info_hash_v2?: string\n    magnet_uri: string\n    seeders: number\n    leechers: number\n    torrent_download_count: number\n    tracker_updated?: any\n    nzb_url?: string\n    total_size: number\n    num_files: number\n    anidb_aid: number\n    anidb_eid: number\n    anidb_fid: number\n    article_url: string\n    article_title: string\n    website_url: string\n}\n"
}
