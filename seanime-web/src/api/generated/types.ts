// This code was generated by codegen/main.go. DO NOT EDIT.

export type Nullish<T> = T | null | undefined

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Anilist
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  Airing schedule sort enums
 */
export type AL_AiringSort = "ID" |
    "ID_DESC" |
    "MEDIA_ID" |
    "MEDIA_ID_DESC" |
    "TIME" |
    "TIME_DESC" |
    "EPISODE" |
    "EPISODE_DESC"

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeCollection = {
    MediaListCollection?: AL_AnimeCollection_MediaListCollection
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeCollection_MediaListCollection = {
    lists?: Array<AL_AnimeCollection_MediaListCollection_Lists>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeCollection_MediaListCollection_Lists = {
    status?: AL_MediaListStatus
    name?: string
    isCustomList?: boolean
    entries?: Array<AL_AnimeCollection_MediaListCollection_Lists_Entries>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeCollection_MediaListCollection_Lists_Entries = {
    id: number
    score?: number
    progress?: number
    status?: AL_MediaListStatus
    notes?: string
    repeat?: number
    private?: boolean
    startedAt?: AL_AnimeCollection_MediaListCollection_Lists_Entries_StartedAt
    completedAt?: AL_AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt
    media?: AL_BaseAnime
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeCollection_MediaListCollection_Lists_Entries_CompletedAt = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeCollection_MediaListCollection_Lists_Entries_StartedAt = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media = {
    siteUrl?: string
    id: number
    duration?: number
    genres?: Array<string>
    averageScore?: number
    popularity?: number
    meanScore?: number
    description?: string
    trailer?: AL_AnimeDetailsById_Media_Trailer
    startDate?: AL_AnimeDetailsById_Media_StartDate
    endDate?: AL_AnimeDetailsById_Media_EndDate
    studios?: AL_AnimeDetailsById_Media_Studios
    characters?: AL_AnimeDetailsById_Media_Characters
    staff?: AL_AnimeDetailsById_Media_Staff
    rankings?: Array<AL_AnimeDetailsById_Media_Rankings>
    recommendations?: AL_AnimeDetailsById_Media_Recommendations
    relations?: AL_AnimeDetailsById_Media_Relations
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Characters = {
    edges?: Array<AL_AnimeDetailsById_Media_Characters_Edges>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Characters_Edges = {
    id?: number
    role?: AL_CharacterRole
    name?: string
    node?: AL_BaseCharacter
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_EndDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Rankings = {
    context: string
    type: AL_MediaRankType
    rank: number
    year?: number
    format: AL_MediaFormat
    allTime?: boolean
    season?: AL_MediaSeason
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations = {
    edges?: Array<AL_AnimeDetailsById_Media_Recommendations_Edges>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations_Edges = {
    node?: AL_AnimeDetailsById_Media_Recommendations_Edges_Node
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations_Edges_Node = {
    mediaRecommendation?: AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation = {
    id: number
    idMal?: number
    siteUrl?: string
    status?: AL_MediaStatus
    isAdult?: boolean
    season?: AL_MediaSeason
    type?: AL_MediaType
    format?: AL_MediaFormat
    meanScore?: number
    description?: string
    episodes?: number
    trailer?: AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer
    startDate?: AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate
    coverImage?: AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage
    bannerImage?: string
    title?: AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage = {
    extraLarge?: string
    large?: string
    medium?: string
    color?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title = {
    romaji?: string
    english?: string
    native?: string
    userPreferred?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Trailer = {
    id?: string
    site?: string
    thumbnail?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Relations = {
    edges?: Array<AL_AnimeDetailsById_Media_Relations_Edges>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Relations_Edges = {
    relationType?: AL_MediaRelation
    node?: AL_BaseAnime
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Staff = {
    edges?: Array<AL_AnimeDetailsById_Media_Staff_Edges>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Staff_Edges = {
    role?: string
    node?: AL_AnimeDetailsById_Media_Staff_Edges_Node
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Staff_Edges_Node = {
    name?: AL_AnimeDetailsById_Media_Staff_Edges_Node_Name
    id: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Staff_Edges_Node_Name = {
    full?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_StartDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Studios = {
    nodes?: Array<AL_AnimeDetailsById_Media_Studios_Nodes>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Studios_Nodes = {
    name: string
    id: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_AnimeDetailsById_Media_Trailer = {
    id?: string
    site?: string
    thumbnail?: string
}

/**
 * - Filepath: internal/api/anilist/collection_helper.go
 * - Filename: collection_helper.go
 * - Package: anilist
 */
export type AL_AnimeListEntry = AL_AnimeCollection_MediaListCollection_Lists_Entries

/**
 * - Filepath: internal/api/anilist/stats.go
 * - Filename: stats.go
 * - Package: anilist
 */
export type AL_AnimeStats = {
    count: number
    minutesWatched: number
    episodesWatched: number
    meanScore: number
    genres?: Array<AL_UserGenreStats>
    formats?: Array<AL_UserFormatStats>
    statuses?: Array<AL_UserStatusStats>
    studios?: Array<AL_UserStudioStats>
    scores?: Array<AL_UserScoreStats>
    startYears?: Array<AL_UserStartYearStats>
    releaseYears?: Array<AL_UserReleaseYearStats>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseAnime = {
    id: number
    idMal?: number
    siteUrl?: string
    status?: AL_MediaStatus
    season?: AL_MediaSeason
    type?: AL_MediaType
    format?: AL_MediaFormat
    bannerImage?: string
    episodes?: number
    synonyms?: Array<string>
    isAdult?: boolean
    countryOfOrigin?: string
    meanScore?: number
    description?: string
    genres?: Array<string>
    duration?: number
    trailer?: AL_BaseAnime_Trailer
    title?: AL_BaseAnime_Title
    coverImage?: AL_BaseAnime_CoverImage
    startDate?: AL_BaseAnime_StartDate
    endDate?: AL_BaseAnime_EndDate
    nextAiringEpisode?: AL_BaseAnime_NextAiringEpisode
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseAnime_CoverImage = {
    extraLarge?: string
    large?: string
    medium?: string
    color?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseAnime_EndDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseAnime_NextAiringEpisode = {
    airingAt: number
    timeUntilAiring: number
    episode: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseAnime_StartDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseAnime_Title = {
    userPreferred?: string
    romaji?: string
    english?: string
    native?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseAnime_Trailer = {
    id?: string
    site?: string
    thumbnail?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseCharacter = {
    id: number
    isFavourite: boolean
    gender?: string
    age?: string
    dateOfBirth?: AL_BaseCharacter_DateOfBirth
    name?: AL_BaseCharacter_Name
    image?: AL_BaseCharacter_Image
    description?: string
    siteUrl?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseCharacter_DateOfBirth = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseCharacter_Image = {
    large?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseCharacter_Name = {
    full?: string
    native?: string
    alternative?: Array<string>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseManga = {
    id: number
    idMal?: number
    siteUrl?: string
    status?: AL_MediaStatus
    season?: AL_MediaSeason
    type?: AL_MediaType
    format?: AL_MediaFormat
    bannerImage?: string
    chapters?: number
    volumes?: number
    synonyms?: Array<string>
    isAdult?: boolean
    countryOfOrigin?: string
    meanScore?: number
    description?: string
    genres?: Array<string>
    title?: AL_BaseManga_Title
    coverImage?: AL_BaseManga_CoverImage
    startDate?: AL_BaseManga_StartDate
    endDate?: AL_BaseManga_EndDate
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseManga_CoverImage = {
    extraLarge?: string
    large?: string
    medium?: string
    color?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseManga_EndDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseManga_StartDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_BaseManga_Title = {
    userPreferred?: string
    romaji?: string
    english?: string
    native?: string
}

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  The role the character plays in the media
 */
export type AL_CharacterRole = "MAIN" | "SUPPORTING" | "BACKGROUND"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  Date object that allows for incomplete date values (fuzzy)
 */
export type AL_FuzzyDateInput = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_GetViewer_Viewer = {
    name: string
    avatar?: AL_GetViewer_Viewer_Avatar
    bannerImage?: string
    isBlocked?: boolean
    options?: AL_GetViewer_Viewer_Options
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_GetViewer_Viewer_Avatar = {
    large?: string
    medium?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_GetViewer_Viewer_Options = {
    displayAdultContent?: boolean
    airingNotifications?: boolean
    profileColor?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListAnime = {
    Page?: AL_ListAnime_Page
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListAnime_Page = {
    pageInfo?: AL_ListAnime_Page_PageInfo
    media?: Array<AL_BaseAnime>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListAnime_Page_PageInfo = {
    hasNextPage?: boolean
    total?: number
    perPage?: number
    currentPage?: number
    lastPage?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListManga = {
    Page?: AL_ListManga_Page
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListManga_Page = {
    pageInfo?: AL_ListManga_Page_PageInfo
    media?: Array<AL_BaseManga>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListManga_Page_PageInfo = {
    hasNextPage?: boolean
    total?: number
    perPage?: number
    currentPage?: number
    lastPage?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListRecentAnime = {
    Page?: AL_ListRecentAnime_Page
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListRecentAnime_Page = {
    pageInfo?: AL_ListRecentAnime_Page_PageInfo
    airingSchedules?: Array<AL_ListRecentAnime_Page_AiringSchedules>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListRecentAnime_Page_AiringSchedules = {
    id: number
    airingAt: number
    episode: number
    timeUntilAiring: number
    media?: AL_BaseAnime
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_ListRecentAnime_Page_PageInfo = {
    hasNextPage?: boolean
    total?: number
    perPage?: number
    currentPage?: number
    lastPage?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaCollection = {
    MediaListCollection?: AL_MangaCollection_MediaListCollection
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaCollection_MediaListCollection = {
    lists?: Array<AL_MangaCollection_MediaListCollection_Lists>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaCollection_MediaListCollection_Lists = {
    status?: AL_MediaListStatus
    name?: string
    isCustomList?: boolean
    entries?: Array<AL_MangaCollection_MediaListCollection_Lists_Entries>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaCollection_MediaListCollection_Lists_Entries = {
    id: number
    score?: number
    progress?: number
    status?: AL_MediaListStatus
    notes?: string
    repeat?: number
    private?: boolean
    startedAt?: AL_MangaCollection_MediaListCollection_Lists_Entries_StartedAt
    completedAt?: AL_MangaCollection_MediaListCollection_Lists_Entries_CompletedAt
    media?: AL_BaseManga
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaCollection_MediaListCollection_Lists_Entries_CompletedAt = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaCollection_MediaListCollection_Lists_Entries_StartedAt = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media = {
    siteUrl?: string
    id: number
    duration?: number
    genres?: Array<string>
    rankings?: Array<AL_MangaDetailsById_Media_Rankings>
    characters?: AL_MangaDetailsById_Media_Characters
    recommendations?: AL_MangaDetailsById_Media_Recommendations
    relations?: AL_MangaDetailsById_Media_Relations
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Characters = {
    edges?: Array<AL_MangaDetailsById_Media_Characters_Edges>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Characters_Edges = {
    id?: number
    role?: AL_CharacterRole
    name?: string
    node?: AL_BaseCharacter
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Rankings = {
    context: string
    type: AL_MediaRankType
    rank: number
    year?: number
    format: AL_MediaFormat
    allTime?: boolean
    season?: AL_MediaSeason
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations = {
    edges?: Array<AL_MangaDetailsById_Media_Recommendations_Edges>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations_Edges = {
    node?: AL_MangaDetailsById_Media_Recommendations_Edges_Node
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations_Edges_Node = {
    mediaRecommendation?: AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation = {
    id: number
    idMal?: number
    siteUrl?: string
    status?: AL_MediaStatus
    season?: AL_MediaSeason
    type?: AL_MediaType
    format?: AL_MediaFormat
    bannerImage?: string
    chapters?: number
    volumes?: number
    synonyms?: Array<string>
    isAdult?: boolean
    countryOfOrigin?: string
    meanScore?: number
    description?: string
    title?: AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title
    coverImage?: AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage
    startDate?: AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate
    endDate?: AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_CoverImage = {
    extraLarge?: string
    large?: string
    medium?: string
    color?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_EndDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_StartDate = {
    year?: number
    month?: number
    day?: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Recommendations_Edges_Node_MediaRecommendation_Title = {
    userPreferred?: string
    romaji?: string
    english?: string
    native?: string
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Relations = {
    edges?: Array<AL_MangaDetailsById_Media_Relations_Edges>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_MangaDetailsById_Media_Relations_Edges = {
    relationType?: AL_MediaRelation
    node?: AL_BaseManga
}

/**
 * - Filepath: internal/api/anilist/manga.go
 * - Filename: manga.go
 * - Package: anilist
 */
export type AL_MangaListEntry = AL_MangaCollection_MediaListCollection_Lists_Entries

/**
 * - Filepath: internal/api/anilist/stats.go
 * - Filename: stats.go
 * - Package: anilist
 */
export type AL_MangaStats = {
    count: number
    chaptersRead: number
    meanScore: number
    genres?: Array<AL_UserGenreStats>
    statuses?: Array<AL_UserStatusStats>
    scores?: Array<AL_UserScoreStats>
    startYears?: Array<AL_UserStartYearStats>
    releaseYears?: Array<AL_UserReleaseYearStats>
}

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  The format the media was released in
 */
export type AL_MediaFormat = "TV" |
    "TV_SHORT" |
    "MOVIE" |
    "SPECIAL" |
    "OVA" |
    "ONA" |
    "MUSIC" |
    "MANGA" |
    "NOVEL" |
    "ONE_SHOT"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  Media list watching/reading status enum.
 */
export type AL_MediaListStatus = "CURRENT" |
    "PLANNING" |
    "COMPLETED" |
    "DROPPED" |
    "PAUSED" |
    "REPEATING"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  The type of ranking
 */
export type AL_MediaRankType = "RATED" | "POPULAR"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  Type of relation media has to its parent.
 */
export type AL_MediaRelation = "ADAPTATION" |
    "PREQUEL" |
    "SEQUEL" |
    "PARENT" |
    "SIDE_STORY" |
    "CHARACTER" |
    "SUMMARY" |
    "ALTERNATIVE" |
    "SPIN_OFF" |
    "OTHER" |
    "SOURCE" |
    "COMPILATION" |
    "CONTAINS"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 */
export type AL_MediaSeason = "WINTER" | "SPRING" | "SUMMER" | "FALL"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  Media sort enums
 */
export type AL_MediaSort = "ID" |
    "ID_DESC" |
    "TITLE_ROMAJI" |
    "TITLE_ROMAJI_DESC" |
    "TITLE_ENGLISH" |
    "TITLE_ENGLISH_DESC" |
    "TITLE_NATIVE" |
    "TITLE_NATIVE_DESC" |
    "TYPE" |
    "TYPE_DESC" |
    "FORMAT" |
    "FORMAT_DESC" |
    "START_DATE" |
    "START_DATE_DESC" |
    "END_DATE" |
    "END_DATE_DESC" |
    "SCORE" |
    "SCORE_DESC" |
    "POPULARITY" |
    "POPULARITY_DESC" |
    "TRENDING" |
    "TRENDING_DESC" |
    "EPISODES" |
    "EPISODES_DESC" |
    "DURATION" |
    "DURATION_DESC" |
    "STATUS" |
    "STATUS_DESC" |
    "CHAPTERS" |
    "CHAPTERS_DESC" |
    "VOLUMES" |
    "VOLUMES_DESC" |
    "UPDATED_AT" |
    "UPDATED_AT_DESC" |
    "SEARCH_MATCH" |
    "FAVOURITES" |
    "FAVOURITES_DESC"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  The current releasing status of the media
 */
export type AL_MediaStatus = "FINISHED" | "RELEASING" | "NOT_YET_RELEASED" | "CANCELLED" | "HIATUS"

/**
 * - Filepath: internal/api/anilist/models_gen.go
 * - Filename: models_gen.go
 * - Package: anilist
 * @description
 *  Media type enum, anime or manga.
 */
export type AL_MediaType = "ANIME" | "MANGA"

/**
 * - Filepath: internal/api/anilist/stats.go
 * - Filename: stats.go
 * - Package: anilist
 */
export type AL_Stats = {
    animeStats?: AL_AnimeStats
    mangaStats?: AL_MangaStats
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_StudioDetails = {
    Studio?: AL_StudioDetails_Studio
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_StudioDetails_Studio = {
    id: number
    isAnimationStudio: boolean
    name: string
    media?: AL_StudioDetails_Studio_Media
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_StudioDetails_Studio_Media = {
    nodes?: Array<AL_BaseAnime>
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserFormatStats = {
    format?: AL_MediaFormat
    meanScore: number
    count: number
    minutesWatched: number
    mediaIds?: Array<number>
    chaptersRead: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserGenreStats = {
    genre?: string
    meanScore: number
    count: number
    minutesWatched: number
    mediaIds?: Array<number>
    chaptersRead: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserReleaseYearStats = {
    releaseYear?: number
    meanScore: number
    count: number
    minutesWatched: number
    mediaIds?: Array<number>
    chaptersRead: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserScoreStats = {
    score?: number
    meanScore: number
    count: number
    minutesWatched: number
    mediaIds?: Array<number>
    chaptersRead: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserStartYearStats = {
    startYear?: number
    meanScore: number
    count: number
    minutesWatched: number
    mediaIds?: Array<number>
    chaptersRead: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserStatusStats = {
    status?: AL_MediaListStatus
    meanScore: number
    count: number
    minutesWatched: number
    mediaIds?: Array<number>
    chaptersRead: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserStudioStats = {
    studio?: AL_UserStudioStats_Studio
    meanScore: number
    count: number
    minutesWatched: number
    mediaIds?: Array<number>
    chaptersRead: number
}

/**
 * - Filepath: internal/api/anilist/client_gen.go
 * - Filename: client_gen.go
 * - Package: anilist
 */
export type AL_UserStudioStats_Studio = {
    id: number
    name: string
    isAnimationStudio: boolean
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Anime
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/library/anime/autodownloader_rule.go
 * - Filename: autodownloader_rule.go
 * - Package: anime
 */
export type Anime_AutoDownloaderRule = {
    /**
     * Will be set when fetched from the database
     */
    dbId: number
    enabled: boolean
    mediaId: number
    releaseGroups?: Array<string>
    resolutions?: Array<string>
    comparisonTitle: string
    titleComparisonType: Anime_AutoDownloaderRuleTitleComparisonType
    episodeType: Anime_AutoDownloaderRuleEpisodeType
    episodeNumbers?: Array<number>
    destination: string
    additionalTerms?: Array<string>
}

/**
 * - Filepath: internal/library/anime/autodownloader_rule.go
 * - Filename: autodownloader_rule.go
 * - Package: anime
 */
export type Anime_AutoDownloaderRuleEpisodeType = "recent" | "selected"

/**
 * - Filepath: internal/library/anime/autodownloader_rule.go
 * - Filename: autodownloader_rule.go
 * - Package: anime
 */
export type Anime_AutoDownloaderRuleTitleComparisonType = "contains" | "likely"

/**
 * - Filepath: internal/library/anime/entry.go
 * - Filename: entry.go
 * - Package: anime
 */
export type Anime_Entry = {
    mediaId: number
    media?: AL_BaseAnime
    listData?: Anime_EntryListData
    libraryData?: Anime_EntryLibraryData
    downloadInfo?: Anime_EntryDownloadInfo
    episodes?: Array<Anime_Episode>
    nextEpisode?: Anime_Episode
    localFiles?: Array<Anime_LocalFile>
    anidbId: number
    currentEpisodeCount: number
}

/**
 * - Filepath: internal/library/anime/entry_download_info.go
 * - Filename: entry_download_info.go
 * - Package: anime
 */
export type Anime_EntryDownloadEpisode = {
    episodeNumber: number
    aniDBEpisode: string
    episode?: Anime_Episode
}

/**
 * - Filepath: internal/library/anime/entry_download_info.go
 * - Filename: entry_download_info.go
 * - Package: anime
 */
export type Anime_EntryDownloadInfo = {
    episodesToDownload?: Array<Anime_EntryDownloadEpisode>
    canBatch: boolean
    batchAll: boolean
    hasInaccurateSchedule: boolean
    rewatch: boolean
    absoluteOffset: number
}

/**
 * - Filepath: internal/library/anime/entry_library_data.go
 * - Filename: entry_library_data.go
 * - Package: anime
 */
export type Anime_EntryLibraryData = {
    allFilesLocked: boolean
    sharedPath: string
}

/**
 * - Filepath: internal/library/anime/entry.go
 * - Filename: entry.go
 * - Package: anime
 */
export type Anime_EntryListData = {
    progress?: number
    score?: number
    status?: AL_MediaListStatus
    startedAt?: string
    completedAt?: string
}

/**
 * - Filepath: internal/library/anime/episode.go
 * - Filename: episode.go
 * - Package: anime
 */
export type Anime_Episode = {
    type: Anime_LocalFileType
    /**
     * e.g, Show: "Episode 1", Movie: "Violet Evergarden The Movie"
     */
    displayTitle: string
    /**
     * e.g, "Shibuya Incident - Gate, Open"
     */
    episodeTitle: string
    episodeNumber: number
    /**
     * AniDB episode number
     */
    aniDBEpisode?: string
    absoluteEpisodeNumber: number
    /**
     * Usually the same as EpisodeNumber, unless there is a discrepancy between AniList and AniDB
     */
    progressNumber: number
    localFile?: Anime_LocalFile
    /**
     * Is in the local files
     */
    isDownloaded: boolean
    /**
     * (image, airDate, length, summary, overview)
     */
    episodeMetadata?: Anime_EpisodeMetadata
    /**
     * (episode, aniDBEpisode, type...)
     */
    fileMetadata?: Anime_LocalFileMetadata
    /**
     * No AniDB data
     */
    isInvalid: boolean
    /**
     * Alerts the user that there is a discrepancy between AniList and AniDB
     */
    metadataIssue?: string
    baseAnime?: AL_BaseAnime
}

/**
 * - Filepath: internal/library/anime/episode.go
 * - Filename: episode.go
 * - Package: anime
 */
export type Anime_EpisodeMetadata = {
    anidbId?: number
    image?: string
    airDate?: string
    length?: number
    summary?: string
    overview?: string
    isFiller?: boolean
}

/**
 * - Filepath: internal/library/anime/collection.go
 * - Filename: collection.go
 * - Package: anime
 */
export type Anime_LibraryCollection = {
    continueWatchingList?: Array<Anime_Episode>
    lists?: Array<Anime_LibraryCollectionList>
    unmatchedLocalFiles?: Array<Anime_LocalFile>
    unmatchedGroups?: Array<Anime_UnmatchedGroup>
    ignoredLocalFiles?: Array<Anime_LocalFile>
    unknownGroups?: Array<Anime_UnknownGroup>
    stats?: Anime_LibraryCollectionStats
    /**
     * Hydrated by the route handler
     */
    stream?: Anime_StreamCollection
}

/**
 * - Filepath: internal/library/anime/collection.go
 * - Filename: collection.go
 * - Package: anime
 */
export type Anime_LibraryCollectionEntry = {
    media?: AL_BaseAnime
    mediaId: number
    /**
     * Library data
     */
    libraryData?: Anime_EntryLibraryData
    /**
     * AniList list data
     */
    listData?: Anime_EntryListData
}

/**
 * - Filepath: internal/library/anime/collection.go
 * - Filename: collection.go
 * - Package: anime
 */
export type Anime_LibraryCollectionList = {
    type?: AL_MediaListStatus
    status?: AL_MediaListStatus
    entries?: Array<Anime_LibraryCollectionEntry>
}

/**
 * - Filepath: internal/library/anime/collection.go
 * - Filename: collection.go
 * - Package: anime
 */
export type Anime_LibraryCollectionStats = {
    totalEntries: number
    totalFiles: number
    totalShows: number
    totalMovies: number
    totalSpecials: number
    totalSize: string
}

/**
 * - Filepath: internal/library/anime/localfile.go
 * - Filename: localfile.go
 * - Package: anime
 */
export type Anime_LocalFile = {
    path: string
    name: string
    parsedInfo?: Anime_LocalFileParsedData
    parsedFolderInfo?: Array<Anime_LocalFileParsedData>
    metadata?: Anime_LocalFileMetadata
    locked: boolean
    /**
     * Unused for now
     */
    ignored: boolean
    mediaId: number
}

/**
 * - Filepath: internal/library/anime/localfile.go
 * - Filename: localfile.go
 * - Package: anime
 */
export type Anime_LocalFileMetadata = {
    episode: number
    aniDBEpisode: string
    type: Anime_LocalFileType
}

/**
 * - Filepath: internal/library/anime/localfile.go
 * - Filename: localfile.go
 * - Package: anime
 */
export type Anime_LocalFileParsedData = {
    original: string
    title?: string
    releaseGroup?: string
    season?: string
    seasonRange?: Array<string>
    part?: string
    partRange?: Array<string>
    episode?: string
    episodeRange?: Array<string>
    episodeTitle?: string
    year?: string
}

/**
 * - Filepath: internal/library/anime/localfile.go
 * - Filename: localfile.go
 * - Package: anime
 */
export type Anime_LocalFileType = "main" | "special" | "nc"

/**
 * - Filepath: internal/library/anime/missing_episodes.go
 * - Filename: missing_episodes.go
 * - Package: anime
 */
export type Anime_MissingEpisodes = {
    episodes?: Array<Anime_Episode>
    silencedEpisodes?: Array<Anime_Episode>
}

/**
 * - Filepath: internal/library/anime/playlist.go
 * - Filename: playlist.go
 * - Package: anime
 */
export type Anime_Playlist = {
    /**
     * DbId is the database ID of the models.PlaylistEntry
     */
    dbId: number
    /**
     * Name is the name of the playlist
     */
    name: string
    /**
     * LocalFiles is a list of local files in the playlist, in order
     */
    localFiles?: Array<Anime_LocalFile>
}

/**
 * - Filepath: internal/library/anime/collection.go
 * - Filename: collection.go
 * - Package: anime
 */
export type Anime_StreamCollection = {
    continueWatchingList?: Array<Anime_Episode>
    anime?: Array<AL_BaseAnime>
    listData?: Record<number, Anime_EntryListData>
}

/**
 * - Filepath: internal/library/anime/collection.go
 * - Filename: collection.go
 * - Package: anime
 */
export type Anime_UnknownGroup = {
    mediaId: number
    localFiles?: Array<Anime_LocalFile>
}

/**
 * - Filepath: internal/library/anime/collection.go
 * - Filename: collection.go
 * - Package: anime
 */
export type Anime_UnmatchedGroup = {
    dir: string
    localFiles?: Array<Anime_LocalFile>
    suggestions?: Array<AL_BaseAnime>
}

/**
 * - Filepath: internal/library/anime/user.go
 * - Filename: user.go
 * - Package: anime
 */
export type Anime_User = {
    viewer?: AL_GetViewer_Viewer
    token: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChapterDownloader
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/manga/downloader/chapter_downloader.go
 * - Filename: chapter_downloader.go
 * - Package: chapter_downloader
 */
export type ChapterDownloader_DownloadID = {
    provider: string
    mediaId: number
    chapterId: string
    chapterNumber: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Continuity
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/continuity/manager.go
 * - Filename: manager.go
 * - Package: continuity
 */
export type Continuity_Kind = "onlinestream" | "mediastream" | "external_player"

/**
 * - Filepath: internal/continuity/history.go
 * - Filename: history.go
 * - Package: continuity
 */
export type Continuity_UpdateWatchHistoryItemOptions = {
    currentTime: number
    duration: number
    mediaId: number
    episodeNumber: number
    filepath?: string
    kind: Continuity_Kind
}

/**
 * - Filepath: internal/continuity/history.go
 * - Filename: history.go
 * - Package: continuity
 */
export type Continuity_WatchHistory = Record<number, Continuity_WatchHistoryItem>

/**
 * - Filepath: internal/continuity/history.go
 * - Filename: history.go
 * - Package: continuity
 */
export type Continuity_WatchHistoryItem = {
    kind: Continuity_Kind
    filepath: string
    mediaId: number
    episodeNumber: number
    currentTime: number
    duration: number
    timeAdded?: string
    timeUpdated?: string
}

/**
 * - Filepath: internal/continuity/history.go
 * - Filename: history.go
 * - Package: continuity
 */
export type Continuity_WatchHistoryItemResponse = {
    item?: Continuity_WatchHistoryItem
    found: boolean
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Db
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/database/db/scan_summary.go
 * - Filename: scan_summary.go
 * - Package: db
 */
export type DB_ScanSummaryItem = {
    createdAt?: string
    scanSummary?: Summary_ScanSummary
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Debrid
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/debrid/debrid/debrid.go
 * - Filename: debrid.go
 * - Package: debrid
 */
export type Debrid_CachedFile = {
    size: number
    name: string
}

/**
 * - Filepath: internal/debrid/debrid/debrid.go
 * - Filename: debrid.go
 * - Package: debrid
 */
export type Debrid_TorrentInfo = {
    /**
     * ID of the torrent if added to the debrid service
     */
    id?: string
    name: string
    hash: string
    size: number
    files?: Array<Debrid_TorrentItemFile>
}

/**
 * - Filepath: internal/debrid/debrid/debrid.go
 * - Filename: debrid.go
 * - Package: debrid
 */
export type Debrid_TorrentItem = {
    id: string
    /**
     * Name of the torrent or file
     */
    name: string
    /**
     * SHA1 hash of the torrent
     */
    hash: string
    /**
     * Size of the selected files (size in bytes)
     */
    size: number
    /**
     * Formatted size of the selected files
     */
    formattedSize: string
    /**
     * Progress percentage (0 to 100)
     */
    completionPercentage: number
    /**
     * Formatted estimated time remaining
     */
    eta: string
    /**
     * Current download status
     */
    status: Debrid_TorrentItemStatus
    /**
     * Date when the torrent was added, RFC3339 format
     */
    added: string
    /**
     * Current download speed (optional, present in downloading state)
     */
    speed?: string
    /**
     * Number of seeders (optional, present in downloading state)
     */
    seeders?: number
    /**
     * Whether the torrent is ready to be downloaded
     */
    isReady: boolean
    /**
     * List of files in the torrent (optional)
     */
    files?: Array<Debrid_TorrentItemFile>
}

/**
 * - Filepath: internal/debrid/debrid/debrid.go
 * - Filename: debrid.go
 * - Package: debrid
 */
export type Debrid_TorrentItemFile = {
    /**
     * ID of the file, usually the index
     */
    id: string
    index: number
    name: string
    path: string
    size: number
}

/**
 * - Filepath: internal/debrid/debrid/debrid.go
 * - Filename: debrid.go
 * - Package: debrid
 */
export type Debrid_TorrentItemInstantAvailability = {
    /**
     * Key is the file ID (or index)
     */
    cachedFiles?: Record<string, Debrid_CachedFile>
}

/**
 * - Filepath: internal/debrid/debrid/debrid.go
 * - Filename: debrid.go
 * - Package: debrid
 */
export type Debrid_TorrentItemStatus = "downloading" |
    "completed" |
    "seeding" |
    "error" |
    "stalled" |
    "paused" |
    "other"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DebridClient
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/debrid/client/stream.go
 * - Filename: stream.go
 * - Package: debrid_client
 */
export type DebridClient_CancelStreamOptions = {
    removeTorrent: boolean
}

/**
 * - Filepath: internal/debrid/client/previews.go
 * - Filename: previews.go
 * - Package: debrid_client
 */
export type DebridClient_FilePreview = {
    path: string
    displayPath: string
    displayTitle: string
    episodeNumber: number
    relativeEpisodeNumber: number
    isLikely: boolean
    index: number
    fileId: string
}

/**
 * - Filepath: internal/debrid/client/stream.go
 * - Filename: stream.go
 * - Package: debrid_client
 */
export type DebridClient_StreamPlaybackType = "default" | "externalPlayerLink"

/**
 * - Filepath: internal/debrid/client/stream.go
 * - Filename: stream.go
 * - Package: debrid_client
 */
export type DebridClient_StreamState = {
    status: DebridClient_StreamStatus
    torrentName: string
    message: string
}

/**
 * - Filepath: internal/debrid/client/stream.go
 * - Filename: stream.go
 * - Package: debrid_client
 */
export type DebridClient_StreamStatus = "downloading" | "ready" | "failed" | "started"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Extension
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_ConfigField = {
    type: Extension_ConfigFieldType
    name: string
    label: string
    options?: Array<Extension_ConfigFieldSelectOption>
    default?: string
}

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_ConfigFieldSelectOption = {
    value: string
    label: string
}

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_ConfigFieldType = "text" | "switch" | "select"

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_Extension = {
    /**
     * e.g. "extension-example"
     */
    id: string
    /**
     * e.g. "Extension"
     */
    name: string
    /**
     * e.g. "1.0.0"
     */
    version: string
    /**
     * e.g. "http://cdn.something.app/extensions/extension-example/manifest.json"
     */
    manifestURI: string
    /**
     * e.g. "go"
     */
    language: Extension_Language
    /**
     * e.g. "anime-torrent-provider"
     */
    type: Extension_Type
    /**
     * e.g. "This extension provides torrents"
     */
    description: string
    /**
     * e.g. "Seanime"
     */
    author: string
    icon: string
    website: string
    lang: string
    /**
     * NOT IMPLEMENTED
     */
    scopes?: Array<string>
    userConfig?: Extension_UserConfig
    payload: string
}

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_InvalidExtension = {
    id: string
    path: string
    extension: Extension_Extension
    reason: string
    code: Extension_InvalidExtensionErrorCode
}

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_InvalidExtensionErrorCode = "invalid_manifest" | "invalid_payload" | "user_config_error" | "invalid_authorization"

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_Language = "javascript" | "typescript" | "go"

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_SavedUserConfig = {
    version: number
    values?: Record<string, string>
}

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_Type = "anime-torrent-provider" | "manga-provider" | "onlinestream-provider"

/**
 * - Filepath: internal/extension/extension.go
 * - Filename: extension.go
 * - Package: extension
 */
export type Extension_UserConfig = {
    version: number
    requiresConfig: boolean
    fields?: Array<Extension_ConfigField>
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExtensionPlayground
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/extension_playground/playground.go
 * - Filename: playground.go
 * - Package: extension_playground
 */
export type RunPlaygroundCodeParams = {
    type?: Extension_Type
    language?: Extension_Language
    code: string
    inputs?: Record<string, any>
    function: string
}

/**
 * - Filepath: internal/extension_playground/playground.go
 * - Filename: playground.go
 * - Package: extension_playground
 */
export type RunPlaygroundCodeResponse = {
    logs: string
    value: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExtensionRepo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/extension_repo/repository.go
 * - Filename: repository.go
 * - Package: extension_repo
 */
export type ExtensionRepo_AllExtensions = {
    extensions?: Array<Extension_Extension>
    invalidExtensions?: Array<Extension_InvalidExtension>
    invalidUserConfigExtensions?: Array<Extension_InvalidExtension>
    hasUpdate?: Array<ExtensionRepo_UpdateData>
}

/**
 * - Filepath: internal/extension_repo/repository.go
 * - Filename: repository.go
 * - Package: extension_repo
 */
export type ExtensionRepo_AnimeTorrentProviderExtensionItem = {
    id: string
    name: string
    /**
     * ISO 639-1 language code
     */
    lang: string
    settings?: HibikeTorrent_AnimeProviderSettings
}

/**
 * - Filepath: internal/extension_repo/external.go
 * - Filename: external.go
 * - Package: extension_repo
 */
export type ExtensionRepo_ExtensionInstallResponse = {
    message: string
}

/**
 * - Filepath: internal/extension_repo/userconfig.go
 * - Filename: userconfig.go
 * - Package: extension_repo
 */
export type ExtensionRepo_ExtensionUserConfig = {
    userConfig?: Extension_UserConfig
    savedUserConfig?: Extension_SavedUserConfig
}

/**
 * - Filepath: internal/extension_repo/repository.go
 * - Filename: repository.go
 * - Package: extension_repo
 */
export type ExtensionRepo_MangaProviderExtensionItem = {
    id: string
    name: string
    /**
     * ISO 639-1 language code
     */
    lang: string
    settings?: HibikeManga_Settings
}

/**
 * - Filepath: internal/extension_repo/repository.go
 * - Filename: repository.go
 * - Package: extension_repo
 */
export type ExtensionRepo_OnlinestreamProviderExtensionItem = {
    id: string
    name: string
    /**
     * ISO 639-1 language code
     */
    lang: string
    episodeServers?: Array<string>
    supportsDub: boolean
}

/**
 * - Filepath: internal/extension_repo/repository.go
 * - Filename: repository.go
 * - Package: extension_repo
 */
export type ExtensionRepo_UpdateData = {
    extensionID: string
    manifestURI: string
    version: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Handlers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/handlers/docs.go
 * - Filename: docs.go
 * - Package: handlers
 */
export type ApiDocsGroup = {
    filename: string
    name: string
    handlers?: Array<RouteHandler>
}

/**
 * - Filepath: internal/handlers/directory_selector.go
 * - Filename: directory_selector.go
 * - Package: handlers
 */
export type DirectoryInfo = {
    fullPath: string
    folderName: string
}

/**
 * - Filepath: internal/handlers/directory_selector.go
 * - Filename: directory_selector.go
 * - Package: handlers
 */
export type DirectorySelectorResponse = {
    fullPath: string
    exists: boolean
    basePath: string
    suggestions?: Array<DirectoryInfo>
    content?: Array<DirectoryInfo>
}

/**
 * - Filepath: internal/handlers/download.go
 * - Filename: download.go
 * - Package: handlers
 */
export type DownloadReleaseResponse = {
    destination: string
    error?: string
}

/**
 * - Filepath: internal/handlers/mal.go
 * - Filename: mal.go
 * - Package: handlers
 */
export type MalAuthResponse = {
    access_token: string
    refresh_token: string
    expires_in: number
    token_type: string
}

/**
 * - Filepath: internal/handlers/docs.go
 * - Filename: docs.go
 * - Package: handlers
 */
export type RouteHandler = {
    name: string
    trimmedName: string
    comments?: Array<string>
    filepath: string
    filename: string
    api?: RouteHandlerApi
}

/**
 * - Filepath: internal/handlers/docs.go
 * - Filename: docs.go
 * - Package: handlers
 */
export type RouteHandlerApi = {
    summary: string
    descriptions?: Array<string>
    endpoint: string
    methods?: Array<string>
    params?: Array<RouteHandlerParam>
    bodyFields?: Array<RouteHandlerParam>
    returns: string
    returnGoType: string
    returnTypescriptType: string
}

/**
 * - Filepath: internal/handlers/docs.go
 * - Filename: docs.go
 * - Package: handlers
 */
export type RouteHandlerParam = {
    name: string
    jsonName: string
    /**
     * e.g., []models.User
     */
    goType: string
    /**
     * e.g., models.User
     */
    usedStructType: string
    /**
     * e.g., Array<User>
     */
    typescriptType: string
    required: boolean
    descriptions?: Array<string>
}

/**
 * - Filepath: internal/handlers/status.go
 * - Filename: status.go
 * - Package: handlers
 * @description
 *  Status is a struct containing the user data, settings, and OS.
 *  It is used by the client in various places to access necessary information.
 */
export type Status = {
    os: string
    clientDevice: string
    clientPlatform: string
    clientUserAgent: string
    user?: Anime_User
    settings?: Models_Settings
    mal?: Models_Mal
    version: string
    themeSettings?: Models_Theme
    isOffline: boolean
    mediastreamSettings?: Models_MediastreamSettings
    torrentstreamSettings?: Models_TorrentstreamSettings
    debridSettings?: Models_DebridSettings
    anilistClientId: string
    /**
     * If true, a new screen will be displayed
     */
    updating: boolean
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Manga
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/manga/chapter_container.go
 * - Filename: chapter_container.go
 * - Package: manga
 */
export type Manga_ChapterContainer = {
    mediaId: number
    provider: string
    chapters?: Array<HibikeManga_ChapterDetails>
}

/**
 * - Filepath: internal/manga/collection.go
 * - Filename: collection.go
 * - Package: manga
 */
export type Manga_Collection = {
    lists?: Array<Manga_CollectionList>
}

/**
 * - Filepath: internal/manga/collection.go
 * - Filename: collection.go
 * - Package: manga
 */
export type Manga_CollectionEntry = {
    media?: AL_BaseManga
    mediaId: number
    /**
     * AniList list data
     */
    listData?: Manga_EntryListData
}

/**
 * - Filepath: internal/manga/collection.go
 * - Filename: collection.go
 * - Package: manga
 */
export type Manga_CollectionList = {
    type?: AL_MediaListStatus
    status?: AL_MediaListStatus
    entries?: Array<Manga_CollectionEntry>
}

/**
 * - Filepath: internal/manga/download.go
 * - Filename: download.go
 * - Package: manga
 */
export type Manga_DownloadListItem = {
    mediaId: number
    media?: AL_BaseManga
    downloadData: Manga_ProviderDownloadMap
}

/**
 * - Filepath: internal/manga/manga_entry.go
 * - Filename: manga_entry.go
 * - Package: manga
 */
export type Manga_Entry = {
    mediaId: number
    media?: AL_BaseManga
    listData?: Manga_EntryListData
}

/**
 * - Filepath: internal/manga/manga_entry.go
 * - Filename: manga_entry.go
 * - Package: manga
 */
export type Manga_EntryListData = {
    progress?: number
    score?: number
    status?: AL_MediaListStatus
    startedAt?: string
    completedAt?: string
}

/**
 * - Filepath: internal/manga/chapter_container_mapping.go
 * - Filename: chapter_container_mapping.go
 * - Package: manga
 */
export type Manga_MappingResponse = {
    mangaId?: string
}

/**
 * - Filepath: internal/manga/download.go
 * - Filename: download.go
 * - Package: manga
 */
export type Manga_MediaDownloadData = {
    downloaded: Manga_ProviderDownloadMap
    queued: Manga_ProviderDownloadMap
}

/**
 * - Filepath: internal/manga/chapter_page_container.go
 * - Filename: chapter_page_container.go
 * - Package: manga
 */
export type Manga_PageContainer = {
    mediaId: number
    provider: string
    chapterId: string
    pages?: Array<HibikeManga_ChapterPage>
    /**
     * Indexed by page number
     */
    pageDimensions?: Record<number, Manga_PageDimension>
    /**
     * TODO remove
     */
    isDownloaded: boolean
}

/**
 * - Filepath: internal/manga/chapter_page_container.go
 * - Filename: chapter_page_container.go
 * - Package: manga
 */
export type Manga_PageDimension = {
    width: number
    height: number
}

/**
 * - Filepath: internal/manga/download.go
 * - Filename: download.go
 * - Package: manga
 */
export type Manga_ProviderDownloadMap = Record<string, Array<Manga_ProviderDownloadMapChapterInfo>>

/**
 * - Filepath: internal/manga/download.go
 * - Filename: download.go
 * - Package: manga
 */
export type Manga_ProviderDownloadMapChapterInfo = {
    chapterId: string
    chapterNumber: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Mediastream
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/mediastream/playback.go
 * - Filename: playback.go
 * - Package: mediastream
 */
export type Mediastream_MediaContainer = {
    filePath: string
    hash: string
    /**
     * Tells the frontend how to play the media.
     */
    streamType: Mediastream_StreamType
    /**
     * The relative endpoint to stream the media.
     */
    streamUrl: string
    mediaInfo?: MediaInfo
}

/**
 * - Filepath: internal/mediastream/playback.go
 * - Filename: playback.go
 * - Package: mediastream
 */
export type Mediastream_StreamType = "transcode" | "optimized" | "direct"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Models
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_AnilistSettings = {
    hideAudienceScore: boolean
    enableAdultContent: boolean
    blurAdultContent: boolean
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_AutoDownloaderItem = {
    ruleId: number
    mediaId: number
    episode: number
    link: string
    hash: string
    magnet: string
    torrentName: string
    downloaded: boolean
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_AutoDownloaderSettings = {
    provider: string
    interval: number
    enabled: boolean
    downloadAutomatically: boolean
    enableEnhancedQueries: boolean
    enableSeasonCheck: boolean
    useDebrid: boolean
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_ChapterDownloadQueueItem = {
    provider: string
    mediaId: number
    chapterId: string
    chapterNumber: string
    /**
     * Contains map of page index to page details
     */
    pageData?: Array<string>
    status: string
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_DebridSettings = {
    enabled: boolean
    provider: string
    apiKey: string
    includeDebridStreamInLibrary: boolean
    streamAutoSelect: boolean
    streamPreferredResolution: string
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_DiscordSettings = {
    enableRichPresence: boolean
    enableAnimeRichPresence: boolean
    enableMangaRichPresence: boolean
    richPresenceHideSeanimeRepositoryButton: boolean
    richPresenceShowAniListMediaButton: boolean
    richPresenceShowAniListProfileButton: boolean
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_LibraryPaths = Array<string>

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_LibrarySettings = {
    libraryPath: string
    autoUpdateProgress: boolean
    disableUpdateCheck: boolean
    torrentProvider: string
    autoScan: boolean
    enableOnlinestream: boolean
    includeOnlineStreamingInLibrary: boolean
    disableAnimeCardTrailers: boolean
    enableManga: boolean
    dohProvider: string
    openTorrentClientOnStart: boolean
    openWebURLOnStart: boolean
    refreshLibraryOnStart: boolean
    autoPlayNextEpisode: boolean
    enableWatchContinuity: boolean
    libraryPaths: Models_LibraryPaths
    autoSyncOfflineLocalData: boolean
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_ListSyncSettings = {
    automatic: boolean
    origin: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_Mal = {
    username: string
    accessToken: string
    refreshToken: string
    tokenExpiresAt?: string
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_MangaSettings = {
    defaultMangaProvider: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_MediaPlayerSettings = {
    /**
     * "vlc" or "mpc-hc"
     */
    defaultPlayer: string
    host: string
    vlcUsername: string
    vlcPassword: string
    vlcPort: number
    vlcPath: string
    mpcPort: number
    mpcPath: string
    mpvSocket: string
    mpvPath: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_MediastreamSettings = {
    transcodeEnabled: boolean
    transcodeHwAccel: string
    transcodeThreads: number
    transcodePreset: string
    disableAutoSwitchToDirectPlay: boolean
    directPlayOnly: boolean
    preTranscodeEnabled: boolean
    preTranscodeLibraryDir: string
    ffmpegPath: string
    ffprobePath: string
    transcodeHwAccelCustomSettings: string
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_NotificationSettings = {
    disableNotifications: boolean
    disableAutoDownloaderNotifications: boolean
    disableAutoScannerNotifications: boolean
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_Settings = {
    library?: Models_LibrarySettings
    mediaPlayer?: Models_MediaPlayerSettings
    torrent?: Models_TorrentSettings
    manga?: Models_MangaSettings
    anilist?: Models_AnilistSettings
    listSync?: Models_ListSyncSettings
    autoDownloader?: Models_AutoDownloaderSettings
    discord?: Models_DiscordSettings
    notifications?: Models_NotificationSettings
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_SilencedMediaEntry = {
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_Theme = {
    enableColorSettings: boolean
    backgroundColor: string
    accentColor: string
    /**
     * DEPRECATED
     */
    sidebarBackgroundColor: string
    /**
     * DEPRECATED
     */
    animeEntryScreenLayout: string
    expandSidebarOnHover: boolean
    hideTopNavbar: boolean
    enableMediaCardBlurredBackground: boolean
    libraryScreenCustomBackgroundImage: string
    libraryScreenCustomBackgroundOpacity: number
    smallerEpisodeCarouselSize: boolean
    libraryScreenBannerType: string
    libraryScreenCustomBannerImage: string
    libraryScreenCustomBannerPosition: string
    libraryScreenCustomBannerOpacity: number
    disableLibraryScreenGenreSelector: boolean
    libraryScreenCustomBackgroundBlur: string
    enableMediaPageBlurredBackground: boolean
    disableSidebarTransparency: boolean
    useLegacyEpisodeCard: boolean
    disableCarouselAutoScroll: boolean
    id: number
    createdAt?: string
    updatedAt?: string
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_TorrentSettings = {
    defaultTorrentClient: string
    qbittorrentPath: string
    qbittorrentHost: string
    qbittorrentPort: number
    qbittorrentUsername: string
    qbittorrentPassword: string
    transmissionPath: string
    transmissionHost: string
    transmissionPort: number
    transmissionUsername: string
    transmissionPassword: string
    showActiveTorrentCount: boolean
    hideTorrentList: boolean
}

/**
 * - Filepath: internal/database/models/models.go
 * - Filename: models.go
 * - Package: models
 */
export type Models_TorrentstreamSettings = {
    enabled: boolean
    autoSelect: boolean
    preferredResolution: string
    disableIPV6: boolean
    downloadDir: string
    addToLibrary: boolean
    torrentClientHost: string
    torrentClientPort: number
    streamingServerHost: string
    streamingServerPort: number
    includeInLibrary: boolean
    id: number
    createdAt?: string
    updatedAt?: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Onlinestream
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/onlinestream/repository.go
 * - Filename: repository.go
 * - Package: onlinestream
 */
export type Onlinestream_Episode = {
    number: number
    title?: string
    image?: string
    description?: string
    isFiller?: boolean
}

/**
 * - Filepath: internal/onlinestream/repository.go
 * - Filename: repository.go
 * - Package: onlinestream
 */
export type Onlinestream_EpisodeListResponse = {
    episodes?: Array<Onlinestream_Episode>
    media?: AL_BaseAnime
}

/**
 * - Filepath: internal/onlinestream/repository.go
 * - Filename: repository.go
 * - Package: onlinestream
 */
export type Onlinestream_EpisodeSource = {
    number: number
    videoSources?: Array<Onlinestream_VideoSource>
    subtitles?: Array<Onlinestream_Subtitle>
}

/**
 * - Filepath: internal/onlinestream/manual_mapping.go
 * - Filename: manual_mapping.go
 * - Package: onlinestream
 */
export type Onlinestream_MappingResponse = {
    animeId?: string
}

/**
 * - Filepath: internal/onlinestream/repository.go
 * - Filename: repository.go
 * - Package: onlinestream
 */
export type Onlinestream_Subtitle = {
    url: string
    language: string
}

/**
 * - Filepath: internal/onlinestream/repository.go
 * - Filename: repository.go
 * - Package: onlinestream
 */
export type Onlinestream_VideoSource = {
    server: string
    headers?: Record<string, string>
    url: string
    quality: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Summary
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/library/summary/scan_summary.go
 * - Filename: scan_summary.go
 * - Package: summary
 */
export type Summary_ScanSummary = {
    id: string
    groups?: Array<Summary_ScanSummaryGroup>
    unmatchedFiles?: Array<Summary_ScanSummaryFile>
}

/**
 * - Filepath: internal/library/summary/scan_summary.go
 * - Filename: scan_summary.go
 * - Package: summary
 */
export type Summary_ScanSummaryFile = {
    id: string
    localFile?: Anime_LocalFile
    logs?: Array<Summary_ScanSummaryLog>
}

/**
 * - Filepath: internal/library/summary/scan_summary.go
 * - Filename: scan_summary.go
 * - Package: summary
 */
export type Summary_ScanSummaryGroup = {
    id: string
    files?: Array<Summary_ScanSummaryFile>
    mediaId: number
    mediaTitle: string
    mediaImage: string
    /**
     * Whether the media is in the user's AniList collection
     */
    mediaIsInCollection: boolean
}

/**
 * - Filepath: internal/library/summary/scan_summary.go
 * - Filename: scan_summary.go
 * - Package: summary
 */
export type Summary_ScanSummaryLog = {
    id: string
    filePath: string
    level: string
    message: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sync
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/sync/sync.go
 * - Filename: sync.go
 * - Package: sync
 */
export type Sync_QueueMediaTask = {
    mediaId: number
    image: string
    title: string
    type: string
}

/**
 * - Filepath: internal/sync/sync.go
 * - Filename: sync.go
 * - Package: sync
 */
export type Sync_QueueState = {
    animeTasks?: Record<number, Sync_QueueMediaTask>
    mangaTasks?: Record<number, Sync_QueueMediaTask>
}

/**
 * - Filepath: internal/sync/manager.go
 * - Filename: manager.go
 * - Package: sync
 */
export type Sync_TrackedMediaItem = {
    mediaId: number
    type: string
    animeEntry?: AL_AnimeListEntry
    mangaEntry?: AL_MangaListEntry
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Torrent
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/torrents/torrent/search.go
 * - Filename: search.go
 * - Package: torrent
 */
export type Torrent_Preview = {
    /**
     * nil if batch
     */
    episode?: Anime_Episode
    torrent?: HibikeTorrent_AnimeTorrent
}

/**
 * - Filepath: internal/torrents/torrent/search.go
 * - Filename: search.go
 * - Package: torrent
 */
export type Torrent_SearchData = {
    /**
     * Torrents found
     */
    torrents?: Array<HibikeTorrent_AnimeTorrent>
    /**
     * TorrentPreview for each torrent
     */
    previews?: Array<Torrent_Preview>
    /**
     * Debrid instant availability
     */
    debridInstantAvailability?: Record<string, Debrid_TorrentItemInstantAvailability>
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TorrentClient
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/torrent_clients/torrent_client/torrent.go
 * - Filename: torrent.go
 * - Package: torrent_client
 */
export type TorrentClient_Torrent = {
    name: string
    hash: string
    seeds: number
    upSpeed: string
    downSpeed: string
    progress: number
    size: string
    eta: string
    status: TorrentClient_TorrentStatus
    contentPath: string
}

/**
 * - Filepath: internal/torrent_clients/torrent_client/torrent.go
 * - Filename: torrent.go
 * - Package: torrent_client
 */
export type TorrentClient_TorrentStatus = "downloading" | "seeding" | "paused" | "other" | "stopped"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Torrentstream
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/torrentstream/history.go
 * - Filename: history.go
 * - Package: torrentstream
 */
export type Torrentstream_BatchHistoryResponse = {
    torrent?: HibikeTorrent_AnimeTorrent
}

/**
 * - Filepath: internal/torrentstream/list.go
 * - Filename: list.go
 * - Package: torrentstream
 */
export type Torrentstream_EpisodeCollection = {
    episodes?: Array<Anime_Episode>
    hasMappingError: boolean
}

/**
 * - Filepath: internal/torrentstream/previews.go
 * - Filename: previews.go
 * - Package: torrentstream
 */
export type Torrentstream_FilePreview = {
    path: string
    displayPath: string
    displayTitle: string
    episodeNumber: number
    relativeEpisodeNumber: number
    isLikely: boolean
    index: number
}

/**
 * - Filepath: internal/torrentstream/stream.go
 * - Filename: stream.go
 * - Package: torrentstream
 */
export type Torrentstream_PlaybackType = "default" | "externalPlayerLink"

/**
 * - Filepath: internal/torrentstream/events.go
 * - Filename: events.go
 * - Package: torrentstream
 */
export type Torrentstream_TorrentLoadingStatus = {
    torrentBeingChecked: string
    state: Torrentstream_TorrentLoadingStatusState
}

/**
 * - Filepath: internal/torrentstream/events.go
 * - Filename: events.go
 * - Package: torrentstream
 */
export type Torrentstream_TorrentLoadingStatusState = "SEARCHING_TORRENTS" |
    "CHECKING_TORRENT" |
    "ADDING_TORRENT" |
    "SELECTING_FILE" |
    "STARTING_SERVER" |
    "SENDING_STREAM_TO_MEDIA_PLAYER"

/**
 * - Filepath: internal/torrentstream/client.go
 * - Filename: client.go
 * - Package: torrentstream
 */
export type Torrentstream_TorrentStatus = {
    uploadProgress: number
    downloadProgress: number
    progressPercentage: number
    downloadSpeed: string
    uploadSpeed: string
    size: string
    seeders: number
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tvdb
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/api/tvdb/types.go
 * - Filename: types.go
 * - Package: tvdb
 */
export type TVDB_Episode = {
    id: number
    image: string
    number: number
    airedAt: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Updater
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/updater/check.go
 * - Filename: check.go
 * - Package: updater
 */
export type Updater_Release = {
    url: string
    html_url: string
    node_id: string
    tag_name: string
    name: string
    body: string
    published_at: string
    released: boolean
    version: string
    assets?: Array<Updater_ReleaseAsset>
}

/**
 * - Filepath: internal/updater/check.go
 * - Filename: check.go
 * - Package: updater
 */
export type Updater_ReleaseAsset = {
    url: string
    id: number
    node_id: string
    name: string
    content_type: string
    uploaded: boolean
    size: number
    browser_download_url: string
}

/**
 * - Filepath: internal/updater/updater.go
 * - Filename: updater.go
 * - Package: updater
 */
export type Updater_Update = {
    release?: Updater_Release
    current_version?: string
    type: string
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VendorHibikeManga
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/extension/vendoring/manga/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_manga
 */
export type HibikeManga_ChapterDetails = {
    provider: string
    id: string
    url: string
    title: string
    chapter: string
    index: number
    scanlator?: string
    language?: string
    rating?: number
    updatedAt?: string
}

/**
 * - Filepath: internal/extension/vendoring/manga/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_manga
 */
export type HibikeManga_ChapterPage = {
    provider: string
    url: string
    index: number
    headers?: Record<string, string>
}

/**
 * - Filepath: internal/extension/vendoring/manga/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_manga
 */
export type HibikeManga_SearchResult = {
    provider: string
    id: string
    title: string
    synonyms?: Array<string>
    year?: number
    image?: string
    searchRating?: number
}

/**
 * - Filepath: internal/extension/vendoring/manga/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_manga
 */
export type HibikeManga_Settings = {
    supportsMultiScanlator: boolean
    supportsMultiLanguage: boolean
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VendorHibikeOnlinestream
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/extension/vendoring/onlinestream/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_onlinestream
 */
export type HibikeOnlinestream_SearchResult = {
    id: string
    title: string
    url: string
    subOrDub: HibikeOnlinestream_SubOrDub
}

/**
 * - Filepath: internal/extension/vendoring/onlinestream/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_onlinestream
 */
export type HibikeOnlinestream_SubOrDub = "sub" | "dub" | "both"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VendorHibikeTorrent
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/extension/vendoring/torrent/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_torrent
 */
export type HibikeTorrent_AnimeProviderSettings = {
    canSmartSearch: boolean
    smartSearchFilters?: Array<HibikeTorrent_AnimeProviderSmartSearchFilter>
    supportsAdult: boolean
    type: HibikeTorrent_AnimeProviderType
}

/**
 * - Filepath: internal/extension/vendoring/torrent/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_torrent
 */
export type HibikeTorrent_AnimeProviderSmartSearchFilter = "batch" | "episodeNumber" | "resolution" | "query" | "bestReleases"

/**
 * - Filepath: internal/extension/vendoring/torrent/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_torrent
 */
export type HibikeTorrent_AnimeProviderType = "main" | "special"

/**
 * - Filepath: internal/extension/vendoring/torrent/types.go
 * - Filename: types.go
 * - Package: vendor_hibike_torrent
 */
export type HibikeTorrent_AnimeTorrent = {
    provider?: string
    name: string
    date: string
    size: number
    formattedSize: string
    seeders: number
    leechers: number
    downloadCount: number
    link: string
    downloadUrl: string
    magnetLink?: string
    infoHash?: string
    resolution?: string
    isBatch?: boolean
    episodeNumber?: number
    releaseGroup?: string
    isBestRelease: boolean
    confirmed: boolean
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Videofile
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - Filepath: internal/mediastream/videofile/info.go
 * - Filename: info.go
 * - Package: videofile
 */
export type Audio = {
    index: number
    title?: string
    language?: string
    codec: string
    mimeCodec?: string
    isDefault: boolean
    isForced: boolean
    channels: number
}

/**
 * - Filepath: internal/mediastream/videofile/info.go
 * - Filename: info.go
 * - Package: videofile
 */
export type Chapter = {
    startTime: number
    endTime: number
    name: string
}

/**
 * - Filepath: internal/mediastream/videofile/info.go
 * - Filename: info.go
 * - Package: videofile
 */
export type MediaInfo = {
    ready: any
    sha: string
    path: string
    extension: string
    mimeCodec?: string
    size: number
    duration: number
    container?: string
    video?: Video
    videos?: Array<Video>
    audios?: Array<Audio>
    subtitles?: Array<Subtitle>
    fonts?: Array<string>
    chapters?: Array<Chapter>
}

/**
 * - Filepath: internal/mediastream/videofile/video_quality.go
 * - Filename: video_quality.go
 * - Package: videofile
 */
export type Quality = "240p" |
    "360p" |
    "480p" |
    "720p" |
    "1080p" |
    "1440p" |
    "4k" |
    "8k" |
    "original"

/**
 * - Filepath: internal/mediastream/videofile/info.go
 * - Filename: info.go
 * - Package: videofile
 */
export type Subtitle = {
    index: number
    title?: string
    language?: string
    codec: string
    extension?: string
    isDefault: boolean
    isForced: boolean
    link?: string
}

/**
 * - Filepath: internal/mediastream/videofile/info.go
 * - Filename: info.go
 * - Package: videofile
 */
export type Video = {
    codec: string
    mimeCodec?: string
    language?: string
    quality: Quality
    width: number
    height: number
    bitrate: number
}

